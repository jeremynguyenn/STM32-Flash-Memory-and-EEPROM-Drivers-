
10_w25qxx_flash_storage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08001e04  08001e04  00011e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f8c  08001f8c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001f8c  08001f8c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f8c  08001f8c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f8c  08001f8c  00011f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f90  08001f90  00011f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000064  08001ff8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08001ff8  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e5a  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ed9  00000000  00000000  00024eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000288  00000000  00000000  00025dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000200  00000000  00000000  00026050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000028c2  00000000  00000000  00026250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003bb4  00000000  00000000  00028b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055c4c  00000000  00000000  0002c6c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00082312  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fc8  00000000  00000000  00082368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001dec 	.word	0x08001dec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001dec 	.word	0x08001dec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <fpu_enable+0x50>)
 8000286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800028a:	4a11      	ldr	r2, [pc, #68]	; (80002d0 <fpu_enable+0x50>)
 800028c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<21);
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <fpu_enable+0x50>)
 8000296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800029a:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <fpu_enable+0x50>)
 800029c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<22);
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <fpu_enable+0x50>)
 80002a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002aa:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <fpu_enable+0x50>)
 80002ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<23);
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <fpu_enable+0x50>)
 80002b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ba:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <fpu_enable+0x50>)
 80002bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <main>:

W25QXX_Status_t status;


int main()
{
 80002d4:	b590      	push	{r4, r7, lr}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af04      	add	r7, sp, #16
	/*Enable FPU*/
	fpu_enable();
 80002da:	f7ff ffd1 	bl	8000280 <fpu_enable>

	/*Initialize timebase*/
	timebase_init();
 80002de:	f000 fbc9 	bl	8000a74 <timebase_init>

	/*Initialize debug UART*/
	debug_uart_init();
 80002e2:	f000 fbfd 	bl	8000ae0 <debug_uart_init>

	w25qxx_spi_init();
 80002e6:	f000 fc85 	bl	8000bf4 <w25qxx_spi_init>

	w25qxx_cs_pin_init();
 80002ea:	f000 fcaf 	bl	8000c4c <w25qxx_cs_pin_init>

	status = w25qxx_init(&w25qxx,&hspi1);
 80002ee:	490b      	ldr	r1, [pc, #44]	; (800031c <main+0x48>)
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <main+0x4c>)
 80002f2:	f000 fd4c 	bl	8000d8e <w25qxx_init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <main+0x50>)
 80002fc:	701a      	strb	r2, [r3, #0]

	if(status == W25QXX_DEV_OK)
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <main+0x50>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d109      	bne.n	800031a <main+0x46>
	{
		w25qxx_get_mem_info(w25qxx);
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <main+0x4c>)
 8000308:	466c      	mov	r4, sp
 800030a:	f103 0210 	add.w	r2, r3, #16
 800030e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000310:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000314:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000316:	f000 fd71 	bl	8000dfc <w25qxx_get_mem_info>
	}




	while(1)
 800031a:	e7fe      	b.n	800031a <main+0x46>
 800031c:	200000b4 	.word	0x200000b4
 8000320:	2000008c 	.word	0x2000008c
 8000324:	200000a8 	.word	0x200000a8

08000328 <spi1_gpio_init>:
#include "stddef.h"

#define GPIOAEN		(1U<<0)
#define SPI1EN		(1U<<12)
void spi1_gpio_init(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 800032c:	4b3e      	ldr	r3, [pc, #248]	; (8000428 <spi1_gpio_init+0x100>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000330:	4a3d      	ldr	r2, [pc, #244]	; (8000428 <spi1_gpio_init+0x100>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5,PA6,PA7 mode to alternate function mode*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 8000338:	4b3c      	ldr	r3, [pc, #240]	; (800042c <spi1_gpio_init+0x104>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a3b      	ldr	r2, [pc, #236]	; (800042c <spi1_gpio_init+0x104>)
 800033e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000342:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 8000344:	4b39      	ldr	r3, [pc, #228]	; (800042c <spi1_gpio_init+0x104>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a38      	ldr	r2, [pc, #224]	; (800042c <spi1_gpio_init+0x104>)
 800034a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800034e:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 8000350:	4b36      	ldr	r3, [pc, #216]	; (800042c <spi1_gpio_init+0x104>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a35      	ldr	r2, [pc, #212]	; (800042c <spi1_gpio_init+0x104>)
 8000356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800035a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 800035c:	4b33      	ldr	r3, [pc, #204]	; (800042c <spi1_gpio_init+0x104>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a32      	ldr	r2, [pc, #200]	; (800042c <spi1_gpio_init+0x104>)
 8000362:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000366:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 8000368:	4b30      	ldr	r3, [pc, #192]	; (800042c <spi1_gpio_init+0x104>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a2f      	ldr	r2, [pc, #188]	; (800042c <spi1_gpio_init+0x104>)
 800036e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000372:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 8000374:	4b2d      	ldr	r3, [pc, #180]	; (800042c <spi1_gpio_init+0x104>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a2c      	ldr	r2, [pc, #176]	; (800042c <spi1_gpio_init+0x104>)
 800037a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037e:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/

	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 8000380:	4b2a      	ldr	r3, [pc, #168]	; (800042c <spi1_gpio_init+0x104>)
 8000382:	6a1b      	ldr	r3, [r3, #32]
 8000384:	4a29      	ldr	r2, [pc, #164]	; (800042c <spi1_gpio_init+0x104>)
 8000386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800038a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 800038c:	4b27      	ldr	r3, [pc, #156]	; (800042c <spi1_gpio_init+0x104>)
 800038e:	6a1b      	ldr	r3, [r3, #32]
 8000390:	4a26      	ldr	r2, [pc, #152]	; (800042c <spi1_gpio_init+0x104>)
 8000392:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000396:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 8000398:	4b24      	ldr	r3, [pc, #144]	; (800042c <spi1_gpio_init+0x104>)
 800039a:	6a1b      	ldr	r3, [r3, #32]
 800039c:	4a23      	ldr	r2, [pc, #140]	; (800042c <spi1_gpio_init+0x104>)
 800039e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 80003a4:	4b21      	ldr	r3, [pc, #132]	; (800042c <spi1_gpio_init+0x104>)
 80003a6:	6a1b      	ldr	r3, [r3, #32]
 80003a8:	4a20      	ldr	r2, [pc, #128]	; (800042c <spi1_gpio_init+0x104>)
 80003aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80003ae:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 80003b0:	4b1e      	ldr	r3, [pc, #120]	; (800042c <spi1_gpio_init+0x104>)
 80003b2:	6a1b      	ldr	r3, [r3, #32]
 80003b4:	4a1d      	ldr	r2, [pc, #116]	; (800042c <spi1_gpio_init+0x104>)
 80003b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003ba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<25);
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <spi1_gpio_init+0x104>)
 80003be:	6a1b      	ldr	r3, [r3, #32]
 80003c0:	4a1a      	ldr	r2, [pc, #104]	; (800042c <spi1_gpio_init+0x104>)
 80003c2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80003c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <spi1_gpio_init+0x104>)
 80003ca:	6a1b      	ldr	r3, [r3, #32]
 80003cc:	4a17      	ldr	r2, [pc, #92]	; (800042c <spi1_gpio_init+0x104>)
 80003ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<27);
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <spi1_gpio_init+0x104>)
 80003d6:	6a1b      	ldr	r3, [r3, #32]
 80003d8:	4a14      	ldr	r2, [pc, #80]	; (800042c <spi1_gpio_init+0x104>)
 80003da:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80003de:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <spi1_gpio_init+0x104>)
 80003e2:	6a1b      	ldr	r3, [r3, #32]
 80003e4:	4a11      	ldr	r2, [pc, #68]	; (800042c <spi1_gpio_init+0x104>)
 80003e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<29);
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <spi1_gpio_init+0x104>)
 80003ee:	6a1b      	ldr	r3, [r3, #32]
 80003f0:	4a0e      	ldr	r2, [pc, #56]	; (800042c <spi1_gpio_init+0x104>)
 80003f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80003f6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <spi1_gpio_init+0x104>)
 80003fa:	6a1b      	ldr	r3, [r3, #32]
 80003fc:	4a0b      	ldr	r2, [pc, #44]	; (800042c <spi1_gpio_init+0x104>)
 80003fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000402:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<31);
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <spi1_gpio_init+0x104>)
 8000406:	6a1b      	ldr	r3, [r3, #32]
 8000408:	4a08      	ldr	r2, [pc, #32]	; (800042c <spi1_gpio_init+0x104>)
 800040a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800040e:	6213      	str	r3, [r2, #32]

	/*Enable clock access to SPI1*/
	RCC->APB2ENR |=SPI1EN;
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <spi1_gpio_init+0x100>)
 8000412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <spi1_gpio_init+0x100>)
 8000416:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800041a:	6453      	str	r3, [r2, #68]	; 0x44

}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40023800 	.word	0x40023800
 800042c:	40020000 	.word	0x40020000

08000430 <spi_init>:

StatusTypeDef spi_init(SPI_HandleTypeDef *hspi)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	/*Check spi handle allocation*/
	if(hspi == NULL)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d101      	bne.n	8000442 <spi_init+0x12>
	{
		return DEV_ERROR;
 800043e:	2301      	movs	r3, #1
 8000440:	e05a      	b.n	80004f8 <spi_init+0xc8>
	}

	/*Disable CRC calculation*/
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2200      	movs	r2, #0
 8000446:	629a      	str	r2, [r3, #40]	; 0x28

	if(hspi->State == SPI_STATE_RESET)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800044e:	2b00      	cmp	r3, #0
 8000450:	d101      	bne.n	8000456 <spi_init+0x26>
	{
		spi1_gpio_init();
 8000452:	f7ff ff69 	bl	8000328 <spi1_gpio_init>
	}

   hspi->State =  SPI_STATE_BUSY;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2202      	movs	r2, #2
 800045a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800046c:	601a      	str	r2, [r3, #0]

   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
   Communication speed, First bit and CRC calculation state */
   WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800047e:	431a      	orrs	r2, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000488:	431a      	orrs	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	691b      	ldr	r3, [r3, #16]
 800048e:	f003 0302 	and.w	r3, r3, #2
 8000492:	431a      	orrs	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	f003 0301 	and.w	r3, r3, #1
 800049c:	431a      	orrs	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004a6:	431a      	orrs	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80004b0:	431a      	orrs	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6a1b      	ldr	r3, [r3, #32]
 80004b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ba:	ea42 0103 	orr.w	r1, r2, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	430a      	orrs	r2, r1
 80004cc:	601a      	str	r2, [r3, #0]
                                   (hspi->Init.BuadRatePrescaler & SPI_CR1_BR_Msk) |
                                   (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                   (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

   /* Configure : NSS management, TI Mode */
   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	0c1b      	lsrs	r3, r3, #16
 80004d4:	f003 0104 	and.w	r1, r3, #4
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004dc:	f003 0210 	and.w	r2, r3, #16
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	430a      	orrs	r2, r1
 80004e6:	605a      	str	r2, [r3, #4]

  hspi->ErrorCode =  SPI_ERROR_NONE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2200      	movs	r2, #0
 80004ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->State =  SPI_STATE_READY;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2201      	movs	r2, #1
 80004f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   return DEV_OK;
 80004f6:	2300      	movs	r3, #0
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <spi_transmit>:



StatusTypeDef spi_transmit(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	4613      	mov	r3, r2
 800050e:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 8000510:	2300      	movs	r3, #0
 8000512:	75fb      	strb	r3, [r7, #23]
	uint16_t tx_xfer_cnt;


	tx_xfer_cnt  = size;
 8000514:	88fb      	ldrh	r3, [r7, #6]
 8000516:	82bb      	strh	r3, [r7, #20]
	tickstart = get_tick();
 8000518:	f000 fa88 	bl	8000a2c <get_tick>
 800051c:	6138      	str	r0, [r7, #16]

	if(hspi->State != SPI_STATE_READY)
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000524:	2b01      	cmp	r3, #1
 8000526:	d007      	beq.n	8000538 <spi_transmit+0x38>
	{
		error_code = DEV_BUSY;
 8000528:	2302      	movs	r3, #2
 800052a:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	2201      	movs	r2, #1
 8000530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return error_code;
 8000534:	7dfb      	ldrb	r3, [r7, #23]
 8000536:	e0fd      	b.n	8000734 <spi_transmit+0x234>
	}

	if((p_data == NULL) || (size  == 0))
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d002      	beq.n	8000544 <spi_transmit+0x44>
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d107      	bne.n	8000554 <spi_transmit+0x54>
	{
		error_code =  DEV_ERROR;
 8000544:	2301      	movs	r3, #1
 8000546:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2201      	movs	r2, #1
 800054c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return error_code;
 8000550:	7dfb      	ldrb	r3, [r7, #23]
 8000552:	e0ef      	b.n	8000734 <spi_transmit+0x234>
	}

	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_TX;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	2203      	movs	r2, #3
 8000558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	2200      	movs	r2, #0
 8000560:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->pTxBuffPtr = (uint8_t *)p_data;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	68ba      	ldr	r2, [r7, #8]
 8000566:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi->TxXferSize =  size;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	88fa      	ldrh	r2, [r7, #6]
 800056c:	861a      	strh	r2, [r3, #48]	; 0x30
	hspi->TxXferCount=  size;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	88fa      	ldrh	r2, [r7, #6]
 8000572:	865a      	strh	r2, [r3, #50]	; 0x32


	hspi->pRxBuffPtr = (uint8_t *)NULL;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
	hspi->RxXferSize =  0;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2200      	movs	r2, #0
 800057e:	871a      	strh	r2, [r3, #56]	; 0x38
	hspi->RxXferCount=  0;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2200      	movs	r2, #0
 8000584:	875a      	strh	r2, [r3, #58]	; 0x3a

	/*Configure communication direction*/
	if(hspi->Init.Direction  ==  SPI_DIRECTION_1LINE)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800058e:	d10f      	bne.n	80005b0 <spi_transmit+0xb0>
	{
		CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800059e:	601a      	str	r2, [r3, #0]

		/*Set 1 line TX*/
		SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIOE);
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005ae:	601a      	str	r2, [r3, #0]

	}

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ba:	2b40      	cmp	r3, #64	; 0x40
 80005bc:	d007      	beq.n	80005ce <spi_transmit+0xce>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005cc:	601a      	str	r2, [r3, #0]
	}

	/*Transmit data in 16 bit mode*/
	if(hspi->Init.DataSize ==  SPI_DATASIZE_16BIT)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005d6:	d150      	bne.n	800067a <spi_transmit+0x17a>
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  1))
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d002      	beq.n	80005e6 <spi_transmit+0xe6>
 80005e0:	8abb      	ldrh	r3, [r7, #20]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d143      	bne.n	800066e <spi_transmit+0x16e>
		{
			hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ea:	881a      	ldrh	r2, [r3, #0]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr +=sizeof(uint16_t);
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f6:	1c9a      	adds	r2, r3, #2
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	62da      	str	r2, [r3, #44]	; 0x2c
			hspi->TxXferCount--;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000600:	b29b      	uxth	r3, r3
 8000602:	3b01      	subs	r3, #1
 8000604:	b29a      	uxth	r2, r3
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	865a      	strh	r2, [r3, #50]	; 0x32
		}

		while(hspi->TxXferCount> 0)
 800060a:	e030      	b.n	800066e <spi_transmit+0x16e>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	2b00      	cmp	r3, #0
 8000618:	d012      	beq.n	8000640 <spi_transmit+0x140>
			{
				hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061e:	881a      	ldrh	r2, [r3, #0]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr +=sizeof(uint16_t);
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	1c9a      	adds	r2, r3, #2
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
				hspi->TxXferCount--;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000634:	b29b      	uxth	r3, r3
 8000636:	3b01      	subs	r3, #1
 8000638:	b29a      	uxth	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	865a      	strh	r2, [r3, #50]	; 0x32
 800063e:	e016      	b.n	800066e <spi_transmit+0x16e>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000640:	f000 f9f4 	bl	8000a2c <get_tick>
 8000644:	4602      	mov	r2, r0
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	d803      	bhi.n	8000658 <spi_transmit+0x158>
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000656:	d102      	bne.n	800065e <spi_transmit+0x15e>
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d107      	bne.n	800066e <spi_transmit+0x16e>
		         {
					error_code = DEV_TIMEOUT;
 800065e:	2303      	movs	r3, #3
 8000660:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	2201      	movs	r2, #1
 8000666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					return error_code;
 800066a:	7dfb      	ldrb	r3, [r7, #23]
 800066c:	e062      	b.n	8000734 <spi_transmit+0x234>
		while(hspi->TxXferCount> 0)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000672:	b29b      	uxth	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1c9      	bne.n	800060c <spi_transmit+0x10c>
 8000678:	e051      	b.n	800071e <spi_transmit+0x21e>

	}
	/*Transmit data in 8 bit mode*/
	else
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  1))
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <spi_transmit+0x188>
 8000682:	8abb      	ldrh	r3, [r7, #20]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d145      	bne.n	8000714 <spi_transmit+0x214>
		{
			*((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	330c      	adds	r3, #12
 8000692:	7812      	ldrb	r2, [r2, #0]
 8000694:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr +=sizeof(uint8_t);
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
			hspi->TxXferCount--;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	3b01      	subs	r3, #1
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	865a      	strh	r2, [r3, #50]	; 0x32
		}
		while(hspi->TxXferCount> 0)
 80006ae:	e031      	b.n	8000714 <spi_transmit+0x214>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d013      	beq.n	80006e6 <spi_transmit+0x1e6>
			{
				*((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	330c      	adds	r3, #12
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr +=sizeof(uint8_t);
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	62da      	str	r2, [r3, #44]	; 0x2c
				hspi->TxXferCount--;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80006da:	b29b      	uxth	r3, r3
 80006dc:	3b01      	subs	r3, #1
 80006de:	b29a      	uxth	r2, r3
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	865a      	strh	r2, [r3, #50]	; 0x32
 80006e4:	e016      	b.n	8000714 <spi_transmit+0x214>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80006e6:	f000 f9a1 	bl	8000a2c <get_tick>
 80006ea:	4602      	mov	r2, r0
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d803      	bhi.n	80006fe <spi_transmit+0x1fe>
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006fc:	d102      	bne.n	8000704 <spi_transmit+0x204>
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d107      	bne.n	8000714 <spi_transmit+0x214>
		         {
					error_code = DEV_TIMEOUT;
 8000704:	2303      	movs	r3, #3
 8000706:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2201      	movs	r2, #1
 800070c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					return error_code;
 8000710:	7dfb      	ldrb	r3, [r7, #23]
 8000712:	e00f      	b.n	8000734 <spi_transmit+0x234>
		while(hspi->TxXferCount> 0)
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000718:	b29b      	uxth	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1c8      	bne.n	80006b0 <spi_transmit+0x1b0>
		}

	}


	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <spi_transmit+0x22a>
	{
		error_code = DEV_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	2201      	movs	r2, #1
 800072e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	return error_code;
 8000732:	7dfb      	ldrb	r3, [r7, #23]

}
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <spi_receive>:

StatusTypeDef spi_receive(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4613      	mov	r3, r2
 800074a:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 800074c:	2300      	movs	r3, #0
 800074e:	75fb      	strb	r3, [r7, #23]


	tickstart = get_tick();
 8000750:	f000 f96c 	bl	8000a2c <get_tick>
 8000754:	6138      	str	r0, [r7, #16]

	if(hspi->State != SPI_STATE_READY)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800075c:	2b01      	cmp	r3, #1
 800075e:	d007      	beq.n	8000770 <spi_receive+0x34>
	{
		error_code = DEV_BUSY;
 8000760:	2302      	movs	r3, #2
 8000762:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2201      	movs	r2, #1
 8000768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return error_code;
 800076c:	7dfb      	ldrb	r3, [r7, #23]
 800076e:	e0b6      	b.n	80008de <spi_receive+0x1a2>
	}

	if((p_data == NULL) || (size  == 0))
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d002      	beq.n	800077c <spi_receive+0x40>
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d107      	bne.n	800078c <spi_receive+0x50>
	{
		error_code =  DEV_ERROR;
 800077c:	2301      	movs	r3, #1
 800077e:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2201      	movs	r2, #1
 8000784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return error_code;
 8000788:	7dfb      	ldrb	r3, [r7, #23]
 800078a:	e0a8      	b.n	80008de <spi_receive+0x1a2>
	}

	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_RX;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2204      	movs	r2, #4
 8000790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2200      	movs	r2, #0
 8000798:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->pRxBuffPtr = (uint8_t *)p_data;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	68ba      	ldr	r2, [r7, #8]
 800079e:	635a      	str	r2, [r3, #52]	; 0x34
	hspi->RxXferSize =  size;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	88fa      	ldrh	r2, [r7, #6]
 80007a4:	871a      	strh	r2, [r3, #56]	; 0x38
	hspi->RxXferCount=  size;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	88fa      	ldrh	r2, [r7, #6]
 80007aa:	875a      	strh	r2, [r3, #58]	; 0x3a


	hspi->pTxBuffPtr = (uint8_t *)NULL;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	2200      	movs	r2, #0
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi->TxXferSize =  0;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	2200      	movs	r2, #0
 80007b6:	861a      	strh	r2, [r3, #48]	; 0x30
	hspi->TxXferCount=  0;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2200      	movs	r2, #0
 80007bc:	865a      	strh	r2, [r3, #50]	; 0x32

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c8:	2b40      	cmp	r3, #64	; 0x40
 80007ca:	d007      	beq.n	80007dc <spi_receive+0xa0>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007da:	601a      	str	r2, [r3, #0]
	}

	/*Receive data in 8bit mode*/
	if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d16c      	bne.n	80008be <spi_receive+0x182>
	{
		while(hspi->RxXferCount > 0)
 80007e4:	e033      	b.n	800084e <spi_receive+0x112>
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d015      	beq.n	8000820 <spi_receive+0xe4>
			{
				*((uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f103 020c 	add.w	r2, r3, #12
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	635a      	str	r2, [r3, #52]	; 0x34
				hspi->RxXferCount--;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000814:	b29b      	uxth	r3, r3
 8000816:	3b01      	subs	r3, #1
 8000818:	b29a      	uxth	r2, r3
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	875a      	strh	r2, [r3, #58]	; 0x3a
 800081e:	e016      	b.n	800084e <spi_receive+0x112>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000820:	f000 f904 	bl	8000a2c <get_tick>
 8000824:	4602      	mov	r2, r0
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	429a      	cmp	r2, r3
 800082e:	d803      	bhi.n	8000838 <spi_receive+0xfc>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000836:	d102      	bne.n	800083e <spi_receive+0x102>
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d107      	bne.n	800084e <spi_receive+0x112>
		         {
					error_code = DEV_TIMEOUT;
 800083e:	2303      	movs	r3, #3
 8000840:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	2201      	movs	r2, #1
 8000846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					return error_code;
 800084a:	7dfb      	ldrb	r3, [r7, #23]
 800084c:	e047      	b.n	80008de <spi_receive+0x1a2>
		while(hspi->RxXferCount > 0)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000852:	b29b      	uxth	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1c6      	bne.n	80007e6 <spi_receive+0xaa>
 8000858:	e036      	b.n	80008c8 <spi_receive+0x18c>
	}
	else
	{
		while(hspi->RxXferCount > 0)
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	2b00      	cmp	r3, #0
 8000866:	d013      	beq.n	8000890 <spi_receive+0x154>
			{
				*((uint16_t *)hspi->pRxBuffPtr) = ( uint16_t)hspi->Instance->DR;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	68da      	ldr	r2, [r3, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000872:	b292      	uxth	r2, r2
 8000874:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800087a:	1c9a      	adds	r2, r3, #2
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
				hspi->RxXferCount--;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000884:	b29b      	uxth	r3, r3
 8000886:	3b01      	subs	r3, #1
 8000888:	b29a      	uxth	r2, r3
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	875a      	strh	r2, [r3, #58]	; 0x3a
 800088e:	e016      	b.n	80008be <spi_receive+0x182>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000890:	f000 f8cc 	bl	8000a2c <get_tick>
 8000894:	4602      	mov	r2, r0
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	429a      	cmp	r2, r3
 800089e:	d803      	bhi.n	80008a8 <spi_receive+0x16c>
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a6:	d102      	bne.n	80008ae <spi_receive+0x172>
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d107      	bne.n	80008be <spi_receive+0x182>
		         {
					error_code = DEV_TIMEOUT;
 80008ae:	2303      	movs	r3, #3
 80008b0:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2201      	movs	r2, #1
 80008b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					return error_code;
 80008ba:	7dfb      	ldrb	r3, [r7, #23]
 80008bc:	e00f      	b.n	80008de <spi_receive+0x1a2>
		while(hspi->RxXferCount > 0)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1c8      	bne.n	800085a <spi_receive+0x11e>
		           }
			}
		}
	}
	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <spi_receive+0x198>
	{
		error_code = DEV_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2201      	movs	r2, #1
 80008d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	return error_code;
 80008dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b086      	sub	sp, #24
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	e00a      	b.n	800090e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008f8:	f3af 8000 	nop.w
 80008fc:	4601      	mov	r1, r0
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	60ba      	str	r2, [r7, #8]
 8000904:	b2ca      	uxtb	r2, r1
 8000906:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3301      	adds	r3, #1
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	429a      	cmp	r2, r3
 8000914:	dbf0      	blt.n	80008f8 <_read+0x12>
	}

return len;
 8000916:	687b      	ldr	r3, [r7, #4]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	e009      	b.n	8000946 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	60ba      	str	r2, [r7, #8]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f8c4 	bl	8000ac8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	3301      	adds	r3, #1
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	429a      	cmp	r2, r3
 800094c:	dbf1      	blt.n	8000932 <_write+0x12>
	}
	return len;
 800094e:	687b      	ldr	r3, [r7, #4]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <_close>:

int _close(int file)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	return -1;
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000964:	4618      	mov	r0, r3
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000980:	605a      	str	r2, [r3, #4]
	return 0;
 8000982:	2300      	movs	r3, #0
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_isatty>:

int _isatty(int file)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	return 1;
 8000998:	2301      	movs	r3, #1
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b085      	sub	sp, #20
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
	return 0;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c8:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <_sbrk+0x5c>)
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <_sbrk+0x60>)
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <_sbrk+0x64>)
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <_sbrk+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d207      	bcs.n	8000a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f0:	f000 fa74 	bl	8000edc <__errno>
 80009f4:	4603      	mov	r3, r0
 80009f6:	220c      	movs	r2, #12
 80009f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	e009      	b.n	8000a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <_sbrk+0x64>)
 8000a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20020000 	.word	0x20020000
 8000a20:	00000400 	.word	0x00000400
 8000a24:	20000080 	.word	0x20000080
 8000a28:	20000108 	.word	0x20000108

08000a2c <get_tick>:
    while((get_tick() - tickstart) < wait){}

}

uint32_t get_tick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <get_tick+0x24>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <get_tick+0x28>)
 8000a3a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a3c:	b662      	cpsie	i
}
 8000a3e:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <get_tick+0x28>)
 8000a42:	681b      	ldr	r3, [r3, #0]

}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	200000b0 	.word	0x200000b0
 8000a54:	200000ac 	.word	0x200000ac

08000a58 <tick_increment>:
static void tick_increment(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <tick_increment+0x18>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <tick_increment+0x18>)
 8000a64:	6013      	str	r3, [r2, #0]
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	200000b0 	.word	0x200000b0

08000a74 <timebase_init>:
void timebase_init(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per millisecond*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <timebase_init+0x44>)
 8000a7e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000a82:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <timebase_init+0x44>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <timebase_init+0x44>)
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <timebase_init+0x44>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <timebase_init+0x44>)
 8000a96:	f043 0302 	orr.w	r3, r3, #2
 8000a9a:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <timebase_init+0x44>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <timebase_init+0x44>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000aa8:	b662      	cpsie	i
}
 8000aaa:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000e010 	.word	0xe000e010

08000abc <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	tick_increment();
 8000ac0:	f7ff ffca 	bl	8000a58 <tick_increment>
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 f84f 	bl	8000b74 <uart_write>
	return ch;
 8000ad6:	687b      	ldr	r3, [r7, #4]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <debug_uart_init>:

void debug_uart_init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <debug_uart_init+0x84>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <debug_uart_init+0x84>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <debug_uart_init+0x88>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <debug_uart_init+0x88>)
 8000af6:	f023 0310 	bic.w	r3, r3, #16
 8000afa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <debug_uart_init+0x88>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <debug_uart_init+0x88>)
 8000b02:	f043 0320 	orr.w	r3, r3, #32
 8000b06:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <debug_uart_init+0x88>)
 8000b0a:	6a1b      	ldr	r3, [r3, #32]
 8000b0c:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <debug_uart_init+0x88>)
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b12:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <debug_uart_init+0x88>)
 8000b16:	6a1b      	ldr	r3, [r3, #32]
 8000b18:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <debug_uart_init+0x88>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <debug_uart_init+0x88>)
 8000b22:	6a1b      	ldr	r3, [r3, #32]
 8000b24:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <debug_uart_init+0x88>)
 8000b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <debug_uart_init+0x88>)
 8000b2e:	6a1b      	ldr	r3, [r3, #32]
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <debug_uart_init+0x88>)
 8000b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b36:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <debug_uart_init+0x84>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <debug_uart_init+0x84>)
 8000b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8000b44:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <debug_uart_init+0x8c>)
 8000b4a:	f000 f83f 	bl	8000bcc <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <debug_uart_init+0x90>)
 8000b50:	2208      	movs	r2, #8
 8000b52:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <debug_uart_init+0x90>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <debug_uart_init+0x90>)
 8000b5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	00f42400 	.word	0x00f42400
 8000b70:	40004400 	.word	0x40004400

08000b74 <uart_write>:



static void uart_write(int ch)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000b7c:	bf00      	nop
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <uart_write+0x2c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0f9      	beq.n	8000b7e <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <uart_write+0x2c>)
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	6053      	str	r3, [r2, #4]
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	085a      	lsrs	r2, r3, #1
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	441a      	add	r2, r3
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbc:	b29b      	uxth	r3, r3
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000bd6:	6839      	ldr	r1, [r7, #0]
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ffe3 	bl	8000ba4 <compute_uart_bd>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <uart_set_baudrate+0x24>)
 8000be4:	609a      	str	r2, [r3, #8]
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40004400 	.word	0x40004400

08000bf4 <w25qxx_spi_init>:


static W25QXX_Status_t w25qxx_write_enable(W25QXX_t *w25qxx);

 void w25qxx_spi_init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <w25qxx_spi_init+0x50>)
 8000bfa:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <w25qxx_spi_init+0x54>)
 8000bfc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <w25qxx_spi_init+0x50>)
 8000c00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c04:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <w25qxx_spi_init+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <w25qxx_spi_init+0x50>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <w25qxx_spi_init+0x50>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <w25qxx_spi_init+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS =  SPI_NSS_SOFT;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <w25qxx_spi_init+0x50>)
 8000c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c24:	619a      	str	r2, [r3, #24]
	hspi1.Init.BuadRatePrescaler =   SPI_BAUDRATEPRESCALER_2;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <w25qxx_spi_init+0x50>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <w25qxx_spi_init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <w25qxx_spi_init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28


	/*Initialize spi*/
	spi_init(&hspi1);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <w25qxx_spi_init+0x50>)
 8000c3a:	f7ff fbf9 	bl	8000430 <spi_init>


}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000b4 	.word	0x200000b4
 8000c48:	40013000 	.word	0x40013000

08000c4c <w25qxx_cs_pin_init>:

 /*CS :PA4*/
 void w25qxx_cs_pin_init(void)
 {
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

	 /*Enable clock access to GPIOA*/
	 RCC->AHB1ENR |=GPIOAEN;
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <w25qxx_cs_pin_init+0x34>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <w25qxx_cs_pin_init+0x34>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6313      	str	r3, [r2, #48]	; 0x30

	 /*Set PA4 as output pin*/
	 GPIOA->MODER |=(1U<<8);
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <w25qxx_cs_pin_init+0x38>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <w25qxx_cs_pin_init+0x38>)
 8000c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c66:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER &=~(1U<<9);
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <w25qxx_cs_pin_init+0x38>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <w25qxx_cs_pin_init+0x38>)
 8000c6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c72:	6013      	str	r3, [r2, #0]
 }
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000

08000c88 <w25qxx_cs_on>:


 /*Enable CS pin by driving it low*/
 static void w25qxx_cs_on(void)
 {
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
	 GPIOA->ODR  &=~CS_PIN;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <w25qxx_cs_on+0x1c>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <w25qxx_cs_on+0x1c>)
 8000c92:	f023 0310 	bic.w	r3, r3, #16
 8000c96:	6153      	str	r3, [r2, #20]
 }
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <w25qxx_cs_off>:
 /*Disable CS pin by driving high*/

 static void w25qxx_cs_off(void)
 {
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
	 GPIOA->ODR  |=CS_PIN;
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <w25qxx_cs_off+0x1c>)
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <w25qxx_cs_off+0x1c>)
 8000cb2:	f043 0310 	orr.w	r3, r3, #16
 8000cb6:	6153      	str	r3, [r2, #20]
 }
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <w25qxx_transmit>:


 /*Transmit*/
 W25QXX_Status_t w25qxx_transmit(W25QXX_t *w25qxx, uint8_t * buf, uint32_t len)
 {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	 W25QXX_Status_t ret =  W25QXX_DEV_ERR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	75fb      	strb	r3, [r7, #23]

	 if(spi_transmit(w25qxx->w25qxx_spi_handle_t, buf,len, MAX_DELAY) == DEV_OK)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6998      	ldr	r0, [r3, #24]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	f7ff fc0b 	bl	8000500 <spi_transmit>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <w25qxx_transmit+0x2c>
	 {
		 ret = W25QXX_DEV_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	75fb      	strb	r3, [r7, #23]
	 }

	 return ret;
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
 }
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <w25qxx_receive>:

 /*Receive*/
 W25QXX_Status_t w25qxx_receive(W25QXX_t *w25qxx, uint8_t * buf, uint32_t len)
 {
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
	 W25QXX_Status_t ret =  W25QXX_DEV_ERR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	75fb      	strb	r3, [r7, #23]

	 if(spi_receive(w25qxx->w25qxx_spi_handle_t, buf,len, MAX_DELAY) == DEV_OK)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6998      	ldr	r0, [r3, #24]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	68b9      	ldr	r1, [r7, #8]
 8000d1c:	f7ff fd0e 	bl	800073c <spi_receive>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <w25qxx_receive+0x2c>
	 {
		 ret = W25QXX_DEV_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	75fb      	strb	r3, [r7, #23]
	 }
	 return ret;
 8000d2a:	7dfb      	ldrb	r3, [r7, #23]
 }
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <w25qxx_read_id>:


 uint32_t w25qxx_read_id(W25QXX_t *w25qxx)
 {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	 uint32_t ret = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]

	 uint8_t temp_buff[3];

	 /*Enable CS pin*/
	 w25qxx_cs_on();
 8000d40:	f7ff ffa2 	bl	8000c88 <w25qxx_cs_on>

	 /*Place command in temp buffer*/
	 temp_buff[0] = W25QXX_JEDEC_ID;
 8000d44:	239f      	movs	r3, #159	; 0x9f
 8000d46:	723b      	strb	r3, [r7, #8]

	 if(w25qxx_transmit(w25qxx, temp_buff, 1) == W25QXX_DEV_OK)
 8000d48:	f107 0308 	add.w	r3, r7, #8
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4619      	mov	r1, r3
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ffb9 	bl	8000cc8 <w25qxx_transmit>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d111      	bne.n	8000d80 <w25qxx_read_id+0x4c>
	 {
		 if(w25qxx_receive(w25qxx,temp_buff,3) == W25QXX_DEV_OK)
 8000d5c:	f107 0308 	add.w	r3, r7, #8
 8000d60:	2203      	movs	r2, #3
 8000d62:	4619      	mov	r1, r3
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ffca 	bl	8000cfe <w25qxx_receive>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d107      	bne.n	8000d80 <w25qxx_read_id+0x4c>
		 {
			 /*Store received data in return value*/
			 ret  =  ((temp_buff[0] << 16) | (temp_buff[1] << 8) |(temp_buff[2]));
 8000d70:	7a3b      	ldrb	r3, [r7, #8]
 8000d72:	041a      	lsls	r2, r3, #16
 8000d74:	7a7b      	ldrb	r3, [r7, #9]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	7aba      	ldrb	r2, [r7, #10]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]
		 }
	 }

	 /*Disable CS pin*/
	 w25qxx_cs_off();
 8000d80:	f7ff ff92 	bl	8000ca8 <w25qxx_cs_off>

	 return ret;
 8000d84:	68fb      	ldr	r3, [r7, #12]

 }
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <w25qxx_init>:

 W25QXX_Status_t w25qxx_init(W25QXX_t *w25qxx,SPI_HandleTypeDef *hspi)
 {
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
	 uint32_t id;

	 W25QXX_Status_t ret =  W25QXX_DEV_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
	 w25qxx->w25qxx_spi_handle_t =  hspi;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	619a      	str	r2, [r3, #24]

	 /*Disable CS pin*/
	 w25qxx_cs_off();
 8000da2:	f7ff ff81 	bl	8000ca8 <w25qxx_cs_off>

	 /*Get id*/
	 id  = w25qxx_read_id(w25qxx);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffc4 	bl	8000d34 <w25qxx_read_id>
 8000dac:	60b8      	str	r0, [r7, #8]

	 if(id)
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d01b      	beq.n	8000dec <w25qxx_init+0x5e>
	 {
		 w25qxx->w25qxx_manuf_id  =  (uint8_t)(id >> 16);
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	0c1b      	lsrs	r3, r3, #16
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	701a      	strb	r2, [r3, #0]
		 w25qxx->w25qxx_dev_id    =  (uint16_t) (id & 0xFFFF);
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	805a      	strh	r2, [r3, #2]
		 w25qxx->w25qxx_blk_sz    =  0x10000;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dcc:	605a      	str	r2, [r3, #4]
		 w25qxx->w25qxx_sect_sz   =  0x1000;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd4:	60da      	str	r2, [r3, #12]
		 w25qxx->w25qxx_sect_in_blk = 0x10;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2210      	movs	r2, #16
 8000dda:	611a      	str	r2, [r3, #16]
		 w25qxx->w25qxx_pg_sz       = 0x100;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de2:	615a      	str	r2, [r3, #20]
		 w25qxx->w25qxx_blk_cnt    =  0x40;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2240      	movs	r2, #64	; 0x40
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	e001      	b.n	8000df0 <w25qxx_init+0x62>
	 }

	 else
	 {
		 ret = W25QXX_DEV_ERR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
	 }

	 return ret;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 }
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <w25qxx_get_mem_info>:

	    return W25QXX_DEV_OK;
 }

 void w25qxx_get_mem_info(W25QXX_t w25qxx)
 {
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	f107 0c08 	add.w	ip, r7, #8
 8000e06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		printf("TOTAL SIZE(in KB)  = 0x%04lx (%lu)\n\r", (w25qxx.w25qxx_blk_cnt * w25qxx.w25qxx_blk_sz)\
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	fb02 f303 	mul.w	r3, r2, r3
 8000e12:	0a99      	lsrs	r1, r3, #10
									    / 1024, (w25qxx.w25qxx_blk_cnt * w25qxx.w25qxx_blk_sz) / 1024);
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	fb02 f303 	mul.w	r3, r2, r3
		printf("TOTAL SIZE(in KB)  = 0x%04lx (%lu)\n\r", (w25qxx.w25qxx_blk_cnt * w25qxx.w25qxx_blk_sz)\
 8000e1c:	0a9b      	lsrs	r3, r3, #10
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4813      	ldr	r0, [pc, #76]	; (8000e70 <w25qxx_get_mem_info+0x74>)
 8000e22:	f000 f88d 	bl	8000f40 <iprintf>

		printf("BLOCK SIZE         = 0x%04lx (%lu)\n\r", w25qxx.w25qxx_blk_sz, w25qxx.w25qxx_blk_sz);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4811      	ldr	r0, [pc, #68]	; (8000e74 <w25qxx_get_mem_info+0x78>)
 8000e2e:	f000 f887 	bl	8000f40 <iprintf>
		printf("BLOCK COUNT        = 0x%04lx (%lu)\n\r", w25qxx.w25qxx_blk_cnt, w25qxx.w25qxx_blk_cnt);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4619      	mov	r1, r3
 8000e38:	480f      	ldr	r0, [pc, #60]	; (8000e78 <w25qxx_get_mem_info+0x7c>)
 8000e3a:	f000 f881 	bl	8000f40 <iprintf>
		printf("SECTOR SIZE        = 0x%04lx (%lu)\n\r", w25qxx.w25qxx_sect_sz, w25qxx.w25qxx_sect_sz);
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	4619      	mov	r1, r3
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <w25qxx_get_mem_info+0x80>)
 8000e46:	f000 f87b 	bl	8000f40 <iprintf>
		printf("SECTORS PER BLOCK  = 0x%04lx (%lu)\n\r", w25qxx.w25qxx_sect_in_blk, w25qxx.w25qxx_sect_in_blk);
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480b      	ldr	r0, [pc, #44]	; (8000e80 <w25qxx_get_mem_info+0x84>)
 8000e52:	f000 f875 	bl	8000f40 <iprintf>
		printf("PAGE SIZE          = 0x%04lx (%lu)\n\r", w25qxx.w25qxx_pg_sz, w25qxx.w25qxx_pg_sz);
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	69fa      	ldr	r2, [r7, #28]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <w25qxx_get_mem_info+0x88>)
 8000e5e:	f000 f86f 	bl	8000f40 <iprintf>
 }
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e6a:	b004      	add	sp, #16
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	08001e04 	.word	0x08001e04
 8000e74:	08001e2c 	.word	0x08001e2c
 8000e78:	08001e54 	.word	0x08001e54
 8000e7c:	08001e7c 	.word	0x08001e7c
 8000e80:	08001ea4 	.word	0x08001ea4
 8000e84:	08001ecc 	.word	0x08001ecc

08000e88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e8a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e8c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	; (8000ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <LoopForever+0xe>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	; (8000ed4 <LoopForever+0x16>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eb6:	f000 f817 	bl	8000ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eba:	f7ff fa0b 	bl	80002d4 <main>

08000ebe <LoopForever>:

LoopForever:
    b LoopForever
 8000ebe:	e7fe      	b.n	8000ebe <LoopForever>
  ldr   r0, =_estack
 8000ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ecc:	08001f94 	.word	0x08001f94
  ldr r2, =_sbss
 8000ed0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000ed4:	20000108 	.word	0x20000108

08000ed8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC_IRQHandler>
	...

08000edc <__errno>:
 8000edc:	4b01      	ldr	r3, [pc, #4]	; (8000ee4 <__errno+0x8>)
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000000 	.word	0x20000000

08000ee8 <__libc_init_array>:
 8000ee8:	b570      	push	{r4, r5, r6, lr}
 8000eea:	4d0d      	ldr	r5, [pc, #52]	; (8000f20 <__libc_init_array+0x38>)
 8000eec:	4c0d      	ldr	r4, [pc, #52]	; (8000f24 <__libc_init_array+0x3c>)
 8000eee:	1b64      	subs	r4, r4, r5
 8000ef0:	10a4      	asrs	r4, r4, #2
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	42a6      	cmp	r6, r4
 8000ef6:	d109      	bne.n	8000f0c <__libc_init_array+0x24>
 8000ef8:	4d0b      	ldr	r5, [pc, #44]	; (8000f28 <__libc_init_array+0x40>)
 8000efa:	4c0c      	ldr	r4, [pc, #48]	; (8000f2c <__libc_init_array+0x44>)
 8000efc:	f000 ff76 	bl	8001dec <_init>
 8000f00:	1b64      	subs	r4, r4, r5
 8000f02:	10a4      	asrs	r4, r4, #2
 8000f04:	2600      	movs	r6, #0
 8000f06:	42a6      	cmp	r6, r4
 8000f08:	d105      	bne.n	8000f16 <__libc_init_array+0x2e>
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f10:	4798      	blx	r3
 8000f12:	3601      	adds	r6, #1
 8000f14:	e7ee      	b.n	8000ef4 <__libc_init_array+0xc>
 8000f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f1a:	4798      	blx	r3
 8000f1c:	3601      	adds	r6, #1
 8000f1e:	e7f2      	b.n	8000f06 <__libc_init_array+0x1e>
 8000f20:	08001f8c 	.word	0x08001f8c
 8000f24:	08001f8c 	.word	0x08001f8c
 8000f28:	08001f8c 	.word	0x08001f8c
 8000f2c:	08001f90 	.word	0x08001f90

08000f30 <memset>:
 8000f30:	4402      	add	r2, r0
 8000f32:	4603      	mov	r3, r0
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d100      	bne.n	8000f3a <memset+0xa>
 8000f38:	4770      	bx	lr
 8000f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8000f3e:	e7f9      	b.n	8000f34 <memset+0x4>

08000f40 <iprintf>:
 8000f40:	b40f      	push	{r0, r1, r2, r3}
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <iprintf+0x2c>)
 8000f44:	b513      	push	{r0, r1, r4, lr}
 8000f46:	681c      	ldr	r4, [r3, #0]
 8000f48:	b124      	cbz	r4, 8000f54 <iprintf+0x14>
 8000f4a:	69a3      	ldr	r3, [r4, #24]
 8000f4c:	b913      	cbnz	r3, 8000f54 <iprintf+0x14>
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f000 f866 	bl	8001020 <__sinit>
 8000f54:	ab05      	add	r3, sp, #20
 8000f56:	9a04      	ldr	r2, [sp, #16]
 8000f58:	68a1      	ldr	r1, [r4, #8]
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	f000 f983 	bl	8001268 <_vfiprintf_r>
 8000f62:	b002      	add	sp, #8
 8000f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f68:	b004      	add	sp, #16
 8000f6a:	4770      	bx	lr
 8000f6c:	20000000 	.word	0x20000000

08000f70 <std>:
 8000f70:	2300      	movs	r3, #0
 8000f72:	b510      	push	{r4, lr}
 8000f74:	4604      	mov	r4, r0
 8000f76:	e9c0 3300 	strd	r3, r3, [r0]
 8000f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000f7e:	6083      	str	r3, [r0, #8]
 8000f80:	8181      	strh	r1, [r0, #12]
 8000f82:	6643      	str	r3, [r0, #100]	; 0x64
 8000f84:	81c2      	strh	r2, [r0, #14]
 8000f86:	6183      	str	r3, [r0, #24]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	305c      	adds	r0, #92	; 0x5c
 8000f8e:	f7ff ffcf 	bl	8000f30 <memset>
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <std+0x38>)
 8000f94:	6263      	str	r3, [r4, #36]	; 0x24
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <std+0x3c>)
 8000f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <std+0x40>)
 8000f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <std+0x44>)
 8000fa0:	6224      	str	r4, [r4, #32]
 8000fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8000fa4:	bd10      	pop	{r4, pc}
 8000fa6:	bf00      	nop
 8000fa8:	08001811 	.word	0x08001811
 8000fac:	08001833 	.word	0x08001833
 8000fb0:	0800186b 	.word	0x0800186b
 8000fb4:	0800188f 	.word	0x0800188f

08000fb8 <_cleanup_r>:
 8000fb8:	4901      	ldr	r1, [pc, #4]	; (8000fc0 <_cleanup_r+0x8>)
 8000fba:	f000 b8af 	b.w	800111c <_fwalk_reent>
 8000fbe:	bf00      	nop
 8000fc0:	08001b69 	.word	0x08001b69

08000fc4 <__sfmoreglue>:
 8000fc4:	b570      	push	{r4, r5, r6, lr}
 8000fc6:	1e4a      	subs	r2, r1, #1
 8000fc8:	2568      	movs	r5, #104	; 0x68
 8000fca:	4355      	muls	r5, r2
 8000fcc:	460e      	mov	r6, r1
 8000fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000fd2:	f000 f8c5 	bl	8001160 <_malloc_r>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	b140      	cbz	r0, 8000fec <__sfmoreglue+0x28>
 8000fda:	2100      	movs	r1, #0
 8000fdc:	e9c0 1600 	strd	r1, r6, [r0]
 8000fe0:	300c      	adds	r0, #12
 8000fe2:	60a0      	str	r0, [r4, #8]
 8000fe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000fe8:	f7ff ffa2 	bl	8000f30 <memset>
 8000fec:	4620      	mov	r0, r4
 8000fee:	bd70      	pop	{r4, r5, r6, pc}

08000ff0 <__sfp_lock_acquire>:
 8000ff0:	4801      	ldr	r0, [pc, #4]	; (8000ff8 <__sfp_lock_acquire+0x8>)
 8000ff2:	f000 b8b3 	b.w	800115c <__retarget_lock_acquire_recursive>
 8000ff6:	bf00      	nop
 8000ff8:	20000100 	.word	0x20000100

08000ffc <__sfp_lock_release>:
 8000ffc:	4801      	ldr	r0, [pc, #4]	; (8001004 <__sfp_lock_release+0x8>)
 8000ffe:	f000 b8ae 	b.w	800115e <__retarget_lock_release_recursive>
 8001002:	bf00      	nop
 8001004:	20000100 	.word	0x20000100

08001008 <__sinit_lock_acquire>:
 8001008:	4801      	ldr	r0, [pc, #4]	; (8001010 <__sinit_lock_acquire+0x8>)
 800100a:	f000 b8a7 	b.w	800115c <__retarget_lock_acquire_recursive>
 800100e:	bf00      	nop
 8001010:	200000fb 	.word	0x200000fb

08001014 <__sinit_lock_release>:
 8001014:	4801      	ldr	r0, [pc, #4]	; (800101c <__sinit_lock_release+0x8>)
 8001016:	f000 b8a2 	b.w	800115e <__retarget_lock_release_recursive>
 800101a:	bf00      	nop
 800101c:	200000fb 	.word	0x200000fb

08001020 <__sinit>:
 8001020:	b510      	push	{r4, lr}
 8001022:	4604      	mov	r4, r0
 8001024:	f7ff fff0 	bl	8001008 <__sinit_lock_acquire>
 8001028:	69a3      	ldr	r3, [r4, #24]
 800102a:	b11b      	cbz	r3, 8001034 <__sinit+0x14>
 800102c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001030:	f7ff bff0 	b.w	8001014 <__sinit_lock_release>
 8001034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001038:	6523      	str	r3, [r4, #80]	; 0x50
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <__sinit+0x68>)
 800103c:	4a13      	ldr	r2, [pc, #76]	; (800108c <__sinit+0x6c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	62a2      	str	r2, [r4, #40]	; 0x28
 8001042:	42a3      	cmp	r3, r4
 8001044:	bf04      	itt	eq
 8001046:	2301      	moveq	r3, #1
 8001048:	61a3      	streq	r3, [r4, #24]
 800104a:	4620      	mov	r0, r4
 800104c:	f000 f820 	bl	8001090 <__sfp>
 8001050:	6060      	str	r0, [r4, #4]
 8001052:	4620      	mov	r0, r4
 8001054:	f000 f81c 	bl	8001090 <__sfp>
 8001058:	60a0      	str	r0, [r4, #8]
 800105a:	4620      	mov	r0, r4
 800105c:	f000 f818 	bl	8001090 <__sfp>
 8001060:	2200      	movs	r2, #0
 8001062:	60e0      	str	r0, [r4, #12]
 8001064:	2104      	movs	r1, #4
 8001066:	6860      	ldr	r0, [r4, #4]
 8001068:	f7ff ff82 	bl	8000f70 <std>
 800106c:	68a0      	ldr	r0, [r4, #8]
 800106e:	2201      	movs	r2, #1
 8001070:	2109      	movs	r1, #9
 8001072:	f7ff ff7d 	bl	8000f70 <std>
 8001076:	68e0      	ldr	r0, [r4, #12]
 8001078:	2202      	movs	r2, #2
 800107a:	2112      	movs	r1, #18
 800107c:	f7ff ff78 	bl	8000f70 <std>
 8001080:	2301      	movs	r3, #1
 8001082:	61a3      	str	r3, [r4, #24]
 8001084:	e7d2      	b.n	800102c <__sinit+0xc>
 8001086:	bf00      	nop
 8001088:	08001ef4 	.word	0x08001ef4
 800108c:	08000fb9 	.word	0x08000fb9

08001090 <__sfp>:
 8001090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001092:	4607      	mov	r7, r0
 8001094:	f7ff ffac 	bl	8000ff0 <__sfp_lock_acquire>
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <__sfp+0x84>)
 800109a:	681e      	ldr	r6, [r3, #0]
 800109c:	69b3      	ldr	r3, [r6, #24]
 800109e:	b913      	cbnz	r3, 80010a6 <__sfp+0x16>
 80010a0:	4630      	mov	r0, r6
 80010a2:	f7ff ffbd 	bl	8001020 <__sinit>
 80010a6:	3648      	adds	r6, #72	; 0x48
 80010a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	d503      	bpl.n	80010b8 <__sfp+0x28>
 80010b0:	6833      	ldr	r3, [r6, #0]
 80010b2:	b30b      	cbz	r3, 80010f8 <__sfp+0x68>
 80010b4:	6836      	ldr	r6, [r6, #0]
 80010b6:	e7f7      	b.n	80010a8 <__sfp+0x18>
 80010b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80010bc:	b9d5      	cbnz	r5, 80010f4 <__sfp+0x64>
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <__sfp+0x88>)
 80010c0:	60e3      	str	r3, [r4, #12]
 80010c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80010c6:	6665      	str	r5, [r4, #100]	; 0x64
 80010c8:	f000 f847 	bl	800115a <__retarget_lock_init_recursive>
 80010cc:	f7ff ff96 	bl	8000ffc <__sfp_lock_release>
 80010d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80010d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80010d8:	6025      	str	r5, [r4, #0]
 80010da:	61a5      	str	r5, [r4, #24]
 80010dc:	2208      	movs	r2, #8
 80010de:	4629      	mov	r1, r5
 80010e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80010e4:	f7ff ff24 	bl	8000f30 <memset>
 80010e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80010ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80010f0:	4620      	mov	r0, r4
 80010f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010f4:	3468      	adds	r4, #104	; 0x68
 80010f6:	e7d9      	b.n	80010ac <__sfp+0x1c>
 80010f8:	2104      	movs	r1, #4
 80010fa:	4638      	mov	r0, r7
 80010fc:	f7ff ff62 	bl	8000fc4 <__sfmoreglue>
 8001100:	4604      	mov	r4, r0
 8001102:	6030      	str	r0, [r6, #0]
 8001104:	2800      	cmp	r0, #0
 8001106:	d1d5      	bne.n	80010b4 <__sfp+0x24>
 8001108:	f7ff ff78 	bl	8000ffc <__sfp_lock_release>
 800110c:	230c      	movs	r3, #12
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	e7ee      	b.n	80010f0 <__sfp+0x60>
 8001112:	bf00      	nop
 8001114:	08001ef4 	.word	0x08001ef4
 8001118:	ffff0001 	.word	0xffff0001

0800111c <_fwalk_reent>:
 800111c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001120:	4606      	mov	r6, r0
 8001122:	4688      	mov	r8, r1
 8001124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001128:	2700      	movs	r7, #0
 800112a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800112e:	f1b9 0901 	subs.w	r9, r9, #1
 8001132:	d505      	bpl.n	8001140 <_fwalk_reent+0x24>
 8001134:	6824      	ldr	r4, [r4, #0]
 8001136:	2c00      	cmp	r4, #0
 8001138:	d1f7      	bne.n	800112a <_fwalk_reent+0xe>
 800113a:	4638      	mov	r0, r7
 800113c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001140:	89ab      	ldrh	r3, [r5, #12]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d907      	bls.n	8001156 <_fwalk_reent+0x3a>
 8001146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800114a:	3301      	adds	r3, #1
 800114c:	d003      	beq.n	8001156 <_fwalk_reent+0x3a>
 800114e:	4629      	mov	r1, r5
 8001150:	4630      	mov	r0, r6
 8001152:	47c0      	blx	r8
 8001154:	4307      	orrs	r7, r0
 8001156:	3568      	adds	r5, #104	; 0x68
 8001158:	e7e9      	b.n	800112e <_fwalk_reent+0x12>

0800115a <__retarget_lock_init_recursive>:
 800115a:	4770      	bx	lr

0800115c <__retarget_lock_acquire_recursive>:
 800115c:	4770      	bx	lr

0800115e <__retarget_lock_release_recursive>:
 800115e:	4770      	bx	lr

08001160 <_malloc_r>:
 8001160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001162:	1ccd      	adds	r5, r1, #3
 8001164:	f025 0503 	bic.w	r5, r5, #3
 8001168:	3508      	adds	r5, #8
 800116a:	2d0c      	cmp	r5, #12
 800116c:	bf38      	it	cc
 800116e:	250c      	movcc	r5, #12
 8001170:	2d00      	cmp	r5, #0
 8001172:	4606      	mov	r6, r0
 8001174:	db01      	blt.n	800117a <_malloc_r+0x1a>
 8001176:	42a9      	cmp	r1, r5
 8001178:	d903      	bls.n	8001182 <_malloc_r+0x22>
 800117a:	230c      	movs	r3, #12
 800117c:	6033      	str	r3, [r6, #0]
 800117e:	2000      	movs	r0, #0
 8001180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001182:	f000 fda3 	bl	8001ccc <__malloc_lock>
 8001186:	4921      	ldr	r1, [pc, #132]	; (800120c <_malloc_r+0xac>)
 8001188:	680a      	ldr	r2, [r1, #0]
 800118a:	4614      	mov	r4, r2
 800118c:	b99c      	cbnz	r4, 80011b6 <_malloc_r+0x56>
 800118e:	4f20      	ldr	r7, [pc, #128]	; (8001210 <_malloc_r+0xb0>)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b923      	cbnz	r3, 800119e <_malloc_r+0x3e>
 8001194:	4621      	mov	r1, r4
 8001196:	4630      	mov	r0, r6
 8001198:	f000 fb2a 	bl	80017f0 <_sbrk_r>
 800119c:	6038      	str	r0, [r7, #0]
 800119e:	4629      	mov	r1, r5
 80011a0:	4630      	mov	r0, r6
 80011a2:	f000 fb25 	bl	80017f0 <_sbrk_r>
 80011a6:	1c43      	adds	r3, r0, #1
 80011a8:	d123      	bne.n	80011f2 <_malloc_r+0x92>
 80011aa:	230c      	movs	r3, #12
 80011ac:	6033      	str	r3, [r6, #0]
 80011ae:	4630      	mov	r0, r6
 80011b0:	f000 fd92 	bl	8001cd8 <__malloc_unlock>
 80011b4:	e7e3      	b.n	800117e <_malloc_r+0x1e>
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	1b5b      	subs	r3, r3, r5
 80011ba:	d417      	bmi.n	80011ec <_malloc_r+0x8c>
 80011bc:	2b0b      	cmp	r3, #11
 80011be:	d903      	bls.n	80011c8 <_malloc_r+0x68>
 80011c0:	6023      	str	r3, [r4, #0]
 80011c2:	441c      	add	r4, r3
 80011c4:	6025      	str	r5, [r4, #0]
 80011c6:	e004      	b.n	80011d2 <_malloc_r+0x72>
 80011c8:	6863      	ldr	r3, [r4, #4]
 80011ca:	42a2      	cmp	r2, r4
 80011cc:	bf0c      	ite	eq
 80011ce:	600b      	streq	r3, [r1, #0]
 80011d0:	6053      	strne	r3, [r2, #4]
 80011d2:	4630      	mov	r0, r6
 80011d4:	f000 fd80 	bl	8001cd8 <__malloc_unlock>
 80011d8:	f104 000b 	add.w	r0, r4, #11
 80011dc:	1d23      	adds	r3, r4, #4
 80011de:	f020 0007 	bic.w	r0, r0, #7
 80011e2:	1ac2      	subs	r2, r0, r3
 80011e4:	d0cc      	beq.n	8001180 <_malloc_r+0x20>
 80011e6:	1a1b      	subs	r3, r3, r0
 80011e8:	50a3      	str	r3, [r4, r2]
 80011ea:	e7c9      	b.n	8001180 <_malloc_r+0x20>
 80011ec:	4622      	mov	r2, r4
 80011ee:	6864      	ldr	r4, [r4, #4]
 80011f0:	e7cc      	b.n	800118c <_malloc_r+0x2c>
 80011f2:	1cc4      	adds	r4, r0, #3
 80011f4:	f024 0403 	bic.w	r4, r4, #3
 80011f8:	42a0      	cmp	r0, r4
 80011fa:	d0e3      	beq.n	80011c4 <_malloc_r+0x64>
 80011fc:	1a21      	subs	r1, r4, r0
 80011fe:	4630      	mov	r0, r6
 8001200:	f000 faf6 	bl	80017f0 <_sbrk_r>
 8001204:	3001      	adds	r0, #1
 8001206:	d1dd      	bne.n	80011c4 <_malloc_r+0x64>
 8001208:	e7cf      	b.n	80011aa <_malloc_r+0x4a>
 800120a:	bf00      	nop
 800120c:	20000084 	.word	0x20000084
 8001210:	20000088 	.word	0x20000088

08001214 <__sfputc_r>:
 8001214:	6893      	ldr	r3, [r2, #8]
 8001216:	3b01      	subs	r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	b410      	push	{r4}
 800121c:	6093      	str	r3, [r2, #8]
 800121e:	da08      	bge.n	8001232 <__sfputc_r+0x1e>
 8001220:	6994      	ldr	r4, [r2, #24]
 8001222:	42a3      	cmp	r3, r4
 8001224:	db01      	blt.n	800122a <__sfputc_r+0x16>
 8001226:	290a      	cmp	r1, #10
 8001228:	d103      	bne.n	8001232 <__sfputc_r+0x1e>
 800122a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800122e:	f000 bb33 	b.w	8001898 <__swbuf_r>
 8001232:	6813      	ldr	r3, [r2, #0]
 8001234:	1c58      	adds	r0, r3, #1
 8001236:	6010      	str	r0, [r2, #0]
 8001238:	7019      	strb	r1, [r3, #0]
 800123a:	4608      	mov	r0, r1
 800123c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001240:	4770      	bx	lr

08001242 <__sfputs_r>:
 8001242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001244:	4606      	mov	r6, r0
 8001246:	460f      	mov	r7, r1
 8001248:	4614      	mov	r4, r2
 800124a:	18d5      	adds	r5, r2, r3
 800124c:	42ac      	cmp	r4, r5
 800124e:	d101      	bne.n	8001254 <__sfputs_r+0x12>
 8001250:	2000      	movs	r0, #0
 8001252:	e007      	b.n	8001264 <__sfputs_r+0x22>
 8001254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001258:	463a      	mov	r2, r7
 800125a:	4630      	mov	r0, r6
 800125c:	f7ff ffda 	bl	8001214 <__sfputc_r>
 8001260:	1c43      	adds	r3, r0, #1
 8001262:	d1f3      	bne.n	800124c <__sfputs_r+0xa>
 8001264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001268 <_vfiprintf_r>:
 8001268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800126c:	460d      	mov	r5, r1
 800126e:	b09d      	sub	sp, #116	; 0x74
 8001270:	4614      	mov	r4, r2
 8001272:	4698      	mov	r8, r3
 8001274:	4606      	mov	r6, r0
 8001276:	b118      	cbz	r0, 8001280 <_vfiprintf_r+0x18>
 8001278:	6983      	ldr	r3, [r0, #24]
 800127a:	b90b      	cbnz	r3, 8001280 <_vfiprintf_r+0x18>
 800127c:	f7ff fed0 	bl	8001020 <__sinit>
 8001280:	4b89      	ldr	r3, [pc, #548]	; (80014a8 <_vfiprintf_r+0x240>)
 8001282:	429d      	cmp	r5, r3
 8001284:	d11b      	bne.n	80012be <_vfiprintf_r+0x56>
 8001286:	6875      	ldr	r5, [r6, #4]
 8001288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800128a:	07d9      	lsls	r1, r3, #31
 800128c:	d405      	bmi.n	800129a <_vfiprintf_r+0x32>
 800128e:	89ab      	ldrh	r3, [r5, #12]
 8001290:	059a      	lsls	r2, r3, #22
 8001292:	d402      	bmi.n	800129a <_vfiprintf_r+0x32>
 8001294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001296:	f7ff ff61 	bl	800115c <__retarget_lock_acquire_recursive>
 800129a:	89ab      	ldrh	r3, [r5, #12]
 800129c:	071b      	lsls	r3, r3, #28
 800129e:	d501      	bpl.n	80012a4 <_vfiprintf_r+0x3c>
 80012a0:	692b      	ldr	r3, [r5, #16]
 80012a2:	b9eb      	cbnz	r3, 80012e0 <_vfiprintf_r+0x78>
 80012a4:	4629      	mov	r1, r5
 80012a6:	4630      	mov	r0, r6
 80012a8:	f000 fb5a 	bl	8001960 <__swsetup_r>
 80012ac:	b1c0      	cbz	r0, 80012e0 <_vfiprintf_r+0x78>
 80012ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012b0:	07dc      	lsls	r4, r3, #31
 80012b2:	d50e      	bpl.n	80012d2 <_vfiprintf_r+0x6a>
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	b01d      	add	sp, #116	; 0x74
 80012ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012be:	4b7b      	ldr	r3, [pc, #492]	; (80014ac <_vfiprintf_r+0x244>)
 80012c0:	429d      	cmp	r5, r3
 80012c2:	d101      	bne.n	80012c8 <_vfiprintf_r+0x60>
 80012c4:	68b5      	ldr	r5, [r6, #8]
 80012c6:	e7df      	b.n	8001288 <_vfiprintf_r+0x20>
 80012c8:	4b79      	ldr	r3, [pc, #484]	; (80014b0 <_vfiprintf_r+0x248>)
 80012ca:	429d      	cmp	r5, r3
 80012cc:	bf08      	it	eq
 80012ce:	68f5      	ldreq	r5, [r6, #12]
 80012d0:	e7da      	b.n	8001288 <_vfiprintf_r+0x20>
 80012d2:	89ab      	ldrh	r3, [r5, #12]
 80012d4:	0598      	lsls	r0, r3, #22
 80012d6:	d4ed      	bmi.n	80012b4 <_vfiprintf_r+0x4c>
 80012d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012da:	f7ff ff40 	bl	800115e <__retarget_lock_release_recursive>
 80012de:	e7e9      	b.n	80012b4 <_vfiprintf_r+0x4c>
 80012e0:	2300      	movs	r3, #0
 80012e2:	9309      	str	r3, [sp, #36]	; 0x24
 80012e4:	2320      	movs	r3, #32
 80012e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80012ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80012ee:	2330      	movs	r3, #48	; 0x30
 80012f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80014b4 <_vfiprintf_r+0x24c>
 80012f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80012f8:	f04f 0901 	mov.w	r9, #1
 80012fc:	4623      	mov	r3, r4
 80012fe:	469a      	mov	sl, r3
 8001300:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001304:	b10a      	cbz	r2, 800130a <_vfiprintf_r+0xa2>
 8001306:	2a25      	cmp	r2, #37	; 0x25
 8001308:	d1f9      	bne.n	80012fe <_vfiprintf_r+0x96>
 800130a:	ebba 0b04 	subs.w	fp, sl, r4
 800130e:	d00b      	beq.n	8001328 <_vfiprintf_r+0xc0>
 8001310:	465b      	mov	r3, fp
 8001312:	4622      	mov	r2, r4
 8001314:	4629      	mov	r1, r5
 8001316:	4630      	mov	r0, r6
 8001318:	f7ff ff93 	bl	8001242 <__sfputs_r>
 800131c:	3001      	adds	r0, #1
 800131e:	f000 80aa 	beq.w	8001476 <_vfiprintf_r+0x20e>
 8001322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001324:	445a      	add	r2, fp
 8001326:	9209      	str	r2, [sp, #36]	; 0x24
 8001328:	f89a 3000 	ldrb.w	r3, [sl]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80a2 	beq.w	8001476 <_vfiprintf_r+0x20e>
 8001332:	2300      	movs	r3, #0
 8001334:	f04f 32ff 	mov.w	r2, #4294967295
 8001338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800133c:	f10a 0a01 	add.w	sl, sl, #1
 8001340:	9304      	str	r3, [sp, #16]
 8001342:	9307      	str	r3, [sp, #28]
 8001344:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001348:	931a      	str	r3, [sp, #104]	; 0x68
 800134a:	4654      	mov	r4, sl
 800134c:	2205      	movs	r2, #5
 800134e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001352:	4858      	ldr	r0, [pc, #352]	; (80014b4 <_vfiprintf_r+0x24c>)
 8001354:	f7fe ff44 	bl	80001e0 <memchr>
 8001358:	9a04      	ldr	r2, [sp, #16]
 800135a:	b9d8      	cbnz	r0, 8001394 <_vfiprintf_r+0x12c>
 800135c:	06d1      	lsls	r1, r2, #27
 800135e:	bf44      	itt	mi
 8001360:	2320      	movmi	r3, #32
 8001362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001366:	0713      	lsls	r3, r2, #28
 8001368:	bf44      	itt	mi
 800136a:	232b      	movmi	r3, #43	; 0x2b
 800136c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001370:	f89a 3000 	ldrb.w	r3, [sl]
 8001374:	2b2a      	cmp	r3, #42	; 0x2a
 8001376:	d015      	beq.n	80013a4 <_vfiprintf_r+0x13c>
 8001378:	9a07      	ldr	r2, [sp, #28]
 800137a:	4654      	mov	r4, sl
 800137c:	2000      	movs	r0, #0
 800137e:	f04f 0c0a 	mov.w	ip, #10
 8001382:	4621      	mov	r1, r4
 8001384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001388:	3b30      	subs	r3, #48	; 0x30
 800138a:	2b09      	cmp	r3, #9
 800138c:	d94e      	bls.n	800142c <_vfiprintf_r+0x1c4>
 800138e:	b1b0      	cbz	r0, 80013be <_vfiprintf_r+0x156>
 8001390:	9207      	str	r2, [sp, #28]
 8001392:	e014      	b.n	80013be <_vfiprintf_r+0x156>
 8001394:	eba0 0308 	sub.w	r3, r0, r8
 8001398:	fa09 f303 	lsl.w	r3, r9, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	9304      	str	r3, [sp, #16]
 80013a0:	46a2      	mov	sl, r4
 80013a2:	e7d2      	b.n	800134a <_vfiprintf_r+0xe2>
 80013a4:	9b03      	ldr	r3, [sp, #12]
 80013a6:	1d19      	adds	r1, r3, #4
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	9103      	str	r1, [sp, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bfbb      	ittet	lt
 80013b0:	425b      	neglt	r3, r3
 80013b2:	f042 0202 	orrlt.w	r2, r2, #2
 80013b6:	9307      	strge	r3, [sp, #28]
 80013b8:	9307      	strlt	r3, [sp, #28]
 80013ba:	bfb8      	it	lt
 80013bc:	9204      	strlt	r2, [sp, #16]
 80013be:	7823      	ldrb	r3, [r4, #0]
 80013c0:	2b2e      	cmp	r3, #46	; 0x2e
 80013c2:	d10c      	bne.n	80013de <_vfiprintf_r+0x176>
 80013c4:	7863      	ldrb	r3, [r4, #1]
 80013c6:	2b2a      	cmp	r3, #42	; 0x2a
 80013c8:	d135      	bne.n	8001436 <_vfiprintf_r+0x1ce>
 80013ca:	9b03      	ldr	r3, [sp, #12]
 80013cc:	1d1a      	adds	r2, r3, #4
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	9203      	str	r2, [sp, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	bfb8      	it	lt
 80013d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80013da:	3402      	adds	r4, #2
 80013dc:	9305      	str	r3, [sp, #20]
 80013de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80014c4 <_vfiprintf_r+0x25c>
 80013e2:	7821      	ldrb	r1, [r4, #0]
 80013e4:	2203      	movs	r2, #3
 80013e6:	4650      	mov	r0, sl
 80013e8:	f7fe fefa 	bl	80001e0 <memchr>
 80013ec:	b140      	cbz	r0, 8001400 <_vfiprintf_r+0x198>
 80013ee:	2340      	movs	r3, #64	; 0x40
 80013f0:	eba0 000a 	sub.w	r0, r0, sl
 80013f4:	fa03 f000 	lsl.w	r0, r3, r0
 80013f8:	9b04      	ldr	r3, [sp, #16]
 80013fa:	4303      	orrs	r3, r0
 80013fc:	3401      	adds	r4, #1
 80013fe:	9304      	str	r3, [sp, #16]
 8001400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001404:	482c      	ldr	r0, [pc, #176]	; (80014b8 <_vfiprintf_r+0x250>)
 8001406:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800140a:	2206      	movs	r2, #6
 800140c:	f7fe fee8 	bl	80001e0 <memchr>
 8001410:	2800      	cmp	r0, #0
 8001412:	d03f      	beq.n	8001494 <_vfiprintf_r+0x22c>
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <_vfiprintf_r+0x254>)
 8001416:	bb1b      	cbnz	r3, 8001460 <_vfiprintf_r+0x1f8>
 8001418:	9b03      	ldr	r3, [sp, #12]
 800141a:	3307      	adds	r3, #7
 800141c:	f023 0307 	bic.w	r3, r3, #7
 8001420:	3308      	adds	r3, #8
 8001422:	9303      	str	r3, [sp, #12]
 8001424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001426:	443b      	add	r3, r7
 8001428:	9309      	str	r3, [sp, #36]	; 0x24
 800142a:	e767      	b.n	80012fc <_vfiprintf_r+0x94>
 800142c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001430:	460c      	mov	r4, r1
 8001432:	2001      	movs	r0, #1
 8001434:	e7a5      	b.n	8001382 <_vfiprintf_r+0x11a>
 8001436:	2300      	movs	r3, #0
 8001438:	3401      	adds	r4, #1
 800143a:	9305      	str	r3, [sp, #20]
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 0c0a 	mov.w	ip, #10
 8001442:	4620      	mov	r0, r4
 8001444:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001448:	3a30      	subs	r2, #48	; 0x30
 800144a:	2a09      	cmp	r2, #9
 800144c:	d903      	bls.n	8001456 <_vfiprintf_r+0x1ee>
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0c5      	beq.n	80013de <_vfiprintf_r+0x176>
 8001452:	9105      	str	r1, [sp, #20]
 8001454:	e7c3      	b.n	80013de <_vfiprintf_r+0x176>
 8001456:	fb0c 2101 	mla	r1, ip, r1, r2
 800145a:	4604      	mov	r4, r0
 800145c:	2301      	movs	r3, #1
 800145e:	e7f0      	b.n	8001442 <_vfiprintf_r+0x1da>
 8001460:	ab03      	add	r3, sp, #12
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	462a      	mov	r2, r5
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <_vfiprintf_r+0x258>)
 8001468:	a904      	add	r1, sp, #16
 800146a:	4630      	mov	r0, r6
 800146c:	f3af 8000 	nop.w
 8001470:	4607      	mov	r7, r0
 8001472:	1c78      	adds	r0, r7, #1
 8001474:	d1d6      	bne.n	8001424 <_vfiprintf_r+0x1bc>
 8001476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001478:	07d9      	lsls	r1, r3, #31
 800147a:	d405      	bmi.n	8001488 <_vfiprintf_r+0x220>
 800147c:	89ab      	ldrh	r3, [r5, #12]
 800147e:	059a      	lsls	r2, r3, #22
 8001480:	d402      	bmi.n	8001488 <_vfiprintf_r+0x220>
 8001482:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001484:	f7ff fe6b 	bl	800115e <__retarget_lock_release_recursive>
 8001488:	89ab      	ldrh	r3, [r5, #12]
 800148a:	065b      	lsls	r3, r3, #25
 800148c:	f53f af12 	bmi.w	80012b4 <_vfiprintf_r+0x4c>
 8001490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001492:	e711      	b.n	80012b8 <_vfiprintf_r+0x50>
 8001494:	ab03      	add	r3, sp, #12
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	462a      	mov	r2, r5
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <_vfiprintf_r+0x258>)
 800149c:	a904      	add	r1, sp, #16
 800149e:	4630      	mov	r0, r6
 80014a0:	f000 f880 	bl	80015a4 <_printf_i>
 80014a4:	e7e4      	b.n	8001470 <_vfiprintf_r+0x208>
 80014a6:	bf00      	nop
 80014a8:	08001f18 	.word	0x08001f18
 80014ac:	08001f38 	.word	0x08001f38
 80014b0:	08001ef8 	.word	0x08001ef8
 80014b4:	08001f58 	.word	0x08001f58
 80014b8:	08001f62 	.word	0x08001f62
 80014bc:	00000000 	.word	0x00000000
 80014c0:	08001243 	.word	0x08001243
 80014c4:	08001f5e 	.word	0x08001f5e

080014c8 <_printf_common>:
 80014c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014cc:	4616      	mov	r6, r2
 80014ce:	4699      	mov	r9, r3
 80014d0:	688a      	ldr	r2, [r1, #8]
 80014d2:	690b      	ldr	r3, [r1, #16]
 80014d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80014d8:	4293      	cmp	r3, r2
 80014da:	bfb8      	it	lt
 80014dc:	4613      	movlt	r3, r2
 80014de:	6033      	str	r3, [r6, #0]
 80014e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80014e4:	4607      	mov	r7, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	b10a      	cbz	r2, 80014ee <_printf_common+0x26>
 80014ea:	3301      	adds	r3, #1
 80014ec:	6033      	str	r3, [r6, #0]
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	0699      	lsls	r1, r3, #26
 80014f2:	bf42      	ittt	mi
 80014f4:	6833      	ldrmi	r3, [r6, #0]
 80014f6:	3302      	addmi	r3, #2
 80014f8:	6033      	strmi	r3, [r6, #0]
 80014fa:	6825      	ldr	r5, [r4, #0]
 80014fc:	f015 0506 	ands.w	r5, r5, #6
 8001500:	d106      	bne.n	8001510 <_printf_common+0x48>
 8001502:	f104 0a19 	add.w	sl, r4, #25
 8001506:	68e3      	ldr	r3, [r4, #12]
 8001508:	6832      	ldr	r2, [r6, #0]
 800150a:	1a9b      	subs	r3, r3, r2
 800150c:	42ab      	cmp	r3, r5
 800150e:	dc26      	bgt.n	800155e <_printf_common+0x96>
 8001510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001514:	1e13      	subs	r3, r2, #0
 8001516:	6822      	ldr	r2, [r4, #0]
 8001518:	bf18      	it	ne
 800151a:	2301      	movne	r3, #1
 800151c:	0692      	lsls	r2, r2, #26
 800151e:	d42b      	bmi.n	8001578 <_printf_common+0xb0>
 8001520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001524:	4649      	mov	r1, r9
 8001526:	4638      	mov	r0, r7
 8001528:	47c0      	blx	r8
 800152a:	3001      	adds	r0, #1
 800152c:	d01e      	beq.n	800156c <_printf_common+0xa4>
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	68e5      	ldr	r5, [r4, #12]
 8001532:	6832      	ldr	r2, [r6, #0]
 8001534:	f003 0306 	and.w	r3, r3, #6
 8001538:	2b04      	cmp	r3, #4
 800153a:	bf08      	it	eq
 800153c:	1aad      	subeq	r5, r5, r2
 800153e:	68a3      	ldr	r3, [r4, #8]
 8001540:	6922      	ldr	r2, [r4, #16]
 8001542:	bf0c      	ite	eq
 8001544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001548:	2500      	movne	r5, #0
 800154a:	4293      	cmp	r3, r2
 800154c:	bfc4      	itt	gt
 800154e:	1a9b      	subgt	r3, r3, r2
 8001550:	18ed      	addgt	r5, r5, r3
 8001552:	2600      	movs	r6, #0
 8001554:	341a      	adds	r4, #26
 8001556:	42b5      	cmp	r5, r6
 8001558:	d11a      	bne.n	8001590 <_printf_common+0xc8>
 800155a:	2000      	movs	r0, #0
 800155c:	e008      	b.n	8001570 <_printf_common+0xa8>
 800155e:	2301      	movs	r3, #1
 8001560:	4652      	mov	r2, sl
 8001562:	4649      	mov	r1, r9
 8001564:	4638      	mov	r0, r7
 8001566:	47c0      	blx	r8
 8001568:	3001      	adds	r0, #1
 800156a:	d103      	bne.n	8001574 <_printf_common+0xac>
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001574:	3501      	adds	r5, #1
 8001576:	e7c6      	b.n	8001506 <_printf_common+0x3e>
 8001578:	18e1      	adds	r1, r4, r3
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	2030      	movs	r0, #48	; 0x30
 800157e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001582:	4422      	add	r2, r4
 8001584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800158c:	3302      	adds	r3, #2
 800158e:	e7c7      	b.n	8001520 <_printf_common+0x58>
 8001590:	2301      	movs	r3, #1
 8001592:	4622      	mov	r2, r4
 8001594:	4649      	mov	r1, r9
 8001596:	4638      	mov	r0, r7
 8001598:	47c0      	blx	r8
 800159a:	3001      	adds	r0, #1
 800159c:	d0e6      	beq.n	800156c <_printf_common+0xa4>
 800159e:	3601      	adds	r6, #1
 80015a0:	e7d9      	b.n	8001556 <_printf_common+0x8e>
	...

080015a4 <_printf_i>:
 80015a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80015a8:	460c      	mov	r4, r1
 80015aa:	4691      	mov	r9, r2
 80015ac:	7e27      	ldrb	r7, [r4, #24]
 80015ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80015b0:	2f78      	cmp	r7, #120	; 0x78
 80015b2:	4680      	mov	r8, r0
 80015b4:	469a      	mov	sl, r3
 80015b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015ba:	d807      	bhi.n	80015cc <_printf_i+0x28>
 80015bc:	2f62      	cmp	r7, #98	; 0x62
 80015be:	d80a      	bhi.n	80015d6 <_printf_i+0x32>
 80015c0:	2f00      	cmp	r7, #0
 80015c2:	f000 80d8 	beq.w	8001776 <_printf_i+0x1d2>
 80015c6:	2f58      	cmp	r7, #88	; 0x58
 80015c8:	f000 80a3 	beq.w	8001712 <_printf_i+0x16e>
 80015cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80015d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80015d4:	e03a      	b.n	800164c <_printf_i+0xa8>
 80015d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80015da:	2b15      	cmp	r3, #21
 80015dc:	d8f6      	bhi.n	80015cc <_printf_i+0x28>
 80015de:	a001      	add	r0, pc, #4	; (adr r0, 80015e4 <_printf_i+0x40>)
 80015e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80015e4:	0800163d 	.word	0x0800163d
 80015e8:	08001651 	.word	0x08001651
 80015ec:	080015cd 	.word	0x080015cd
 80015f0:	080015cd 	.word	0x080015cd
 80015f4:	080015cd 	.word	0x080015cd
 80015f8:	080015cd 	.word	0x080015cd
 80015fc:	08001651 	.word	0x08001651
 8001600:	080015cd 	.word	0x080015cd
 8001604:	080015cd 	.word	0x080015cd
 8001608:	080015cd 	.word	0x080015cd
 800160c:	080015cd 	.word	0x080015cd
 8001610:	0800175d 	.word	0x0800175d
 8001614:	08001681 	.word	0x08001681
 8001618:	0800173f 	.word	0x0800173f
 800161c:	080015cd 	.word	0x080015cd
 8001620:	080015cd 	.word	0x080015cd
 8001624:	0800177f 	.word	0x0800177f
 8001628:	080015cd 	.word	0x080015cd
 800162c:	08001681 	.word	0x08001681
 8001630:	080015cd 	.word	0x080015cd
 8001634:	080015cd 	.word	0x080015cd
 8001638:	08001747 	.word	0x08001747
 800163c:	680b      	ldr	r3, [r1, #0]
 800163e:	1d1a      	adds	r2, r3, #4
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	600a      	str	r2, [r1, #0]
 8001644:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800164c:	2301      	movs	r3, #1
 800164e:	e0a3      	b.n	8001798 <_printf_i+0x1f4>
 8001650:	6825      	ldr	r5, [r4, #0]
 8001652:	6808      	ldr	r0, [r1, #0]
 8001654:	062e      	lsls	r6, r5, #24
 8001656:	f100 0304 	add.w	r3, r0, #4
 800165a:	d50a      	bpl.n	8001672 <_printf_i+0xce>
 800165c:	6805      	ldr	r5, [r0, #0]
 800165e:	600b      	str	r3, [r1, #0]
 8001660:	2d00      	cmp	r5, #0
 8001662:	da03      	bge.n	800166c <_printf_i+0xc8>
 8001664:	232d      	movs	r3, #45	; 0x2d
 8001666:	426d      	negs	r5, r5
 8001668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800166c:	485e      	ldr	r0, [pc, #376]	; (80017e8 <_printf_i+0x244>)
 800166e:	230a      	movs	r3, #10
 8001670:	e019      	b.n	80016a6 <_printf_i+0x102>
 8001672:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001676:	6805      	ldr	r5, [r0, #0]
 8001678:	600b      	str	r3, [r1, #0]
 800167a:	bf18      	it	ne
 800167c:	b22d      	sxthne	r5, r5
 800167e:	e7ef      	b.n	8001660 <_printf_i+0xbc>
 8001680:	680b      	ldr	r3, [r1, #0]
 8001682:	6825      	ldr	r5, [r4, #0]
 8001684:	1d18      	adds	r0, r3, #4
 8001686:	6008      	str	r0, [r1, #0]
 8001688:	0628      	lsls	r0, r5, #24
 800168a:	d501      	bpl.n	8001690 <_printf_i+0xec>
 800168c:	681d      	ldr	r5, [r3, #0]
 800168e:	e002      	b.n	8001696 <_printf_i+0xf2>
 8001690:	0669      	lsls	r1, r5, #25
 8001692:	d5fb      	bpl.n	800168c <_printf_i+0xe8>
 8001694:	881d      	ldrh	r5, [r3, #0]
 8001696:	4854      	ldr	r0, [pc, #336]	; (80017e8 <_printf_i+0x244>)
 8001698:	2f6f      	cmp	r7, #111	; 0x6f
 800169a:	bf0c      	ite	eq
 800169c:	2308      	moveq	r3, #8
 800169e:	230a      	movne	r3, #10
 80016a0:	2100      	movs	r1, #0
 80016a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80016a6:	6866      	ldr	r6, [r4, #4]
 80016a8:	60a6      	str	r6, [r4, #8]
 80016aa:	2e00      	cmp	r6, #0
 80016ac:	bfa2      	ittt	ge
 80016ae:	6821      	ldrge	r1, [r4, #0]
 80016b0:	f021 0104 	bicge.w	r1, r1, #4
 80016b4:	6021      	strge	r1, [r4, #0]
 80016b6:	b90d      	cbnz	r5, 80016bc <_printf_i+0x118>
 80016b8:	2e00      	cmp	r6, #0
 80016ba:	d04d      	beq.n	8001758 <_printf_i+0x1b4>
 80016bc:	4616      	mov	r6, r2
 80016be:	fbb5 f1f3 	udiv	r1, r5, r3
 80016c2:	fb03 5711 	mls	r7, r3, r1, r5
 80016c6:	5dc7      	ldrb	r7, [r0, r7]
 80016c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80016cc:	462f      	mov	r7, r5
 80016ce:	42bb      	cmp	r3, r7
 80016d0:	460d      	mov	r5, r1
 80016d2:	d9f4      	bls.n	80016be <_printf_i+0x11a>
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d10b      	bne.n	80016f0 <_printf_i+0x14c>
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	07df      	lsls	r7, r3, #31
 80016dc:	d508      	bpl.n	80016f0 <_printf_i+0x14c>
 80016de:	6923      	ldr	r3, [r4, #16]
 80016e0:	6861      	ldr	r1, [r4, #4]
 80016e2:	4299      	cmp	r1, r3
 80016e4:	bfde      	ittt	le
 80016e6:	2330      	movle	r3, #48	; 0x30
 80016e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80016ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80016f0:	1b92      	subs	r2, r2, r6
 80016f2:	6122      	str	r2, [r4, #16]
 80016f4:	f8cd a000 	str.w	sl, [sp]
 80016f8:	464b      	mov	r3, r9
 80016fa:	aa03      	add	r2, sp, #12
 80016fc:	4621      	mov	r1, r4
 80016fe:	4640      	mov	r0, r8
 8001700:	f7ff fee2 	bl	80014c8 <_printf_common>
 8001704:	3001      	adds	r0, #1
 8001706:	d14c      	bne.n	80017a2 <_printf_i+0x1fe>
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	b004      	add	sp, #16
 800170e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001712:	4835      	ldr	r0, [pc, #212]	; (80017e8 <_printf_i+0x244>)
 8001714:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	680e      	ldr	r6, [r1, #0]
 800171c:	061f      	lsls	r7, r3, #24
 800171e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001722:	600e      	str	r6, [r1, #0]
 8001724:	d514      	bpl.n	8001750 <_printf_i+0x1ac>
 8001726:	07d9      	lsls	r1, r3, #31
 8001728:	bf44      	itt	mi
 800172a:	f043 0320 	orrmi.w	r3, r3, #32
 800172e:	6023      	strmi	r3, [r4, #0]
 8001730:	b91d      	cbnz	r5, 800173a <_printf_i+0x196>
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	f023 0320 	bic.w	r3, r3, #32
 8001738:	6023      	str	r3, [r4, #0]
 800173a:	2310      	movs	r3, #16
 800173c:	e7b0      	b.n	80016a0 <_printf_i+0xfc>
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	f043 0320 	orr.w	r3, r3, #32
 8001744:	6023      	str	r3, [r4, #0]
 8001746:	2378      	movs	r3, #120	; 0x78
 8001748:	4828      	ldr	r0, [pc, #160]	; (80017ec <_printf_i+0x248>)
 800174a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800174e:	e7e3      	b.n	8001718 <_printf_i+0x174>
 8001750:	065e      	lsls	r6, r3, #25
 8001752:	bf48      	it	mi
 8001754:	b2ad      	uxthmi	r5, r5
 8001756:	e7e6      	b.n	8001726 <_printf_i+0x182>
 8001758:	4616      	mov	r6, r2
 800175a:	e7bb      	b.n	80016d4 <_printf_i+0x130>
 800175c:	680b      	ldr	r3, [r1, #0]
 800175e:	6826      	ldr	r6, [r4, #0]
 8001760:	6960      	ldr	r0, [r4, #20]
 8001762:	1d1d      	adds	r5, r3, #4
 8001764:	600d      	str	r5, [r1, #0]
 8001766:	0635      	lsls	r5, r6, #24
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	d501      	bpl.n	8001770 <_printf_i+0x1cc>
 800176c:	6018      	str	r0, [r3, #0]
 800176e:	e002      	b.n	8001776 <_printf_i+0x1d2>
 8001770:	0671      	lsls	r1, r6, #25
 8001772:	d5fb      	bpl.n	800176c <_printf_i+0x1c8>
 8001774:	8018      	strh	r0, [r3, #0]
 8001776:	2300      	movs	r3, #0
 8001778:	6123      	str	r3, [r4, #16]
 800177a:	4616      	mov	r6, r2
 800177c:	e7ba      	b.n	80016f4 <_printf_i+0x150>
 800177e:	680b      	ldr	r3, [r1, #0]
 8001780:	1d1a      	adds	r2, r3, #4
 8001782:	600a      	str	r2, [r1, #0]
 8001784:	681e      	ldr	r6, [r3, #0]
 8001786:	6862      	ldr	r2, [r4, #4]
 8001788:	2100      	movs	r1, #0
 800178a:	4630      	mov	r0, r6
 800178c:	f7fe fd28 	bl	80001e0 <memchr>
 8001790:	b108      	cbz	r0, 8001796 <_printf_i+0x1f2>
 8001792:	1b80      	subs	r0, r0, r6
 8001794:	6060      	str	r0, [r4, #4]
 8001796:	6863      	ldr	r3, [r4, #4]
 8001798:	6123      	str	r3, [r4, #16]
 800179a:	2300      	movs	r3, #0
 800179c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017a0:	e7a8      	b.n	80016f4 <_printf_i+0x150>
 80017a2:	6923      	ldr	r3, [r4, #16]
 80017a4:	4632      	mov	r2, r6
 80017a6:	4649      	mov	r1, r9
 80017a8:	4640      	mov	r0, r8
 80017aa:	47d0      	blx	sl
 80017ac:	3001      	adds	r0, #1
 80017ae:	d0ab      	beq.n	8001708 <_printf_i+0x164>
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	079b      	lsls	r3, r3, #30
 80017b4:	d413      	bmi.n	80017de <_printf_i+0x23a>
 80017b6:	68e0      	ldr	r0, [r4, #12]
 80017b8:	9b03      	ldr	r3, [sp, #12]
 80017ba:	4298      	cmp	r0, r3
 80017bc:	bfb8      	it	lt
 80017be:	4618      	movlt	r0, r3
 80017c0:	e7a4      	b.n	800170c <_printf_i+0x168>
 80017c2:	2301      	movs	r3, #1
 80017c4:	4632      	mov	r2, r6
 80017c6:	4649      	mov	r1, r9
 80017c8:	4640      	mov	r0, r8
 80017ca:	47d0      	blx	sl
 80017cc:	3001      	adds	r0, #1
 80017ce:	d09b      	beq.n	8001708 <_printf_i+0x164>
 80017d0:	3501      	adds	r5, #1
 80017d2:	68e3      	ldr	r3, [r4, #12]
 80017d4:	9903      	ldr	r1, [sp, #12]
 80017d6:	1a5b      	subs	r3, r3, r1
 80017d8:	42ab      	cmp	r3, r5
 80017da:	dcf2      	bgt.n	80017c2 <_printf_i+0x21e>
 80017dc:	e7eb      	b.n	80017b6 <_printf_i+0x212>
 80017de:	2500      	movs	r5, #0
 80017e0:	f104 0619 	add.w	r6, r4, #25
 80017e4:	e7f5      	b.n	80017d2 <_printf_i+0x22e>
 80017e6:	bf00      	nop
 80017e8:	08001f69 	.word	0x08001f69
 80017ec:	08001f7a 	.word	0x08001f7a

080017f0 <_sbrk_r>:
 80017f0:	b538      	push	{r3, r4, r5, lr}
 80017f2:	4d06      	ldr	r5, [pc, #24]	; (800180c <_sbrk_r+0x1c>)
 80017f4:	2300      	movs	r3, #0
 80017f6:	4604      	mov	r4, r0
 80017f8:	4608      	mov	r0, r1
 80017fa:	602b      	str	r3, [r5, #0]
 80017fc:	f7ff f8e0 	bl	80009c0 <_sbrk>
 8001800:	1c43      	adds	r3, r0, #1
 8001802:	d102      	bne.n	800180a <_sbrk_r+0x1a>
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	b103      	cbz	r3, 800180a <_sbrk_r+0x1a>
 8001808:	6023      	str	r3, [r4, #0]
 800180a:	bd38      	pop	{r3, r4, r5, pc}
 800180c:	20000104 	.word	0x20000104

08001810 <__sread>:
 8001810:	b510      	push	{r4, lr}
 8001812:	460c      	mov	r4, r1
 8001814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001818:	f000 fab4 	bl	8001d84 <_read_r>
 800181c:	2800      	cmp	r0, #0
 800181e:	bfab      	itete	ge
 8001820:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001822:	89a3      	ldrhlt	r3, [r4, #12]
 8001824:	181b      	addge	r3, r3, r0
 8001826:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800182a:	bfac      	ite	ge
 800182c:	6563      	strge	r3, [r4, #84]	; 0x54
 800182e:	81a3      	strhlt	r3, [r4, #12]
 8001830:	bd10      	pop	{r4, pc}

08001832 <__swrite>:
 8001832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001836:	461f      	mov	r7, r3
 8001838:	898b      	ldrh	r3, [r1, #12]
 800183a:	05db      	lsls	r3, r3, #23
 800183c:	4605      	mov	r5, r0
 800183e:	460c      	mov	r4, r1
 8001840:	4616      	mov	r6, r2
 8001842:	d505      	bpl.n	8001850 <__swrite+0x1e>
 8001844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001848:	2302      	movs	r3, #2
 800184a:	2200      	movs	r2, #0
 800184c:	f000 f9c8 	bl	8001be0 <_lseek_r>
 8001850:	89a3      	ldrh	r3, [r4, #12]
 8001852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800185a:	81a3      	strh	r3, [r4, #12]
 800185c:	4632      	mov	r2, r6
 800185e:	463b      	mov	r3, r7
 8001860:	4628      	mov	r0, r5
 8001862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001866:	f000 b869 	b.w	800193c <_write_r>

0800186a <__sseek>:
 800186a:	b510      	push	{r4, lr}
 800186c:	460c      	mov	r4, r1
 800186e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001872:	f000 f9b5 	bl	8001be0 <_lseek_r>
 8001876:	1c43      	adds	r3, r0, #1
 8001878:	89a3      	ldrh	r3, [r4, #12]
 800187a:	bf15      	itete	ne
 800187c:	6560      	strne	r0, [r4, #84]	; 0x54
 800187e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001882:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001886:	81a3      	strheq	r3, [r4, #12]
 8001888:	bf18      	it	ne
 800188a:	81a3      	strhne	r3, [r4, #12]
 800188c:	bd10      	pop	{r4, pc}

0800188e <__sclose>:
 800188e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001892:	f000 b8d3 	b.w	8001a3c <_close_r>
	...

08001898 <__swbuf_r>:
 8001898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189a:	460e      	mov	r6, r1
 800189c:	4614      	mov	r4, r2
 800189e:	4605      	mov	r5, r0
 80018a0:	b118      	cbz	r0, 80018aa <__swbuf_r+0x12>
 80018a2:	6983      	ldr	r3, [r0, #24]
 80018a4:	b90b      	cbnz	r3, 80018aa <__swbuf_r+0x12>
 80018a6:	f7ff fbbb 	bl	8001020 <__sinit>
 80018aa:	4b21      	ldr	r3, [pc, #132]	; (8001930 <__swbuf_r+0x98>)
 80018ac:	429c      	cmp	r4, r3
 80018ae:	d12b      	bne.n	8001908 <__swbuf_r+0x70>
 80018b0:	686c      	ldr	r4, [r5, #4]
 80018b2:	69a3      	ldr	r3, [r4, #24]
 80018b4:	60a3      	str	r3, [r4, #8]
 80018b6:	89a3      	ldrh	r3, [r4, #12]
 80018b8:	071a      	lsls	r2, r3, #28
 80018ba:	d52f      	bpl.n	800191c <__swbuf_r+0x84>
 80018bc:	6923      	ldr	r3, [r4, #16]
 80018be:	b36b      	cbz	r3, 800191c <__swbuf_r+0x84>
 80018c0:	6923      	ldr	r3, [r4, #16]
 80018c2:	6820      	ldr	r0, [r4, #0]
 80018c4:	1ac0      	subs	r0, r0, r3
 80018c6:	6963      	ldr	r3, [r4, #20]
 80018c8:	b2f6      	uxtb	r6, r6
 80018ca:	4283      	cmp	r3, r0
 80018cc:	4637      	mov	r7, r6
 80018ce:	dc04      	bgt.n	80018da <__swbuf_r+0x42>
 80018d0:	4621      	mov	r1, r4
 80018d2:	4628      	mov	r0, r5
 80018d4:	f000 f948 	bl	8001b68 <_fflush_r>
 80018d8:	bb30      	cbnz	r0, 8001928 <__swbuf_r+0x90>
 80018da:	68a3      	ldr	r3, [r4, #8]
 80018dc:	3b01      	subs	r3, #1
 80018de:	60a3      	str	r3, [r4, #8]
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	6022      	str	r2, [r4, #0]
 80018e6:	701e      	strb	r6, [r3, #0]
 80018e8:	6963      	ldr	r3, [r4, #20]
 80018ea:	3001      	adds	r0, #1
 80018ec:	4283      	cmp	r3, r0
 80018ee:	d004      	beq.n	80018fa <__swbuf_r+0x62>
 80018f0:	89a3      	ldrh	r3, [r4, #12]
 80018f2:	07db      	lsls	r3, r3, #31
 80018f4:	d506      	bpl.n	8001904 <__swbuf_r+0x6c>
 80018f6:	2e0a      	cmp	r6, #10
 80018f8:	d104      	bne.n	8001904 <__swbuf_r+0x6c>
 80018fa:	4621      	mov	r1, r4
 80018fc:	4628      	mov	r0, r5
 80018fe:	f000 f933 	bl	8001b68 <_fflush_r>
 8001902:	b988      	cbnz	r0, 8001928 <__swbuf_r+0x90>
 8001904:	4638      	mov	r0, r7
 8001906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <__swbuf_r+0x9c>)
 800190a:	429c      	cmp	r4, r3
 800190c:	d101      	bne.n	8001912 <__swbuf_r+0x7a>
 800190e:	68ac      	ldr	r4, [r5, #8]
 8001910:	e7cf      	b.n	80018b2 <__swbuf_r+0x1a>
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <__swbuf_r+0xa0>)
 8001914:	429c      	cmp	r4, r3
 8001916:	bf08      	it	eq
 8001918:	68ec      	ldreq	r4, [r5, #12]
 800191a:	e7ca      	b.n	80018b2 <__swbuf_r+0x1a>
 800191c:	4621      	mov	r1, r4
 800191e:	4628      	mov	r0, r5
 8001920:	f000 f81e 	bl	8001960 <__swsetup_r>
 8001924:	2800      	cmp	r0, #0
 8001926:	d0cb      	beq.n	80018c0 <__swbuf_r+0x28>
 8001928:	f04f 37ff 	mov.w	r7, #4294967295
 800192c:	e7ea      	b.n	8001904 <__swbuf_r+0x6c>
 800192e:	bf00      	nop
 8001930:	08001f18 	.word	0x08001f18
 8001934:	08001f38 	.word	0x08001f38
 8001938:	08001ef8 	.word	0x08001ef8

0800193c <_write_r>:
 800193c:	b538      	push	{r3, r4, r5, lr}
 800193e:	4d07      	ldr	r5, [pc, #28]	; (800195c <_write_r+0x20>)
 8001940:	4604      	mov	r4, r0
 8001942:	4608      	mov	r0, r1
 8001944:	4611      	mov	r1, r2
 8001946:	2200      	movs	r2, #0
 8001948:	602a      	str	r2, [r5, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	f7fe ffe8 	bl	8000920 <_write>
 8001950:	1c43      	adds	r3, r0, #1
 8001952:	d102      	bne.n	800195a <_write_r+0x1e>
 8001954:	682b      	ldr	r3, [r5, #0]
 8001956:	b103      	cbz	r3, 800195a <_write_r+0x1e>
 8001958:	6023      	str	r3, [r4, #0]
 800195a:	bd38      	pop	{r3, r4, r5, pc}
 800195c:	20000104 	.word	0x20000104

08001960 <__swsetup_r>:
 8001960:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <__swsetup_r+0xcc>)
 8001962:	b570      	push	{r4, r5, r6, lr}
 8001964:	681d      	ldr	r5, [r3, #0]
 8001966:	4606      	mov	r6, r0
 8001968:	460c      	mov	r4, r1
 800196a:	b125      	cbz	r5, 8001976 <__swsetup_r+0x16>
 800196c:	69ab      	ldr	r3, [r5, #24]
 800196e:	b913      	cbnz	r3, 8001976 <__swsetup_r+0x16>
 8001970:	4628      	mov	r0, r5
 8001972:	f7ff fb55 	bl	8001020 <__sinit>
 8001976:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <__swsetup_r+0xd0>)
 8001978:	429c      	cmp	r4, r3
 800197a:	d10f      	bne.n	800199c <__swsetup_r+0x3c>
 800197c:	686c      	ldr	r4, [r5, #4]
 800197e:	89a3      	ldrh	r3, [r4, #12]
 8001980:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001984:	0719      	lsls	r1, r3, #28
 8001986:	d42c      	bmi.n	80019e2 <__swsetup_r+0x82>
 8001988:	06dd      	lsls	r5, r3, #27
 800198a:	d411      	bmi.n	80019b0 <__swsetup_r+0x50>
 800198c:	2309      	movs	r3, #9
 800198e:	6033      	str	r3, [r6, #0]
 8001990:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001994:	81a3      	strh	r3, [r4, #12]
 8001996:	f04f 30ff 	mov.w	r0, #4294967295
 800199a:	e03e      	b.n	8001a1a <__swsetup_r+0xba>
 800199c:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <__swsetup_r+0xd4>)
 800199e:	429c      	cmp	r4, r3
 80019a0:	d101      	bne.n	80019a6 <__swsetup_r+0x46>
 80019a2:	68ac      	ldr	r4, [r5, #8]
 80019a4:	e7eb      	b.n	800197e <__swsetup_r+0x1e>
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <__swsetup_r+0xd8>)
 80019a8:	429c      	cmp	r4, r3
 80019aa:	bf08      	it	eq
 80019ac:	68ec      	ldreq	r4, [r5, #12]
 80019ae:	e7e6      	b.n	800197e <__swsetup_r+0x1e>
 80019b0:	0758      	lsls	r0, r3, #29
 80019b2:	d512      	bpl.n	80019da <__swsetup_r+0x7a>
 80019b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019b6:	b141      	cbz	r1, 80019ca <__swsetup_r+0x6a>
 80019b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019bc:	4299      	cmp	r1, r3
 80019be:	d002      	beq.n	80019c6 <__swsetup_r+0x66>
 80019c0:	4630      	mov	r0, r6
 80019c2:	f000 f98f 	bl	8001ce4 <_free_r>
 80019c6:	2300      	movs	r3, #0
 80019c8:	6363      	str	r3, [r4, #52]	; 0x34
 80019ca:	89a3      	ldrh	r3, [r4, #12]
 80019cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80019d0:	81a3      	strh	r3, [r4, #12]
 80019d2:	2300      	movs	r3, #0
 80019d4:	6063      	str	r3, [r4, #4]
 80019d6:	6923      	ldr	r3, [r4, #16]
 80019d8:	6023      	str	r3, [r4, #0]
 80019da:	89a3      	ldrh	r3, [r4, #12]
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	81a3      	strh	r3, [r4, #12]
 80019e2:	6923      	ldr	r3, [r4, #16]
 80019e4:	b94b      	cbnz	r3, 80019fa <__swsetup_r+0x9a>
 80019e6:	89a3      	ldrh	r3, [r4, #12]
 80019e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80019ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f0:	d003      	beq.n	80019fa <__swsetup_r+0x9a>
 80019f2:	4621      	mov	r1, r4
 80019f4:	4630      	mov	r0, r6
 80019f6:	f000 f929 	bl	8001c4c <__smakebuf_r>
 80019fa:	89a0      	ldrh	r0, [r4, #12]
 80019fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001a00:	f010 0301 	ands.w	r3, r0, #1
 8001a04:	d00a      	beq.n	8001a1c <__swsetup_r+0xbc>
 8001a06:	2300      	movs	r3, #0
 8001a08:	60a3      	str	r3, [r4, #8]
 8001a0a:	6963      	ldr	r3, [r4, #20]
 8001a0c:	425b      	negs	r3, r3
 8001a0e:	61a3      	str	r3, [r4, #24]
 8001a10:	6923      	ldr	r3, [r4, #16]
 8001a12:	b943      	cbnz	r3, 8001a26 <__swsetup_r+0xc6>
 8001a14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001a18:	d1ba      	bne.n	8001990 <__swsetup_r+0x30>
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
 8001a1c:	0781      	lsls	r1, r0, #30
 8001a1e:	bf58      	it	pl
 8001a20:	6963      	ldrpl	r3, [r4, #20]
 8001a22:	60a3      	str	r3, [r4, #8]
 8001a24:	e7f4      	b.n	8001a10 <__swsetup_r+0xb0>
 8001a26:	2000      	movs	r0, #0
 8001a28:	e7f7      	b.n	8001a1a <__swsetup_r+0xba>
 8001a2a:	bf00      	nop
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	08001f18 	.word	0x08001f18
 8001a34:	08001f38 	.word	0x08001f38
 8001a38:	08001ef8 	.word	0x08001ef8

08001a3c <_close_r>:
 8001a3c:	b538      	push	{r3, r4, r5, lr}
 8001a3e:	4d06      	ldr	r5, [pc, #24]	; (8001a58 <_close_r+0x1c>)
 8001a40:	2300      	movs	r3, #0
 8001a42:	4604      	mov	r4, r0
 8001a44:	4608      	mov	r0, r1
 8001a46:	602b      	str	r3, [r5, #0]
 8001a48:	f7fe ff86 	bl	8000958 <_close>
 8001a4c:	1c43      	adds	r3, r0, #1
 8001a4e:	d102      	bne.n	8001a56 <_close_r+0x1a>
 8001a50:	682b      	ldr	r3, [r5, #0]
 8001a52:	b103      	cbz	r3, 8001a56 <_close_r+0x1a>
 8001a54:	6023      	str	r3, [r4, #0]
 8001a56:	bd38      	pop	{r3, r4, r5, pc}
 8001a58:	20000104 	.word	0x20000104

08001a5c <__sflush_r>:
 8001a5c:	898a      	ldrh	r2, [r1, #12]
 8001a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a62:	4605      	mov	r5, r0
 8001a64:	0710      	lsls	r0, r2, #28
 8001a66:	460c      	mov	r4, r1
 8001a68:	d458      	bmi.n	8001b1c <__sflush_r+0xc0>
 8001a6a:	684b      	ldr	r3, [r1, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	dc05      	bgt.n	8001a7c <__sflush_r+0x20>
 8001a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	dc02      	bgt.n	8001a7c <__sflush_r+0x20>
 8001a76:	2000      	movs	r0, #0
 8001a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a7e:	2e00      	cmp	r6, #0
 8001a80:	d0f9      	beq.n	8001a76 <__sflush_r+0x1a>
 8001a82:	2300      	movs	r3, #0
 8001a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a88:	682f      	ldr	r7, [r5, #0]
 8001a8a:	602b      	str	r3, [r5, #0]
 8001a8c:	d032      	beq.n	8001af4 <__sflush_r+0x98>
 8001a8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a90:	89a3      	ldrh	r3, [r4, #12]
 8001a92:	075a      	lsls	r2, r3, #29
 8001a94:	d505      	bpl.n	8001aa2 <__sflush_r+0x46>
 8001a96:	6863      	ldr	r3, [r4, #4]
 8001a98:	1ac0      	subs	r0, r0, r3
 8001a9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a9c:	b10b      	cbz	r3, 8001aa2 <__sflush_r+0x46>
 8001a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aa0:	1ac0      	subs	r0, r0, r3
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001aa8:	6a21      	ldr	r1, [r4, #32]
 8001aaa:	4628      	mov	r0, r5
 8001aac:	47b0      	blx	r6
 8001aae:	1c43      	adds	r3, r0, #1
 8001ab0:	89a3      	ldrh	r3, [r4, #12]
 8001ab2:	d106      	bne.n	8001ac2 <__sflush_r+0x66>
 8001ab4:	6829      	ldr	r1, [r5, #0]
 8001ab6:	291d      	cmp	r1, #29
 8001ab8:	d82c      	bhi.n	8001b14 <__sflush_r+0xb8>
 8001aba:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <__sflush_r+0x108>)
 8001abc:	40ca      	lsrs	r2, r1
 8001abe:	07d6      	lsls	r6, r2, #31
 8001ac0:	d528      	bpl.n	8001b14 <__sflush_r+0xb8>
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	6062      	str	r2, [r4, #4]
 8001ac6:	04d9      	lsls	r1, r3, #19
 8001ac8:	6922      	ldr	r2, [r4, #16]
 8001aca:	6022      	str	r2, [r4, #0]
 8001acc:	d504      	bpl.n	8001ad8 <__sflush_r+0x7c>
 8001ace:	1c42      	adds	r2, r0, #1
 8001ad0:	d101      	bne.n	8001ad6 <__sflush_r+0x7a>
 8001ad2:	682b      	ldr	r3, [r5, #0]
 8001ad4:	b903      	cbnz	r3, 8001ad8 <__sflush_r+0x7c>
 8001ad6:	6560      	str	r0, [r4, #84]	; 0x54
 8001ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ada:	602f      	str	r7, [r5, #0]
 8001adc:	2900      	cmp	r1, #0
 8001ade:	d0ca      	beq.n	8001a76 <__sflush_r+0x1a>
 8001ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ae4:	4299      	cmp	r1, r3
 8001ae6:	d002      	beq.n	8001aee <__sflush_r+0x92>
 8001ae8:	4628      	mov	r0, r5
 8001aea:	f000 f8fb 	bl	8001ce4 <_free_r>
 8001aee:	2000      	movs	r0, #0
 8001af0:	6360      	str	r0, [r4, #52]	; 0x34
 8001af2:	e7c1      	b.n	8001a78 <__sflush_r+0x1c>
 8001af4:	6a21      	ldr	r1, [r4, #32]
 8001af6:	2301      	movs	r3, #1
 8001af8:	4628      	mov	r0, r5
 8001afa:	47b0      	blx	r6
 8001afc:	1c41      	adds	r1, r0, #1
 8001afe:	d1c7      	bne.n	8001a90 <__sflush_r+0x34>
 8001b00:	682b      	ldr	r3, [r5, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0c4      	beq.n	8001a90 <__sflush_r+0x34>
 8001b06:	2b1d      	cmp	r3, #29
 8001b08:	d001      	beq.n	8001b0e <__sflush_r+0xb2>
 8001b0a:	2b16      	cmp	r3, #22
 8001b0c:	d101      	bne.n	8001b12 <__sflush_r+0xb6>
 8001b0e:	602f      	str	r7, [r5, #0]
 8001b10:	e7b1      	b.n	8001a76 <__sflush_r+0x1a>
 8001b12:	89a3      	ldrh	r3, [r4, #12]
 8001b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b18:	81a3      	strh	r3, [r4, #12]
 8001b1a:	e7ad      	b.n	8001a78 <__sflush_r+0x1c>
 8001b1c:	690f      	ldr	r7, [r1, #16]
 8001b1e:	2f00      	cmp	r7, #0
 8001b20:	d0a9      	beq.n	8001a76 <__sflush_r+0x1a>
 8001b22:	0793      	lsls	r3, r2, #30
 8001b24:	680e      	ldr	r6, [r1, #0]
 8001b26:	bf08      	it	eq
 8001b28:	694b      	ldreq	r3, [r1, #20]
 8001b2a:	600f      	str	r7, [r1, #0]
 8001b2c:	bf18      	it	ne
 8001b2e:	2300      	movne	r3, #0
 8001b30:	eba6 0807 	sub.w	r8, r6, r7
 8001b34:	608b      	str	r3, [r1, #8]
 8001b36:	f1b8 0f00 	cmp.w	r8, #0
 8001b3a:	dd9c      	ble.n	8001a76 <__sflush_r+0x1a>
 8001b3c:	6a21      	ldr	r1, [r4, #32]
 8001b3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001b40:	4643      	mov	r3, r8
 8001b42:	463a      	mov	r2, r7
 8001b44:	4628      	mov	r0, r5
 8001b46:	47b0      	blx	r6
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	dc06      	bgt.n	8001b5a <__sflush_r+0xfe>
 8001b4c:	89a3      	ldrh	r3, [r4, #12]
 8001b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b52:	81a3      	strh	r3, [r4, #12]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	e78e      	b.n	8001a78 <__sflush_r+0x1c>
 8001b5a:	4407      	add	r7, r0
 8001b5c:	eba8 0800 	sub.w	r8, r8, r0
 8001b60:	e7e9      	b.n	8001b36 <__sflush_r+0xda>
 8001b62:	bf00      	nop
 8001b64:	20400001 	.word	0x20400001

08001b68 <_fflush_r>:
 8001b68:	b538      	push	{r3, r4, r5, lr}
 8001b6a:	690b      	ldr	r3, [r1, #16]
 8001b6c:	4605      	mov	r5, r0
 8001b6e:	460c      	mov	r4, r1
 8001b70:	b913      	cbnz	r3, 8001b78 <_fflush_r+0x10>
 8001b72:	2500      	movs	r5, #0
 8001b74:	4628      	mov	r0, r5
 8001b76:	bd38      	pop	{r3, r4, r5, pc}
 8001b78:	b118      	cbz	r0, 8001b82 <_fflush_r+0x1a>
 8001b7a:	6983      	ldr	r3, [r0, #24]
 8001b7c:	b90b      	cbnz	r3, 8001b82 <_fflush_r+0x1a>
 8001b7e:	f7ff fa4f 	bl	8001020 <__sinit>
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <_fflush_r+0x6c>)
 8001b84:	429c      	cmp	r4, r3
 8001b86:	d11b      	bne.n	8001bc0 <_fflush_r+0x58>
 8001b88:	686c      	ldr	r4, [r5, #4]
 8001b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0ef      	beq.n	8001b72 <_fflush_r+0xa>
 8001b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001b94:	07d0      	lsls	r0, r2, #31
 8001b96:	d404      	bmi.n	8001ba2 <_fflush_r+0x3a>
 8001b98:	0599      	lsls	r1, r3, #22
 8001b9a:	d402      	bmi.n	8001ba2 <_fflush_r+0x3a>
 8001b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b9e:	f7ff fadd 	bl	800115c <__retarget_lock_acquire_recursive>
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	f7ff ff59 	bl	8001a5c <__sflush_r>
 8001baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bac:	07da      	lsls	r2, r3, #31
 8001bae:	4605      	mov	r5, r0
 8001bb0:	d4e0      	bmi.n	8001b74 <_fflush_r+0xc>
 8001bb2:	89a3      	ldrh	r3, [r4, #12]
 8001bb4:	059b      	lsls	r3, r3, #22
 8001bb6:	d4dd      	bmi.n	8001b74 <_fflush_r+0xc>
 8001bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bba:	f7ff fad0 	bl	800115e <__retarget_lock_release_recursive>
 8001bbe:	e7d9      	b.n	8001b74 <_fflush_r+0xc>
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <_fflush_r+0x70>)
 8001bc2:	429c      	cmp	r4, r3
 8001bc4:	d101      	bne.n	8001bca <_fflush_r+0x62>
 8001bc6:	68ac      	ldr	r4, [r5, #8]
 8001bc8:	e7df      	b.n	8001b8a <_fflush_r+0x22>
 8001bca:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <_fflush_r+0x74>)
 8001bcc:	429c      	cmp	r4, r3
 8001bce:	bf08      	it	eq
 8001bd0:	68ec      	ldreq	r4, [r5, #12]
 8001bd2:	e7da      	b.n	8001b8a <_fflush_r+0x22>
 8001bd4:	08001f18 	.word	0x08001f18
 8001bd8:	08001f38 	.word	0x08001f38
 8001bdc:	08001ef8 	.word	0x08001ef8

08001be0 <_lseek_r>:
 8001be0:	b538      	push	{r3, r4, r5, lr}
 8001be2:	4d07      	ldr	r5, [pc, #28]	; (8001c00 <_lseek_r+0x20>)
 8001be4:	4604      	mov	r4, r0
 8001be6:	4608      	mov	r0, r1
 8001be8:	4611      	mov	r1, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	602a      	str	r2, [r5, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f7fe fed9 	bl	80009a6 <_lseek>
 8001bf4:	1c43      	adds	r3, r0, #1
 8001bf6:	d102      	bne.n	8001bfe <_lseek_r+0x1e>
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	b103      	cbz	r3, 8001bfe <_lseek_r+0x1e>
 8001bfc:	6023      	str	r3, [r4, #0]
 8001bfe:	bd38      	pop	{r3, r4, r5, pc}
 8001c00:	20000104 	.word	0x20000104

08001c04 <__swhatbuf_r>:
 8001c04:	b570      	push	{r4, r5, r6, lr}
 8001c06:	460e      	mov	r6, r1
 8001c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c0c:	2900      	cmp	r1, #0
 8001c0e:	b096      	sub	sp, #88	; 0x58
 8001c10:	4614      	mov	r4, r2
 8001c12:	461d      	mov	r5, r3
 8001c14:	da07      	bge.n	8001c26 <__swhatbuf_r+0x22>
 8001c16:	2300      	movs	r3, #0
 8001c18:	602b      	str	r3, [r5, #0]
 8001c1a:	89b3      	ldrh	r3, [r6, #12]
 8001c1c:	061a      	lsls	r2, r3, #24
 8001c1e:	d410      	bmi.n	8001c42 <__swhatbuf_r+0x3e>
 8001c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c24:	e00e      	b.n	8001c44 <__swhatbuf_r+0x40>
 8001c26:	466a      	mov	r2, sp
 8001c28:	f000 f8be 	bl	8001da8 <_fstat_r>
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	dbf2      	blt.n	8001c16 <__swhatbuf_r+0x12>
 8001c30:	9a01      	ldr	r2, [sp, #4]
 8001c32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001c36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001c3a:	425a      	negs	r2, r3
 8001c3c:	415a      	adcs	r2, r3
 8001c3e:	602a      	str	r2, [r5, #0]
 8001c40:	e7ee      	b.n	8001c20 <__swhatbuf_r+0x1c>
 8001c42:	2340      	movs	r3, #64	; 0x40
 8001c44:	2000      	movs	r0, #0
 8001c46:	6023      	str	r3, [r4, #0]
 8001c48:	b016      	add	sp, #88	; 0x58
 8001c4a:	bd70      	pop	{r4, r5, r6, pc}

08001c4c <__smakebuf_r>:
 8001c4c:	898b      	ldrh	r3, [r1, #12]
 8001c4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c50:	079d      	lsls	r5, r3, #30
 8001c52:	4606      	mov	r6, r0
 8001c54:	460c      	mov	r4, r1
 8001c56:	d507      	bpl.n	8001c68 <__smakebuf_r+0x1c>
 8001c58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001c5c:	6023      	str	r3, [r4, #0]
 8001c5e:	6123      	str	r3, [r4, #16]
 8001c60:	2301      	movs	r3, #1
 8001c62:	6163      	str	r3, [r4, #20]
 8001c64:	b002      	add	sp, #8
 8001c66:	bd70      	pop	{r4, r5, r6, pc}
 8001c68:	ab01      	add	r3, sp, #4
 8001c6a:	466a      	mov	r2, sp
 8001c6c:	f7ff ffca 	bl	8001c04 <__swhatbuf_r>
 8001c70:	9900      	ldr	r1, [sp, #0]
 8001c72:	4605      	mov	r5, r0
 8001c74:	4630      	mov	r0, r6
 8001c76:	f7ff fa73 	bl	8001160 <_malloc_r>
 8001c7a:	b948      	cbnz	r0, 8001c90 <__smakebuf_r+0x44>
 8001c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c80:	059a      	lsls	r2, r3, #22
 8001c82:	d4ef      	bmi.n	8001c64 <__smakebuf_r+0x18>
 8001c84:	f023 0303 	bic.w	r3, r3, #3
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	81a3      	strh	r3, [r4, #12]
 8001c8e:	e7e3      	b.n	8001c58 <__smakebuf_r+0xc>
 8001c90:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <__smakebuf_r+0x7c>)
 8001c92:	62b3      	str	r3, [r6, #40]	; 0x28
 8001c94:	89a3      	ldrh	r3, [r4, #12]
 8001c96:	6020      	str	r0, [r4, #0]
 8001c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c9c:	81a3      	strh	r3, [r4, #12]
 8001c9e:	9b00      	ldr	r3, [sp, #0]
 8001ca0:	6163      	str	r3, [r4, #20]
 8001ca2:	9b01      	ldr	r3, [sp, #4]
 8001ca4:	6120      	str	r0, [r4, #16]
 8001ca6:	b15b      	cbz	r3, 8001cc0 <__smakebuf_r+0x74>
 8001ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cac:	4630      	mov	r0, r6
 8001cae:	f000 f88d 	bl	8001dcc <_isatty_r>
 8001cb2:	b128      	cbz	r0, 8001cc0 <__smakebuf_r+0x74>
 8001cb4:	89a3      	ldrh	r3, [r4, #12]
 8001cb6:	f023 0303 	bic.w	r3, r3, #3
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	81a3      	strh	r3, [r4, #12]
 8001cc0:	89a0      	ldrh	r0, [r4, #12]
 8001cc2:	4305      	orrs	r5, r0
 8001cc4:	81a5      	strh	r5, [r4, #12]
 8001cc6:	e7cd      	b.n	8001c64 <__smakebuf_r+0x18>
 8001cc8:	08000fb9 	.word	0x08000fb9

08001ccc <__malloc_lock>:
 8001ccc:	4801      	ldr	r0, [pc, #4]	; (8001cd4 <__malloc_lock+0x8>)
 8001cce:	f7ff ba45 	b.w	800115c <__retarget_lock_acquire_recursive>
 8001cd2:	bf00      	nop
 8001cd4:	200000fc 	.word	0x200000fc

08001cd8 <__malloc_unlock>:
 8001cd8:	4801      	ldr	r0, [pc, #4]	; (8001ce0 <__malloc_unlock+0x8>)
 8001cda:	f7ff ba40 	b.w	800115e <__retarget_lock_release_recursive>
 8001cde:	bf00      	nop
 8001ce0:	200000fc 	.word	0x200000fc

08001ce4 <_free_r>:
 8001ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ce6:	2900      	cmp	r1, #0
 8001ce8:	d048      	beq.n	8001d7c <_free_r+0x98>
 8001cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cee:	9001      	str	r0, [sp, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8001cf6:	bfb8      	it	lt
 8001cf8:	18e4      	addlt	r4, r4, r3
 8001cfa:	f7ff ffe7 	bl	8001ccc <__malloc_lock>
 8001cfe:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <_free_r+0x9c>)
 8001d00:	9801      	ldr	r0, [sp, #4]
 8001d02:	6813      	ldr	r3, [r2, #0]
 8001d04:	4615      	mov	r5, r2
 8001d06:	b933      	cbnz	r3, 8001d16 <_free_r+0x32>
 8001d08:	6063      	str	r3, [r4, #4]
 8001d0a:	6014      	str	r4, [r2, #0]
 8001d0c:	b003      	add	sp, #12
 8001d0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d12:	f7ff bfe1 	b.w	8001cd8 <__malloc_unlock>
 8001d16:	42a3      	cmp	r3, r4
 8001d18:	d90b      	bls.n	8001d32 <_free_r+0x4e>
 8001d1a:	6821      	ldr	r1, [r4, #0]
 8001d1c:	1862      	adds	r2, r4, r1
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	bf04      	itt	eq
 8001d22:	681a      	ldreq	r2, [r3, #0]
 8001d24:	685b      	ldreq	r3, [r3, #4]
 8001d26:	6063      	str	r3, [r4, #4]
 8001d28:	bf04      	itt	eq
 8001d2a:	1852      	addeq	r2, r2, r1
 8001d2c:	6022      	streq	r2, [r4, #0]
 8001d2e:	602c      	str	r4, [r5, #0]
 8001d30:	e7ec      	b.n	8001d0c <_free_r+0x28>
 8001d32:	461a      	mov	r2, r3
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	b10b      	cbz	r3, 8001d3c <_free_r+0x58>
 8001d38:	42a3      	cmp	r3, r4
 8001d3a:	d9fa      	bls.n	8001d32 <_free_r+0x4e>
 8001d3c:	6811      	ldr	r1, [r2, #0]
 8001d3e:	1855      	adds	r5, r2, r1
 8001d40:	42a5      	cmp	r5, r4
 8001d42:	d10b      	bne.n	8001d5c <_free_r+0x78>
 8001d44:	6824      	ldr	r4, [r4, #0]
 8001d46:	4421      	add	r1, r4
 8001d48:	1854      	adds	r4, r2, r1
 8001d4a:	42a3      	cmp	r3, r4
 8001d4c:	6011      	str	r1, [r2, #0]
 8001d4e:	d1dd      	bne.n	8001d0c <_free_r+0x28>
 8001d50:	681c      	ldr	r4, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	6053      	str	r3, [r2, #4]
 8001d56:	4421      	add	r1, r4
 8001d58:	6011      	str	r1, [r2, #0]
 8001d5a:	e7d7      	b.n	8001d0c <_free_r+0x28>
 8001d5c:	d902      	bls.n	8001d64 <_free_r+0x80>
 8001d5e:	230c      	movs	r3, #12
 8001d60:	6003      	str	r3, [r0, #0]
 8001d62:	e7d3      	b.n	8001d0c <_free_r+0x28>
 8001d64:	6825      	ldr	r5, [r4, #0]
 8001d66:	1961      	adds	r1, r4, r5
 8001d68:	428b      	cmp	r3, r1
 8001d6a:	bf04      	itt	eq
 8001d6c:	6819      	ldreq	r1, [r3, #0]
 8001d6e:	685b      	ldreq	r3, [r3, #4]
 8001d70:	6063      	str	r3, [r4, #4]
 8001d72:	bf04      	itt	eq
 8001d74:	1949      	addeq	r1, r1, r5
 8001d76:	6021      	streq	r1, [r4, #0]
 8001d78:	6054      	str	r4, [r2, #4]
 8001d7a:	e7c7      	b.n	8001d0c <_free_r+0x28>
 8001d7c:	b003      	add	sp, #12
 8001d7e:	bd30      	pop	{r4, r5, pc}
 8001d80:	20000084 	.word	0x20000084

08001d84 <_read_r>:
 8001d84:	b538      	push	{r3, r4, r5, lr}
 8001d86:	4d07      	ldr	r5, [pc, #28]	; (8001da4 <_read_r+0x20>)
 8001d88:	4604      	mov	r4, r0
 8001d8a:	4608      	mov	r0, r1
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	2200      	movs	r2, #0
 8001d90:	602a      	str	r2, [r5, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	f7fe fda7 	bl	80008e6 <_read>
 8001d98:	1c43      	adds	r3, r0, #1
 8001d9a:	d102      	bne.n	8001da2 <_read_r+0x1e>
 8001d9c:	682b      	ldr	r3, [r5, #0]
 8001d9e:	b103      	cbz	r3, 8001da2 <_read_r+0x1e>
 8001da0:	6023      	str	r3, [r4, #0]
 8001da2:	bd38      	pop	{r3, r4, r5, pc}
 8001da4:	20000104 	.word	0x20000104

08001da8 <_fstat_r>:
 8001da8:	b538      	push	{r3, r4, r5, lr}
 8001daa:	4d07      	ldr	r5, [pc, #28]	; (8001dc8 <_fstat_r+0x20>)
 8001dac:	2300      	movs	r3, #0
 8001dae:	4604      	mov	r4, r0
 8001db0:	4608      	mov	r0, r1
 8001db2:	4611      	mov	r1, r2
 8001db4:	602b      	str	r3, [r5, #0]
 8001db6:	f7fe fddb 	bl	8000970 <_fstat>
 8001dba:	1c43      	adds	r3, r0, #1
 8001dbc:	d102      	bne.n	8001dc4 <_fstat_r+0x1c>
 8001dbe:	682b      	ldr	r3, [r5, #0]
 8001dc0:	b103      	cbz	r3, 8001dc4 <_fstat_r+0x1c>
 8001dc2:	6023      	str	r3, [r4, #0]
 8001dc4:	bd38      	pop	{r3, r4, r5, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000104 	.word	0x20000104

08001dcc <_isatty_r>:
 8001dcc:	b538      	push	{r3, r4, r5, lr}
 8001dce:	4d06      	ldr	r5, [pc, #24]	; (8001de8 <_isatty_r+0x1c>)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	602b      	str	r3, [r5, #0]
 8001dd8:	f7fe fdda 	bl	8000990 <_isatty>
 8001ddc:	1c43      	adds	r3, r0, #1
 8001dde:	d102      	bne.n	8001de6 <_isatty_r+0x1a>
 8001de0:	682b      	ldr	r3, [r5, #0]
 8001de2:	b103      	cbz	r3, 8001de6 <_isatty_r+0x1a>
 8001de4:	6023      	str	r3, [r4, #0]
 8001de6:	bd38      	pop	{r3, r4, r5, pc}
 8001de8:	20000104 	.word	0x20000104

08001dec <_init>:
 8001dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dee:	bf00      	nop
 8001df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001df2:	bc08      	pop	{r3}
 8001df4:	469e      	mov	lr, r3
 8001df6:	4770      	bx	lr

08001df8 <_fini>:
 8001df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfa:	bf00      	nop
 8001dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfe:	bc08      	pop	{r3}
 8001e00:	469e      	mov	lr, r3
 8001e02:	4770      	bx	lr
