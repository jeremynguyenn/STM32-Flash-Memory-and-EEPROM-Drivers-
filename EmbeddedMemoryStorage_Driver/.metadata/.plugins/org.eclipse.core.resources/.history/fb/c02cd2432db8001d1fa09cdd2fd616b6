
10_w25qxx_flash_storage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002610  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a54  08002a54  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002a54  08002a54  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a54  08002a54  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a54  08002a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000064  08002ac0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002ac0  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051a8  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f81  00000000  00000000  0002523c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d0  00000000  00000000  000261c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000248  00000000  00000000  00026490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002931  00000000  00000000  000266d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003e21  00000000  00000000  00029009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055d74  00000000  00000000  0002ce2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00082b9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011f4  00000000  00000000  00082bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002798 	.word	0x08002798

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08002798 	.word	0x08002798

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <fpu_enable+0x50>)
 8000286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800028a:	4a11      	ldr	r2, [pc, #68]	; (80002d0 <fpu_enable+0x50>)
 800028c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<21);
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <fpu_enable+0x50>)
 8000296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800029a:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <fpu_enable+0x50>)
 800029c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<22);
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <fpu_enable+0x50>)
 80002a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002aa:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <fpu_enable+0x50>)
 80002ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<23);
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <fpu_enable+0x50>)
 80002b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ba:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <fpu_enable+0x50>)
 80002bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <main>:




int main()
{
 80002d4:	b590      	push	{r4, r7, lr}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af04      	add	r7, sp, #16
	/*Enable FPU*/
	fpu_enable();
 80002da:	f7ff ffd1 	bl	8000280 <fpu_enable>

	/*Initialize timebase*/
	timebase_init();
 80002de:	f000 fea5 	bl	800102c <timebase_init>

	/*Initialize debug UART*/
	debug_uart_init();
 80002e2:	f000 fed9 	bl	8001098 <debug_uart_init>



	w25qxx_spi_init();
 80002e6:	f000 ff61 	bl	80011ac <w25qxx_spi_init>

	w25qxx_cs_pin_init();
 80002ea:	f000 ff8b 	bl	8001204 <w25qxx_cs_pin_init>

	status = w25qxx_init(&w25qxx,&hspi1);
 80002ee:	4910      	ldr	r1, [pc, #64]	; (8000330 <main+0x5c>)
 80002f0:	4810      	ldr	r0, [pc, #64]	; (8000334 <main+0x60>)
 80002f2:	f001 f828 	bl	8001346 <w25qxx_init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <main+0x64>)
 80002fc:	701a      	strb	r2, [r3, #0]

	 printf("System init....\n\r");
 80002fe:	480f      	ldr	r0, [pc, #60]	; (800033c <main+0x68>)
 8000300:	f001 fa20 	bl	8001744 <iprintf>

	if(status == W25QXX_DEV_OK)
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <main+0x64>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d109      	bne.n	8000320 <main+0x4c>
	{
		w25qxx_get_mem_info(w25qxx);
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <main+0x60>)
 800030e:	466c      	mov	r4, sp
 8000310:	f103 0210 	add.w	r2, r3, #16
 8000314:	ca07      	ldmia	r2, {r0, r1, r2}
 8000316:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800031a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800031c:	f001 f970 	bl	8001600 <w25qxx_get_mem_info>
	}
	delay(10);
 8000320:	200a      	movs	r0, #10
 8000322:	f000 fe41 	bl	8000fa8 <delay>


	//test_erase();

	//test_write();
	test_write_all_sectors();
 8000326:	f000 f88d 	bl	8000444 <test_write_all_sectors>
	test_read_all_sectors();
 800032a:	f000 f809 	bl	8000340 <test_read_all_sectors>



	while(1)
 800032e:	e7fe      	b.n	800032e <main+0x5a>
 8000330:	200000b4 	.word	0x200000b4
 8000334:	2000008c 	.word	0x2000008c
 8000338:	200000a8 	.word	0x200000a8
 800033c:	080027b0 	.word	0x080027b0

08000340 <test_read_all_sectors>:
	}
}


static void test_read_all_sectors(void)
{
 8000340:	b5b0      	push	{r4, r5, r7, lr}
 8000342:	b086      	sub	sp, #24
 8000344:	af00      	add	r7, sp, #0
 8000346:	466b      	mov	r3, sp
 8000348:	461d      	mov	r5, r3

	uint8_t buf[w25qxx.w25qxx_pg_sz];
 800034a:	4b38      	ldr	r3, [pc, #224]	; (800042c <test_read_all_sectors+0xec>)
 800034c:	695c      	ldr	r4, [r3, #20]
 800034e:	4623      	mov	r3, r4
 8000350:	3b01      	subs	r3, #1
 8000352:	613b      	str	r3, [r7, #16]
 8000354:	4620      	mov	r0, r4
 8000356:	f04f 0100 	mov.w	r1, #0
 800035a:	f04f 0200 	mov.w	r2, #0
 800035e:	f04f 0300 	mov.w	r3, #0
 8000362:	00cb      	lsls	r3, r1, #3
 8000364:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000368:	00c2      	lsls	r2, r0, #3
 800036a:	4620      	mov	r0, r4
 800036c:	f04f 0100 	mov.w	r1, #0
 8000370:	f04f 0200 	mov.w	r2, #0
 8000374:	f04f 0300 	mov.w	r3, #0
 8000378:	00cb      	lsls	r3, r1, #3
 800037a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800037e:	00c2      	lsls	r2, r0, #3
 8000380:	1de3      	adds	r3, r4, #7
 8000382:	08db      	lsrs	r3, r3, #3
 8000384:	00db      	lsls	r3, r3, #3
 8000386:	ebad 0d03 	sub.w	sp, sp, r3
 800038a:	466b      	mov	r3, sp
 800038c:	3300      	adds	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]

	uint32_t st_time, ed_time;
	uint32_t total_sectors = w25qxx.w25qxx_blk_cnt * w25qxx.w25qxx_sect_in_blk;
 8000390:	4b26      	ldr	r3, [pc, #152]	; (800042c <test_read_all_sectors+0xec>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	4a25      	ldr	r2, [pc, #148]	; (800042c <test_read_all_sectors+0xec>)
 8000396:	6912      	ldr	r2, [r2, #16]
 8000398:	fb02 f303 	mul.w	r3, r2, r3
 800039c:	60bb      	str	r3, [r7, #8]

	printf("------------------Read data in all sectors-------------- \n\r");
 800039e:	4824      	ldr	r0, [pc, #144]	; (8000430 <test_read_all_sectors+0xf0>)
 80003a0:	f001 f9d0 	bl	8001744 <iprintf>
	st_time = get_tick();
 80003a4:	f000 fe1e 	bl	8000fe4 <get_tick>
 80003a8:	6078      	str	r0, [r7, #4]

	for (uint32_t i = 0; i < total_sectors; ++i) {
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
 80003ae:	e019      	b.n	80003e4 <test_read_all_sectors+0xa4>
		w25qxx_read(&w25qxx, i * w25qxx.w25qxx_sect_sz, buf, sizeof(buf));
 80003b0:	4b1e      	ldr	r3, [pc, #120]	; (800042c <test_read_all_sectors+0xec>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	697a      	ldr	r2, [r7, #20]
 80003b6:	fb02 f103 	mul.w	r1, r2, r3
 80003ba:	68fa      	ldr	r2, [r7, #12]
 80003bc:	4623      	mov	r3, r4
 80003be:	481b      	ldr	r0, [pc, #108]	; (800042c <test_read_all_sectors+0xec>)
 80003c0:	f001 f8e0 	bl	8001584 <w25qxx_read>

		if(i==1)
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d109      	bne.n	80003de <test_read_all_sectors+0x9e>
		dump_hex_data_to_serial("<----PAGE START--->",  i * w25qxx.w25qxx_sect_sz, (uint8_t*) &buf, sizeof(buf));
 80003ca:	4b18      	ldr	r3, [pc, #96]	; (800042c <test_read_all_sectors+0xec>)
 80003cc:	68db      	ldr	r3, [r3, #12]
 80003ce:	697a      	ldr	r2, [r7, #20]
 80003d0:	fb02 f103 	mul.w	r1, r2, r3
 80003d4:	68fa      	ldr	r2, [r7, #12]
 80003d6:	4623      	mov	r3, r4
 80003d8:	4816      	ldr	r0, [pc, #88]	; (8000434 <test_read_all_sectors+0xf4>)
 80003da:	f000 f897 	bl	800050c <dump_hex_data_to_serial>
	for (uint32_t i = 0; i < total_sectors; ++i) {
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	3301      	adds	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d3e1      	bcc.n	80003b0 <test_read_all_sectors+0x70>
	}

	ed_time = get_tick();
 80003ec:	f000 fdfa 	bl	8000fe4 <get_tick>
 80003f0:	6038      	str	r0, [r7, #0]

	printf("Time taken :  %lu ms\n\r", ed_time - st_time);
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	1ad3      	subs	r3, r2, r3
 80003f8:	4619      	mov	r1, r3
 80003fa:	480f      	ldr	r0, [pc, #60]	; (8000438 <test_read_all_sectors+0xf8>)
 80003fc:	f001 f9a2 	bl	8001744 <iprintf>


	if(test_data_integrity(0xaa,buf,sizeof(buf)))
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4622      	mov	r2, r4
 8000404:	4619      	mov	r1, r3
 8000406:	20aa      	movs	r0, #170	; 0xaa
 8000408:	f000 f8cb 	bl	80005a2 <test_data_integrity>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d003      	beq.n	800041a <test_read_all_sectors+0xda>
	{
		printf("SUCCESS : Data Match \n\r");
 8000412:	480a      	ldr	r0, [pc, #40]	; (800043c <test_read_all_sectors+0xfc>)
 8000414:	f001 f996 	bl	8001744 <iprintf>
 8000418:	e002      	b.n	8000420 <test_read_all_sectors+0xe0>
	}
	else
	{
		printf("FAILURE : Data Mismatch \n\r");
 800041a:	4809      	ldr	r0, [pc, #36]	; (8000440 <test_read_all_sectors+0x100>)
 800041c:	f001 f992 	bl	8001744 <iprintf>
 8000420:	46ad      	mov	sp, r5
	}
}
 8000422:	bf00      	nop
 8000424:	3718      	adds	r7, #24
 8000426:	46bd      	mov	sp, r7
 8000428:	bdb0      	pop	{r4, r5, r7, pc}
 800042a:	bf00      	nop
 800042c:	2000008c 	.word	0x2000008c
 8000430:	080027c4 	.word	0x080027c4
 8000434:	08002800 	.word	0x08002800
 8000438:	08002814 	.word	0x08002814
 800043c:	0800282c 	.word	0x0800282c
 8000440:	08002844 	.word	0x08002844

08000444 <test_write_all_sectors>:

static void test_write_all_sectors(void)
{
 8000444:	b5b0      	push	{r4, r5, r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	466b      	mov	r3, sp
 800044c:	461d      	mov	r5, r3
	uint8_t buf[w25qxx.w25qxx_pg_sz];
 800044e:	4b2c      	ldr	r3, [pc, #176]	; (8000500 <test_write_all_sectors+0xbc>)
 8000450:	695c      	ldr	r4, [r3, #20]
 8000452:	4623      	mov	r3, r4
 8000454:	3b01      	subs	r3, #1
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	4620      	mov	r0, r4
 800045a:	f04f 0100 	mov.w	r1, #0
 800045e:	f04f 0200 	mov.w	r2, #0
 8000462:	f04f 0300 	mov.w	r3, #0
 8000466:	00cb      	lsls	r3, r1, #3
 8000468:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800046c:	00c2      	lsls	r2, r0, #3
 800046e:	4620      	mov	r0, r4
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	f04f 0200 	mov.w	r2, #0
 8000478:	f04f 0300 	mov.w	r3, #0
 800047c:	00cb      	lsls	r3, r1, #3
 800047e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000482:	00c2      	lsls	r2, r0, #3
 8000484:	1de3      	adds	r3, r4, #7
 8000486:	08db      	lsrs	r3, r3, #3
 8000488:	00db      	lsls	r3, r3, #3
 800048a:	ebad 0d03 	sub.w	sp, sp, r3
 800048e:	466b      	mov	r3, sp
 8000490:	3300      	adds	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]

	uint32_t st_time, ed_time;

	set_test_buffer(0xaa, buf, sizeof(buf));
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	4622      	mov	r2, r4
 8000498:	4619      	mov	r1, r3
 800049a:	20aa      	movs	r0, #170	; 0xaa
 800049c:	f000 f870 	bl	8000580 <set_test_buffer>

	uint32_t total_sectors = w25qxx.w25qxx_blk_cnt * w25qxx.w25qxx_sect_in_blk;
 80004a0:	4b17      	ldr	r3, [pc, #92]	; (8000500 <test_write_all_sectors+0xbc>)
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	4a16      	ldr	r2, [pc, #88]	; (8000500 <test_write_all_sectors+0xbc>)
 80004a6:	6912      	ldr	r2, [r2, #16]
 80004a8:	fb02 f303 	mul.w	r3, r2, r3
 80004ac:	60bb      	str	r3, [r7, #8]


	printf("------------------Write data to all sectors-------------- \n\r");
 80004ae:	4815      	ldr	r0, [pc, #84]	; (8000504 <test_write_all_sectors+0xc0>)
 80004b0:	f001 f948 	bl	8001744 <iprintf>
	st_time = get_tick();
 80004b4:	f000 fd96 	bl	8000fe4 <get_tick>
 80004b8:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < total_sectors; ++i)
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	e00c      	b.n	80004da <test_write_all_sectors+0x96>
	{
		w25qxx_write(&w25qxx, i * w25qxx.w25qxx_sect_sz, buf, sizeof(buf));
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <test_write_all_sectors+0xbc>)
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	697a      	ldr	r2, [r7, #20]
 80004c6:	fb02 f103 	mul.w	r1, r2, r3
 80004ca:	68fa      	ldr	r2, [r7, #12]
 80004cc:	4623      	mov	r3, r4
 80004ce:	480c      	ldr	r0, [pc, #48]	; (8000500 <test_write_all_sectors+0xbc>)
 80004d0:	f000 ffc0 	bl	8001454 <w25qxx_write>
	for (uint32_t i = 0; i < total_sectors; ++i)
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	3301      	adds	r3, #1
 80004d8:	617b      	str	r3, [r7, #20]
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d3ee      	bcc.n	80004c0 <test_write_all_sectors+0x7c>
	}
	ed_time = get_tick();
 80004e2:	f000 fd7f 	bl	8000fe4 <get_tick>
 80004e6:	6038      	str	r0, [r7, #0]

	printf("Time taken :  %lu ms\n\r", ed_time - st_time);
 80004e8:	683a      	ldr	r2, [r7, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	4619      	mov	r1, r3
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <test_write_all_sectors+0xc4>)
 80004f2:	f001 f927 	bl	8001744 <iprintf>
 80004f6:	46ad      	mov	sp, r5


}
 80004f8:	bf00      	nop
 80004fa:	3718      	adds	r7, #24
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000500:	2000008c 	.word	0x2000008c
 8000504:	08002860 	.word	0x08002860
 8000508:	08002814 	.word	0x08002814

0800050c <dump_hex_data_to_serial>:

static void dump_hex_data_to_serial(const char *header, uint32_t start_address, const uint8_t *buffer, uint32_t length)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
 8000518:	603b      	str	r3, [r7, #0]
    // Print the header text
    printf("%s\n", header);
 800051a:	68f8      	ldr	r0, [r7, #12]
 800051c:	f001 f9ae 	bl	800187c <puts>

    // Loop through the buffer
    for (uint32_t i = 0; i < length; ++i) {
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e01f      	b.n	8000566 <dump_hex_data_to_serial+0x5a>


        // Check if we need to print a new line and the starting address
        if (i % 16 == 0) {
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	f003 030f 	and.w	r3, r3, #15
 800052c:	2b00      	cmp	r3, #0
 800052e:	d103      	bne.n	8000538 <dump_hex_data_to_serial+0x2c>
            printf("0x%08lx: ", start_address);
 8000530:	68b9      	ldr	r1, [r7, #8]
 8000532:	4811      	ldr	r0, [pc, #68]	; (8000578 <dump_hex_data_to_serial+0x6c>)
 8000534:	f001 f906 	bl	8001744 <iprintf>
        }

        // Print the hexadecimal value of the current buffer element
        printf("%02x ", buffer[i]);
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	4413      	add	r3, r2
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	480e      	ldr	r0, [pc, #56]	; (800057c <dump_hex_data_to_serial+0x70>)
 8000544:	f001 f8fe 	bl	8001744 <iprintf>

        // Check if we need to print a new line
        if ((i + 1) % 16 == 0) {
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	3301      	adds	r3, #1
 800054c:	f003 030f 	and.w	r3, r3, #15
 8000550:	2b00      	cmp	r3, #0
 8000552:	d102      	bne.n	800055a <dump_hex_data_to_serial+0x4e>
            printf("\n");
 8000554:	200a      	movs	r0, #10
 8000556:	f001 f90d 	bl	8001774 <putchar>
        }

        // Increment the starting address
        ++start_address;
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	3301      	adds	r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < length; ++i) {
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	3301      	adds	r3, #1
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	697a      	ldr	r2, [r7, #20]
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	429a      	cmp	r2, r3
 800056c:	d3db      	bcc.n	8000526 <dump_hex_data_to_serial+0x1a>
    }


}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	080028a0 	.word	0x080028a0
 800057c:	080028ac 	.word	0x080028ac

08000580 <set_test_buffer>:
	}

}

static void set_test_buffer(uint8_t test_byte, uint8_t *buf, uint32_t len)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	73fb      	strb	r3, [r7, #15]
    memset(buf, test_byte, len);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4619      	mov	r1, r3
 8000594:	68b8      	ldr	r0, [r7, #8]
 8000596:	f001 f8cd 	bl	8001734 <memset>

}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <test_data_integrity>:
	}

}

static bool test_data_integrity(uint8_t test_byte, uint8_t *buf, uint32_t len)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b087      	sub	sp, #28
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	4603      	mov	r3, r0
 80005aa:	60b9      	str	r1, [r7, #8]
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	73fb      	strb	r3, [r7, #15]
    bool ret = true;
 80005b0:	2301      	movs	r3, #1
 80005b2:	75fb      	strb	r3, [r7, #23]

	for (uint32_t i = 0; i < len; ++i) {
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	e00b      	b.n	80005d2 <test_data_integrity+0x30>
		if (buf[i] != test_byte)
 80005ba:	68ba      	ldr	r2, [r7, #8]
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	4413      	add	r3, r2
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	7bfa      	ldrb	r2, [r7, #15]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d001      	beq.n	80005cc <test_data_integrity+0x2a>
		{
			ret = false;
 80005c8:	2300      	movs	r3, #0
 80005ca:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < len; ++i) {
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	3301      	adds	r3, #1
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d3ef      	bcc.n	80005ba <test_data_integrity+0x18>
		}
	}

    return ret;
 80005da:	7dfb      	ldrb	r3, [r7, #23]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	371c      	adds	r7, #28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <spi1_gpio_init>:
#include "stddef.h"

#define GPIOAEN		(1U<<0)
#define SPI1EN		(1U<<12)
void spi1_gpio_init(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 80005ec:	4b3e      	ldr	r3, [pc, #248]	; (80006e8 <spi1_gpio_init+0x100>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	4a3d      	ldr	r2, [pc, #244]	; (80006e8 <spi1_gpio_init+0x100>)
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5,PA6,PA7 mode to alternate function mode*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 80005f8:	4b3c      	ldr	r3, [pc, #240]	; (80006ec <spi1_gpio_init+0x104>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a3b      	ldr	r2, [pc, #236]	; (80006ec <spi1_gpio_init+0x104>)
 80005fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000602:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 8000604:	4b39      	ldr	r3, [pc, #228]	; (80006ec <spi1_gpio_init+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a38      	ldr	r2, [pc, #224]	; (80006ec <spi1_gpio_init+0x104>)
 800060a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800060e:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 8000610:	4b36      	ldr	r3, [pc, #216]	; (80006ec <spi1_gpio_init+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a35      	ldr	r2, [pc, #212]	; (80006ec <spi1_gpio_init+0x104>)
 8000616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800061a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 800061c:	4b33      	ldr	r3, [pc, #204]	; (80006ec <spi1_gpio_init+0x104>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <spi1_gpio_init+0x104>)
 8000622:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000626:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 8000628:	4b30      	ldr	r3, [pc, #192]	; (80006ec <spi1_gpio_init+0x104>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a2f      	ldr	r2, [pc, #188]	; (80006ec <spi1_gpio_init+0x104>)
 800062e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000632:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 8000634:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <spi1_gpio_init+0x104>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a2c      	ldr	r2, [pc, #176]	; (80006ec <spi1_gpio_init+0x104>)
 800063a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800063e:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/

	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 8000640:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <spi1_gpio_init+0x104>)
 8000642:	6a1b      	ldr	r3, [r3, #32]
 8000644:	4a29      	ldr	r2, [pc, #164]	; (80006ec <spi1_gpio_init+0x104>)
 8000646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <spi1_gpio_init+0x104>)
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	4a26      	ldr	r2, [pc, #152]	; (80006ec <spi1_gpio_init+0x104>)
 8000652:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000656:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <spi1_gpio_init+0x104>)
 800065a:	6a1b      	ldr	r3, [r3, #32]
 800065c:	4a23      	ldr	r2, [pc, #140]	; (80006ec <spi1_gpio_init+0x104>)
 800065e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000662:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <spi1_gpio_init+0x104>)
 8000666:	6a1b      	ldr	r3, [r3, #32]
 8000668:	4a20      	ldr	r2, [pc, #128]	; (80006ec <spi1_gpio_init+0x104>)
 800066a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800066e:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <spi1_gpio_init+0x104>)
 8000672:	6a1b      	ldr	r3, [r3, #32]
 8000674:	4a1d      	ldr	r2, [pc, #116]	; (80006ec <spi1_gpio_init+0x104>)
 8000676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800067a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<25);
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <spi1_gpio_init+0x104>)
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <spi1_gpio_init+0x104>)
 8000682:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000686:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <spi1_gpio_init+0x104>)
 800068a:	6a1b      	ldr	r3, [r3, #32]
 800068c:	4a17      	ldr	r2, [pc, #92]	; (80006ec <spi1_gpio_init+0x104>)
 800068e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000692:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<27);
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <spi1_gpio_init+0x104>)
 8000696:	6a1b      	ldr	r3, [r3, #32]
 8000698:	4a14      	ldr	r2, [pc, #80]	; (80006ec <spi1_gpio_init+0x104>)
 800069a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800069e:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <spi1_gpio_init+0x104>)
 80006a2:	6a1b      	ldr	r3, [r3, #32]
 80006a4:	4a11      	ldr	r2, [pc, #68]	; (80006ec <spi1_gpio_init+0x104>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<29);
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <spi1_gpio_init+0x104>)
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <spi1_gpio_init+0x104>)
 80006b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80006b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <spi1_gpio_init+0x104>)
 80006ba:	6a1b      	ldr	r3, [r3, #32]
 80006bc:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <spi1_gpio_init+0x104>)
 80006be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80006c2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<31);
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <spi1_gpio_init+0x104>)
 80006c6:	6a1b      	ldr	r3, [r3, #32]
 80006c8:	4a08      	ldr	r2, [pc, #32]	; (80006ec <spi1_gpio_init+0x104>)
 80006ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80006ce:	6213      	str	r3, [r2, #32]

	/*Enable clock access to SPI1*/
	RCC->APB2ENR |=SPI1EN;
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <spi1_gpio_init+0x100>)
 80006d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <spi1_gpio_init+0x100>)
 80006d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006da:	6453      	str	r3, [r2, #68]	; 0x44

}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000

080006f0 <spi_init>:

StatusTypeDef spi_init(SPI_HandleTypeDef *hspi)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	/*Check spi handle allocation*/
	if(hspi == NULL)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <spi_init+0x12>
	{
		return DEV_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	e05a      	b.n	80007b8 <spi_init+0xc8>
	}

	/*Disable CRC calculation*/
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	629a      	str	r2, [r3, #40]	; 0x28

	if(hspi->State == SPI_STATE_RESET)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <spi_init+0x26>
	{
		spi1_gpio_init();
 8000712:	f7ff ff69 	bl	80005e8 <spi1_gpio_init>
	}

   hspi->State =  SPI_STATE_BUSY;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2202      	movs	r2, #2
 800071a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800072c:	601a      	str	r2, [r3, #0]

   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
   Communication speed, First bit and CRC calculation state */
   WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800073e:	431a      	orrs	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000748:	431a      	orrs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	691b      	ldr	r3, [r3, #16]
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	431a      	orrs	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	431a      	orrs	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000766:	431a      	orrs	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000770:	431a      	orrs	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6a1b      	ldr	r3, [r3, #32]
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	ea42 0103 	orr.w	r1, r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000782:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	430a      	orrs	r2, r1
 800078c:	601a      	str	r2, [r3, #0]
                                   (hspi->Init.BuadRatePrescaler & SPI_CR1_BR_Msk) |
                                   (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                   (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

   /* Configure : NSS management, TI Mode */
   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	0c1b      	lsrs	r3, r3, #16
 8000794:	f003 0104 	and.w	r1, r3, #4
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800079c:	f003 0210 	and.w	r2, r3, #16
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	430a      	orrs	r2, r1
 80007a6:	605a      	str	r2, [r3, #4]

  hspi->ErrorCode =  SPI_ERROR_NONE;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->State =  SPI_STATE_READY;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2201      	movs	r2, #1
 80007b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   return DEV_OK;
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <spi_transmit>:



StatusTypeDef spi_transmit(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	4613      	mov	r3, r2
 80007ce:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 80007d0:	2300      	movs	r3, #0
 80007d2:	75fb      	strb	r3, [r7, #23]
	uint16_t tx_xfer_cnt;


	tx_xfer_cnt  = size;
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	82bb      	strh	r3, [r7, #20]
	tickstart = get_tick();
 80007d8:	f000 fc04 	bl	8000fe4 <get_tick>
 80007dc:	6138      	str	r0, [r7, #16]

	if(hspi->State != SPI_STATE_READY)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d007      	beq.n	80007f8 <spi_transmit+0x38>
	{
		error_code = DEV_BUSY;
 80007e8:	2302      	movs	r3, #2
 80007ea:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2201      	movs	r2, #1
 80007f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return error_code;
 80007f4:	7dfb      	ldrb	r3, [r7, #23]
 80007f6:	e0fd      	b.n	80009f4 <spi_transmit+0x234>
	}

	if((p_data == NULL) || (size  == 0))
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d002      	beq.n	8000804 <spi_transmit+0x44>
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d107      	bne.n	8000814 <spi_transmit+0x54>
	{
		error_code =  DEV_ERROR;
 8000804:	2301      	movs	r3, #1
 8000806:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2201      	movs	r2, #1
 800080c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return error_code;
 8000810:	7dfb      	ldrb	r3, [r7, #23]
 8000812:	e0ef      	b.n	80009f4 <spi_transmit+0x234>
	}

	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_TX;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2203      	movs	r2, #3
 8000818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2200      	movs	r2, #0
 8000820:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->pTxBuffPtr = (uint8_t *)p_data;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi->TxXferSize =  size;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	88fa      	ldrh	r2, [r7, #6]
 800082c:	861a      	strh	r2, [r3, #48]	; 0x30
	hspi->TxXferCount=  size;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	88fa      	ldrh	r2, [r7, #6]
 8000832:	865a      	strh	r2, [r3, #50]	; 0x32


	hspi->pRxBuffPtr = (uint8_t *)NULL;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2200      	movs	r2, #0
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
	hspi->RxXferSize =  0;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2200      	movs	r2, #0
 800083e:	871a      	strh	r2, [r3, #56]	; 0x38
	hspi->RxXferCount=  0;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2200      	movs	r2, #0
 8000844:	875a      	strh	r2, [r3, #58]	; 0x3a

	/*Configure communication direction*/
	if(hspi->Init.Direction  ==  SPI_DIRECTION_1LINE)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800084e:	d10f      	bne.n	8000870 <spi_transmit+0xb0>
	{
		CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800085e:	601a      	str	r2, [r3, #0]

		/*Set 1 line TX*/
		SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIOE);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800086e:	601a      	str	r2, [r3, #0]

	}

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	2b40      	cmp	r3, #64	; 0x40
 800087c:	d007      	beq.n	800088e <spi_transmit+0xce>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800088c:	601a      	str	r2, [r3, #0]
	}

	/*Transmit data in 16 bit mode*/
	if(hspi->Init.DataSize ==  SPI_DATASIZE_16BIT)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000896:	d150      	bne.n	800093a <spi_transmit+0x17a>
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  1))
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <spi_transmit+0xe6>
 80008a0:	8abb      	ldrh	r3, [r7, #20]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d143      	bne.n	800092e <spi_transmit+0x16e>
		{
			hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008aa:	881a      	ldrh	r2, [r3, #0]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr +=sizeof(uint16_t);
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b6:	1c9a      	adds	r2, r3, #2
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
			hspi->TxXferCount--;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	3b01      	subs	r3, #1
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	865a      	strh	r2, [r3, #50]	; 0x32
		}

		while(hspi->TxXferCount> 0)
 80008ca:	e030      	b.n	800092e <spi_transmit+0x16e>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d012      	beq.n	8000900 <spi_transmit+0x140>
			{
				hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008de:	881a      	ldrh	r2, [r3, #0]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr +=sizeof(uint16_t);
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ea:	1c9a      	adds	r2, r3, #2
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
				hspi->TxXferCount--;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	3b01      	subs	r3, #1
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	865a      	strh	r2, [r3, #50]	; 0x32
 80008fe:	e016      	b.n	800092e <spi_transmit+0x16e>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000900:	f000 fb70 	bl	8000fe4 <get_tick>
 8000904:	4602      	mov	r2, r0
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	d803      	bhi.n	8000918 <spi_transmit+0x158>
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000916:	d102      	bne.n	800091e <spi_transmit+0x15e>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d107      	bne.n	800092e <spi_transmit+0x16e>
		         {
					error_code = DEV_TIMEOUT;
 800091e:	2303      	movs	r3, #3
 8000920:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2201      	movs	r2, #1
 8000926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					return error_code;
 800092a:	7dfb      	ldrb	r3, [r7, #23]
 800092c:	e062      	b.n	80009f4 <spi_transmit+0x234>
		while(hspi->TxXferCount> 0)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000932:	b29b      	uxth	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1c9      	bne.n	80008cc <spi_transmit+0x10c>
 8000938:	e051      	b.n	80009de <spi_transmit+0x21e>

	}
	/*Transmit data in 8 bit mode*/
	else
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  1))
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <spi_transmit+0x188>
 8000942:	8abb      	ldrh	r3, [r7, #20]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d145      	bne.n	80009d4 <spi_transmit+0x214>
		{
			*((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	330c      	adds	r3, #12
 8000952:	7812      	ldrb	r2, [r2, #0]
 8000954:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr +=sizeof(uint8_t);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
			hspi->TxXferCount--;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000964:	b29b      	uxth	r3, r3
 8000966:	3b01      	subs	r3, #1
 8000968:	b29a      	uxth	r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	865a      	strh	r2, [r3, #50]	; 0x32
		}
		while(hspi->TxXferCount> 0)
 800096e:	e031      	b.n	80009d4 <spi_transmit+0x214>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	2b00      	cmp	r3, #0
 800097c:	d013      	beq.n	80009a6 <spi_transmit+0x1e6>
			{
				*((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	330c      	adds	r3, #12
 8000988:	7812      	ldrb	r2, [r2, #0]
 800098a:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr +=sizeof(uint8_t);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
				hspi->TxXferCount--;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800099a:	b29b      	uxth	r3, r3
 800099c:	3b01      	subs	r3, #1
 800099e:	b29a      	uxth	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	865a      	strh	r2, [r3, #50]	; 0x32
 80009a4:	e016      	b.n	80009d4 <spi_transmit+0x214>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80009a6:	f000 fb1d 	bl	8000fe4 <get_tick>
 80009aa:	4602      	mov	r2, r0
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d803      	bhi.n	80009be <spi_transmit+0x1fe>
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009bc:	d102      	bne.n	80009c4 <spi_transmit+0x204>
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d107      	bne.n	80009d4 <spi_transmit+0x214>
		         {
					error_code = DEV_TIMEOUT;
 80009c4:	2303      	movs	r3, #3
 80009c6:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2201      	movs	r2, #1
 80009cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					return error_code;
 80009d0:	7dfb      	ldrb	r3, [r7, #23]
 80009d2:	e00f      	b.n	80009f4 <spi_transmit+0x234>
		while(hspi->TxXferCount> 0)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80009d8:	b29b      	uxth	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1c8      	bne.n	8000970 <spi_transmit+0x1b0>
		}

	}


	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <spi_transmit+0x22a>
	{
		error_code = DEV_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2201      	movs	r2, #1
 80009ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	return error_code;
 80009f2:	7dfb      	ldrb	r3, [r7, #23]

}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <spi_receive>:

StatusTypeDef spi_receive(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	75fb      	strb	r3, [r7, #23]


	tickstart = get_tick();
 8000a10:	f000 fae8 	bl	8000fe4 <get_tick>
 8000a14:	6138      	str	r0, [r7, #16]

	if((hspi->Init.Mode ==  SPI_MODE_MASTER) && (hspi->Init.Direction  == SPI_DIRECTION_2LINES))
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000a1e:	d10e      	bne.n	8000a3e <spi_receive+0x42>
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10a      	bne.n	8000a3e <spi_receive+0x42>
	{
		hspi->State  ==  SPI_STATE_BUSY_RX;

		/*Call transmit-receive to send dummy data on
		 *  TX line to generate clock on CLK line*/
		return spi_transmit_receive(hspi,p_data,p_data,size,timeout);
 8000a28:	88fa      	ldrh	r2, [r7, #6]
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	68b9      	ldr	r1, [r7, #8]
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f000 f8ca 	bl	8000bce <spi_transmit_receive>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	e0c3      	b.n	8000bc6 <spi_receive+0x1ca>
	}

	if(hspi->State != SPI_STATE_READY)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d007      	beq.n	8000a58 <spi_receive+0x5c>
	{
		error_code = DEV_BUSY;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return error_code;
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	e0b6      	b.n	8000bc6 <spi_receive+0x1ca>
	}

	if((p_data == NULL) || (size  == 0))
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <spi_receive+0x68>
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d107      	bne.n	8000a74 <spi_receive+0x78>
	{
		error_code =  DEV_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return error_code;
 8000a70:	7dfb      	ldrb	r3, [r7, #23]
 8000a72:	e0a8      	b.n	8000bc6 <spi_receive+0x1ca>
	}

	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_RX;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2204      	movs	r2, #4
 8000a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->pRxBuffPtr = (uint8_t *)p_data;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	635a      	str	r2, [r3, #52]	; 0x34
	hspi->RxXferSize =  size;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	88fa      	ldrh	r2, [r7, #6]
 8000a8c:	871a      	strh	r2, [r3, #56]	; 0x38
	hspi->RxXferCount=  size;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	88fa      	ldrh	r2, [r7, #6]
 8000a92:	875a      	strh	r2, [r3, #58]	; 0x3a


	hspi->pTxBuffPtr = (uint8_t *)NULL;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2200      	movs	r2, #0
 8000a98:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi->TxXferSize =  0;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	861a      	strh	r2, [r3, #48]	; 0x30
	hspi->TxXferCount=  0;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	865a      	strh	r2, [r3, #50]	; 0x32

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab0:	2b40      	cmp	r3, #64	; 0x40
 8000ab2:	d007      	beq.n	8000ac4 <spi_receive+0xc8>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ac2:	601a      	str	r2, [r3, #0]
	}

	/*Receive data in 8bit mode*/
	if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d16c      	bne.n	8000ba6 <spi_receive+0x1aa>
	{
		while(hspi->RxXferCount > 0)
 8000acc:	e033      	b.n	8000b36 <spi_receive+0x13a>
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d015      	beq.n	8000b08 <spi_receive+0x10c>
			{
				*((uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f103 020c 	add.w	r2, r3, #12
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae8:	7812      	ldrb	r2, [r2, #0]
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	635a      	str	r2, [r3, #52]	; 0x34
				hspi->RxXferCount--;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	3b01      	subs	r3, #1
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	875a      	strh	r2, [r3, #58]	; 0x3a
 8000b06:	e016      	b.n	8000b36 <spi_receive+0x13a>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000b08:	f000 fa6c 	bl	8000fe4 <get_tick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d803      	bhi.n	8000b20 <spi_receive+0x124>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1e:	d102      	bne.n	8000b26 <spi_receive+0x12a>
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d107      	bne.n	8000b36 <spi_receive+0x13a>
		         {
					error_code = DEV_TIMEOUT;
 8000b26:	2303      	movs	r3, #3
 8000b28:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					return error_code;
 8000b32:	7dfb      	ldrb	r3, [r7, #23]
 8000b34:	e047      	b.n	8000bc6 <spi_receive+0x1ca>
		while(hspi->RxXferCount > 0)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1c6      	bne.n	8000ace <spi_receive+0xd2>
 8000b40:	e036      	b.n	8000bb0 <spi_receive+0x1b4>
	}
	else
	{
		while(hspi->RxXferCount > 0)
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d013      	beq.n	8000b78 <spi_receive+0x17c>
			{
				*((uint16_t *)hspi->pRxBuffPtr) = ( uint16_t)hspi->Instance->DR;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68da      	ldr	r2, [r3, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5a:	b292      	uxth	r2, r2
 8000b5c:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b62:	1c9a      	adds	r2, r3, #2
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	635a      	str	r2, [r3, #52]	; 0x34
				hspi->RxXferCount--;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	875a      	strh	r2, [r3, #58]	; 0x3a
 8000b76:	e016      	b.n	8000ba6 <spi_receive+0x1aa>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000b78:	f000 fa34 	bl	8000fe4 <get_tick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d803      	bhi.n	8000b90 <spi_receive+0x194>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8e:	d102      	bne.n	8000b96 <spi_receive+0x19a>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d107      	bne.n	8000ba6 <spi_receive+0x1aa>
		         {
					error_code = DEV_TIMEOUT;
 8000b96:	2303      	movs	r3, #3
 8000b98:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					return error_code;
 8000ba2:	7dfb      	ldrb	r3, [r7, #23]
 8000ba4:	e00f      	b.n	8000bc6 <spi_receive+0x1ca>
		while(hspi->RxXferCount > 0)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1c8      	bne.n	8000b42 <spi_receive+0x146>
		           }
			}
		}
	}
	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <spi_receive+0x1c0>
	{
		error_code = DEV_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	return error_code;
 8000bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <spi_transmit_receive>:

StatusTypeDef spi_transmit_receive(SPI_HandleTypeDef *hspi,uint8_t *p_tx_data, uint8_t *p_rx_data, uint16_t size,uint32_t timeout)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b08a      	sub	sp, #40	; 0x28
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	807b      	strh	r3, [r7, #2]
	  uint32_t             tmp_mode;
	  SPI_StateTypeDef     tmp_state;
	  uint32_t             tickstart;

	  /* Variable used to alternate Rx and Tx during transfer */
	  uint32_t             txallowed = 1U;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
	  StatusTypeDef        error_code = DEV_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  /* Init tickstart for timeout management*/
	  tickstart = get_tick();
 8000be6:	f000 f9fd 	bl	8000fe4 <get_tick>
 8000bea:	61f8      	str	r0, [r7, #28]

	  /* Init temporary variables */
	  tmp_state           = hspi->State;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bf2:	76fb      	strb	r3, [r7, #27]
	  tmp_mode            = hspi->Init.Mode;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	617b      	str	r3, [r7, #20]
	  initial_tx_count = size;
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	827b      	strh	r3, [r7, #18]

	  /* Set the transaction information */
	  hspi->ErrorCode   = SPI_ERROR_NONE;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2200      	movs	r2, #0
 8000c02:	641a      	str	r2, [r3, #64]	; 0x40
	  hspi->pRxBuffPtr  = (uint8_t *)p_rx_data;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	635a      	str	r2, [r3, #52]	; 0x34
	  hspi->RxXferCount = size;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	887a      	ldrh	r2, [r7, #2]
 8000c0e:	875a      	strh	r2, [r3, #58]	; 0x3a
	  hspi->RxXferSize  = size;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	887a      	ldrh	r2, [r7, #2]
 8000c14:	871a      	strh	r2, [r3, #56]	; 0x38
	  hspi->pTxBuffPtr  = (uint8_t *)p_tx_data;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
	  hspi->TxXferCount = size;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	865a      	strh	r2, [r3, #50]	; 0x32
	  hspi->TxXferSize  = size;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	887a      	ldrh	r2, [r7, #2]
 8000c26:	861a      	strh	r2, [r3, #48]	; 0x30

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c32:	2b40      	cmp	r3, #64	; 0x40
 8000c34:	d007      	beq.n	8000c46 <spi_transmit_receive+0x78>
	  {
	    /* Enable SPI peripheral */
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c44:	601a      	str	r2, [r3, #0]
	  }
	  /* Transmit and Receive data in 16 Bit mode */
	  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c4e:	d17e      	bne.n	8000d4e <spi_transmit_receive+0x180>
	  {
		   if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <spi_transmit_receive+0x90>
 8000c58:	8a7b      	ldrh	r3, [r7, #18]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d16c      	bne.n	8000d38 <spi_transmit_receive+0x16a>
		    {
		      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c62:	881a      	ldrh	r2, [r3, #0]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60da      	str	r2, [r3, #12]
		      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6e:	1c9a      	adds	r2, r3, #2
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
		      hspi->TxXferCount--;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	865a      	strh	r2, [r3, #50]	; 0x32
		    }

		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000c82:	e059      	b.n	8000d38 <spi_transmit_receive+0x16a>
		    {
		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d01b      	beq.n	8000cca <spi_transmit_receive+0xfc>
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d016      	beq.n	8000cca <spi_transmit_receive+0xfc>
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d113      	bne.n	8000cca <spi_transmit_receive+0xfc>
		        {
		          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca6:	881a      	ldrh	r2, [r3, #0]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	60da      	str	r2, [r3, #12]
		          hspi->pTxBuffPtr += sizeof(uint16_t);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb2:	1c9a      	adds	r2, r3, #2
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
		          hspi->TxXferCount--;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	865a      	strh	r2, [r3, #50]	; 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24

		        }

		        /* Check RXNE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d019      	beq.n	8000d0c <spi_transmit_receive+0x13e>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d014      	beq.n	8000d0c <spi_transmit_receive+0x13e>
		        {
		          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cec:	b292      	uxth	r2, r2
 8000cee:	801a      	strh	r2, [r3, #0]
		          hspi->pRxBuffPtr += sizeof(uint16_t);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf4:	1c9a      	adds	r2, r3, #2
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
		          hspi->RxXferCount--;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	3b01      	subs	r3, #1
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	875a      	strh	r2, [r3, #58]	; 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
		        }

		        if (((get_tick() - tickstart) >=  timeout) && (timeout != MAX_DELAY))
 8000d0c:	f000 f96a 	bl	8000fe4 <get_tick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d80d      	bhi.n	8000d38 <spi_transmit_receive+0x16a>
 8000d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d22:	d009      	beq.n	8000d38 <spi_transmit_receive+0x16a>
		        {
		  			error_code = DEV_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		  			hspi->State = SPI_STATE_READY;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		  			return error_code;
 8000d32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d36:	e08f      	b.n	8000e58 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1a0      	bne.n	8000c84 <spi_transmit_receive+0xb6>
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d19b      	bne.n	8000c84 <spi_transmit_receive+0xb6>
 8000d4c:	e082      	b.n	8000e54 <spi_transmit_receive+0x286>
	  }

	  /* Transmit and Receive data in 8 Bit mode */
	  else
	  {
		    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <spi_transmit_receive+0x18e>
 8000d56:	8a7b      	ldrh	r3, [r7, #18]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d171      	bne.n	8000e40 <spi_transmit_receive+0x272>
		    {
		      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	330c      	adds	r3, #12
 8000d66:	7812      	ldrb	r2, [r2, #0]
 8000d68:	701a      	strb	r2, [r3, #0]
		      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c
		      hspi->TxXferCount--;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	865a      	strh	r2, [r3, #50]	; 0x32
		    }
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d82:	e05d      	b.n	8000e40 <spi_transmit_receive+0x272>
		      {

		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d01c      	beq.n	8000dcc <spi_transmit_receive+0x1fe>
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d017      	beq.n	8000dcc <spi_transmit_receive+0x1fe>
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d114      	bne.n	8000dcc <spi_transmit_receive+0x1fe>
		        {
		          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	330c      	adds	r3, #12
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	701a      	strb	r2, [r3, #0]
		          hspi->pTxBuffPtr++;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
		          hspi->TxXferCount--;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	865a      	strh	r2, [r3, #50]	; 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24

		      }

		        /* Wait until RXNE flag is reset */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d019      	beq.n	8000e0e <spi_transmit_receive+0x240>
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d014      	beq.n	8000e0e <spi_transmit_receive+0x240>
		        {
		          (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	701a      	strb	r2, [r3, #0]
		          hspi->pRxBuffPtr++;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	635a      	str	r2, [r3, #52]	; 0x34
		          hspi->RxXferCount--;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	3b01      	subs	r3, #1
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	875a      	strh	r2, [r3, #58]	; 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
		        }
		        if ((((get_tick() - tickstart) >=  timeout) && ((timeout != MAX_DELAY))) || (timeout == 0U))
 8000e0e:	f000 f8e9 	bl	8000fe4 <get_tick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d803      	bhi.n	8000e26 <spi_transmit_receive+0x258>
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d102      	bne.n	8000e2c <spi_transmit_receive+0x25e>
 8000e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d109      	bne.n	8000e40 <spi_transmit_receive+0x272>
		        {
		  			error_code = DEV_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		  			hspi->State = SPI_STATE_READY;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2201      	movs	r2, #1
 8000e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		  			return error_code;
 8000e3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e3e:	e00b      	b.n	8000e58 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d19c      	bne.n	8000d84 <spi_transmit_receive+0x1b6>
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d197      	bne.n	8000d84 <spi_transmit_receive+0x1b6>
		        }
		      }
	  }
		    return error_code;
 8000e54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3728      	adds	r7, #40	; 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	e00a      	b.n	8000e88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e72:	f3af 8000 	nop.w
 8000e76:	4601      	mov	r1, r0
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	60ba      	str	r2, [r7, #8]
 8000e7e:	b2ca      	uxtb	r2, r1
 8000e80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3301      	adds	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	dbf0      	blt.n	8000e72 <_read+0x12>
	}

return len;
 8000e90:	687b      	ldr	r3, [r7, #4]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	e009      	b.n	8000ec0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	60ba      	str	r2, [r7, #8]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 f8e3 	bl	8001080 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	dbf1      	blt.n	8000eac <_write+0x12>
	}
	return len;
 8000ec8:	687b      	ldr	r3, [r7, #4]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <_close>:

int _close(int file)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
	return -1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000efa:	605a      	str	r2, [r3, #4]
	return 0;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <_isatty>:

int _isatty(int file)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
	return 1;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f000 fbb8 	bl	80016e0 <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	220c      	movs	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20020000 	.word	0x20020000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	20000080 	.word	0x20000080
 8000fa4:	20000108 	.word	0x20000108

08000fa8 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 8000fb0:	f000 f818 	bl	8000fe4 <get_tick>
 8000fb4:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d002      	beq.n	8000fc8 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8000fc8:	bf00      	nop
 8000fca:	f000 f80b 	bl	8000fe4 <get_tick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d8f7      	bhi.n	8000fca <delay+0x22>

}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <get_tick>:

uint32_t get_tick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <get_tick+0x24>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a06      	ldr	r2, [pc, #24]	; (800100c <get_tick+0x28>)
 8000ff2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000ff4:	b662      	cpsie	i
}
 8000ff6:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <get_tick+0x28>)
 8000ffa:	681b      	ldr	r3, [r3, #0]

}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200000b0 	.word	0x200000b0
 800100c:	200000ac 	.word	0x200000ac

08001010 <tick_increment>:
static void tick_increment(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <tick_increment+0x18>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a03      	ldr	r2, [pc, #12]	; (8001028 <tick_increment+0x18>)
 800101c:	6013      	str	r3, [r2, #0]
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	200000b0 	.word	0x200000b0

0800102c <timebase_init>:
void timebase_init(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per millisecond*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <timebase_init+0x44>)
 8001036:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800103a:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <timebase_init+0x44>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <timebase_init+0x44>)
 8001044:	2204      	movs	r2, #4
 8001046:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <timebase_init+0x44>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a08      	ldr	r2, [pc, #32]	; (8001070 <timebase_init+0x44>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <timebase_init+0x44>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a05      	ldr	r2, [pc, #20]	; (8001070 <timebase_init+0x44>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001060:	b662      	cpsie	i
}
 8001062:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	tick_increment();
 8001078:	f7ff ffca 	bl	8001010 <tick_increment>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f84f 	bl	800112c <uart_write>
	return ch;
 800108e:	687b      	ldr	r3, [r7, #4]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <debug_uart_init>:

void debug_uart_init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <debug_uart_init+0x84>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a1e      	ldr	r2, [pc, #120]	; (800111c <debug_uart_init+0x84>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <debug_uart_init+0x88>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1c      	ldr	r2, [pc, #112]	; (8001120 <debug_uart_init+0x88>)
 80010ae:	f023 0310 	bic.w	r3, r3, #16
 80010b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <debug_uart_init+0x88>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <debug_uart_init+0x88>)
 80010ba:	f043 0320 	orr.w	r3, r3, #32
 80010be:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <debug_uart_init+0x88>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4a16      	ldr	r2, [pc, #88]	; (8001120 <debug_uart_init+0x88>)
 80010c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <debug_uart_init+0x88>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4a13      	ldr	r2, [pc, #76]	; (8001120 <debug_uart_init+0x88>)
 80010d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <debug_uart_init+0x88>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	4a10      	ldr	r2, [pc, #64]	; (8001120 <debug_uart_init+0x88>)
 80010de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <debug_uart_init+0x88>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <debug_uart_init+0x88>)
 80010ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010ee:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <debug_uart_init+0x84>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a09      	ldr	r2, [pc, #36]	; (800111c <debug_uart_init+0x84>)
 80010f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 80010fc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001100:	4808      	ldr	r0, [pc, #32]	; (8001124 <debug_uart_init+0x8c>)
 8001102:	f000 f83f 	bl	8001184 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <debug_uart_init+0x90>)
 8001108:	2208      	movs	r2, #8
 800110a:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <debug_uart_init+0x90>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	4a05      	ldr	r2, [pc, #20]	; (8001128 <debug_uart_init+0x90>)
 8001112:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000
 8001124:	00f42400 	.word	0x00f42400
 8001128:	40004400 	.word	0x40004400

0800112c <uart_write>:



static void uart_write(int ch)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8001134:	bf00      	nop
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <uart_write+0x2c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0f9      	beq.n	8001136 <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <uart_write+0x2c>)
 8001146:	b2db      	uxtb	r3, r3
 8001148:	6053      	str	r3, [r2, #4]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40004400 	.word	0x40004400

0800115c <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	085a      	lsrs	r2, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	441a      	add	r2, r3
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	fbb2 f3f3 	udiv	r3, r2, r3
 8001174:	b29b      	uxth	r3, r3
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 800118e:	6839      	ldr	r1, [r7, #0]
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ffe3 	bl	800115c <compute_uart_bd>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <uart_set_baudrate+0x24>)
 800119c:	609a      	str	r2, [r3, #8]
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40004400 	.word	0x40004400

080011ac <w25qxx_spi_init>:

static W25QXX_Status_t w25qxx_write_enable(W25QXX_t *w25qxx);
static bool test_data_integrity(uint8_t test_byte, uint8_t *buf, uint32_t len);

 void w25qxx_spi_init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <w25qxx_spi_init+0x50>)
 80011b2:	4a13      	ldr	r2, [pc, #76]	; (8001200 <w25qxx_spi_init+0x54>)
 80011b4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <w25qxx_spi_init+0x50>)
 80011b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011bc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <w25qxx_spi_init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <w25qxx_spi_init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <w25qxx_spi_init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <w25qxx_spi_init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS =  SPI_NSS_SOFT;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <w25qxx_spi_init+0x50>)
 80011d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011dc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BuadRatePrescaler =   SPI_BAUDRATEPRESCALER_2;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <w25qxx_spi_init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <w25qxx_spi_init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <w25qxx_spi_init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28


	/*Initialize spi*/
	spi_init(&hspi1);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <w25qxx_spi_init+0x50>)
 80011f2:	f7ff fa7d 	bl	80006f0 <spi_init>


}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200000b4 	.word	0x200000b4
 8001200:	40013000 	.word	0x40013000

08001204 <w25qxx_cs_pin_init>:

 /*CS :PA4*/
 void w25qxx_cs_pin_init(void)
 {
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

	 /*Enable clock access to GPIOA*/
	 RCC->AHB1ENR |=GPIOAEN;
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <w25qxx_cs_pin_init+0x34>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <w25qxx_cs_pin_init+0x34>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6313      	str	r3, [r2, #48]	; 0x30

	 /*Set PA4 as output pin*/
	 GPIOA->MODER |=(1U<<8);
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <w25qxx_cs_pin_init+0x38>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a08      	ldr	r2, [pc, #32]	; (800123c <w25qxx_cs_pin_init+0x38>)
 800121a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121e:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER &=~(1U<<9);
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <w25qxx_cs_pin_init+0x38>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a05      	ldr	r2, [pc, #20]	; (800123c <w25qxx_cs_pin_init+0x38>)
 8001226:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
 }
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000

08001240 <w25qxx_cs_on>:


 /*Enable CS pin by driving it low*/
 static void w25qxx_cs_on(void)
 {
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
	 GPIOA->ODR  &=~CS_PIN;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <w25qxx_cs_on+0x1c>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <w25qxx_cs_on+0x1c>)
 800124a:	f023 0310 	bic.w	r3, r3, #16
 800124e:	6153      	str	r3, [r2, #20]
 }
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40020000 	.word	0x40020000

08001260 <w25qxx_cs_off>:
 /*Disable CS pin by driving high*/

 static void w25qxx_cs_off(void)
 {
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	 GPIOA->ODR  |=CS_PIN;
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <w25qxx_cs_off+0x1c>)
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <w25qxx_cs_off+0x1c>)
 800126a:	f043 0310 	orr.w	r3, r3, #16
 800126e:	6153      	str	r3, [r2, #20]
 }
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40020000 	.word	0x40020000

08001280 <w25qxx_transmit>:


 /*Transmit*/
 W25QXX_Status_t w25qxx_transmit(W25QXX_t *w25qxx, uint8_t * buf, uint32_t len)
 {
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
	 W25QXX_Status_t ret =  W25QXX_DEV_ERR;
 800128c:	2301      	movs	r3, #1
 800128e:	75fb      	strb	r3, [r7, #23]

	 if(spi_transmit(w25qxx->w25qxx_spi_handle_t, buf,len, MAX_DELAY) == DEV_OK)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6998      	ldr	r0, [r3, #24]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	b29a      	uxth	r2, r3
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	f7ff fa8f 	bl	80007c0 <spi_transmit>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <w25qxx_transmit+0x2c>
	 {
		 ret = W25QXX_DEV_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	75fb      	strb	r3, [r7, #23]
	 }

	 return ret;
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 }
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <w25qxx_receive>:

 /*Receive*/
 W25QXX_Status_t w25qxx_receive(W25QXX_t *w25qxx, uint8_t * buf, uint32_t len)
 {
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
	 W25QXX_Status_t ret =  W25QXX_DEV_ERR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	75fb      	strb	r3, [r7, #23]

	 if(spi_receive(w25qxx->w25qxx_spi_handle_t, buf,len, MAX_DELAY) == DEV_OK)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6998      	ldr	r0, [r3, #24]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	f7ff fb92 	bl	80009fc <spi_receive>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <w25qxx_receive+0x2c>
	 {
		 ret = W25QXX_DEV_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	75fb      	strb	r3, [r7, #23]
	 }
	 return ret;
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 }
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <w25qxx_read_id>:


 uint32_t w25qxx_read_id(W25QXX_t *w25qxx)
 {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	 uint32_t ret = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]

	 uint8_t temp_buff[3];

	 /*Enable CS pin*/
	 w25qxx_cs_on();
 80012f8:	f7ff ffa2 	bl	8001240 <w25qxx_cs_on>

	 /*Place command in temp buffer*/
	 temp_buff[0] = W25QXX_JEDEC_ID;
 80012fc:	239f      	movs	r3, #159	; 0x9f
 80012fe:	723b      	strb	r3, [r7, #8]

	 if(w25qxx_transmit(w25qxx, temp_buff, 1) == W25QXX_DEV_OK)
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	2201      	movs	r2, #1
 8001306:	4619      	mov	r1, r3
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ffb9 	bl	8001280 <w25qxx_transmit>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d111      	bne.n	8001338 <w25qxx_read_id+0x4c>
	 {
		 if(w25qxx_receive(w25qxx,temp_buff,3) == W25QXX_DEV_OK)
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2203      	movs	r2, #3
 800131a:	4619      	mov	r1, r3
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ffca 	bl	80012b6 <w25qxx_receive>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d107      	bne.n	8001338 <w25qxx_read_id+0x4c>
		 {
			 /*Store received data in return value*/
			 ret  =  ((temp_buff[0] << 16) | (temp_buff[1] << 8) |(temp_buff[2]));
 8001328:	7a3b      	ldrb	r3, [r7, #8]
 800132a:	041a      	lsls	r2, r3, #16
 800132c:	7a7b      	ldrb	r3, [r7, #9]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	4313      	orrs	r3, r2
 8001332:	7aba      	ldrb	r2, [r7, #10]
 8001334:	4313      	orrs	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
		 }
	 }

	 /*Disable CS pin*/
	 w25qxx_cs_off();
 8001338:	f7ff ff92 	bl	8001260 <w25qxx_cs_off>

	 return ret;
 800133c:	68fb      	ldr	r3, [r7, #12]

 }
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <w25qxx_init>:

 W25QXX_Status_t w25qxx_init(W25QXX_t *w25qxx,SPI_HandleTypeDef *hspi)
 {
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	 uint32_t id;

	 W25QXX_Status_t ret =  W25QXX_DEV_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
	 w25qxx->w25qxx_spi_handle_t =  hspi;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	619a      	str	r2, [r3, #24]

	 /*Disable CS pin*/
	 w25qxx_cs_off();
 800135a:	f7ff ff81 	bl	8001260 <w25qxx_cs_off>

	 /*Get id*/
	 id  = w25qxx_read_id(w25qxx);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffc4 	bl	80012ec <w25qxx_read_id>
 8001364:	60b8      	str	r0, [r7, #8]

	 if(id)
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d01b      	beq.n	80013a4 <w25qxx_init+0x5e>
	 {
		 w25qxx->w25qxx_manuf_id  =  (uint8_t)(id >> 16);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	0c1b      	lsrs	r3, r3, #16
 8001370:	b2da      	uxtb	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	701a      	strb	r2, [r3, #0]
		 w25qxx->w25qxx_dev_id    =  (uint16_t) (id & 0xFFFF);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	b29a      	uxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	805a      	strh	r2, [r3, #2]
		 w25qxx->w25qxx_blk_sz    =  0x10000;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001384:	605a      	str	r2, [r3, #4]
		 w25qxx->w25qxx_sect_sz   =  0x1000;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800138c:	60da      	str	r2, [r3, #12]
		 w25qxx->w25qxx_sect_in_blk = 0x10;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2210      	movs	r2, #16
 8001392:	611a      	str	r2, [r3, #16]
		 w25qxx->w25qxx_pg_sz       = 0x100;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800139a:	615a      	str	r2, [r3, #20]
		 w25qxx->w25qxx_blk_cnt    =  0x40;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2240      	movs	r2, #64	; 0x40
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	e001      	b.n	80013a8 <w25qxx_init+0x62>
	 }

	 else
	 {
		 ret = W25QXX_DEV_ERR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
	 }

	 return ret;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 }
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <w25qxx_get_status>:

 uint8_t w25qxx_get_status(W25QXX_t *w25qxx)
 {
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
	 uint8_t ret = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]

	 uint8_t temp_buff =  W25QXX_READ_STATUS_REG_1;
 80013be:	2305      	movs	r3, #5
 80013c0:	73bb      	strb	r3, [r7, #14]


	 /*Enable CS pin*/
	 w25qxx_cs_on();
 80013c2:	f7ff ff3d 	bl	8001240 <w25qxx_cs_on>

	 if(w25qxx_transmit(w25qxx, &temp_buff,1) ==  W25QXX_DEV_OK)
 80013c6:	f107 030e 	add.w	r3, r7, #14
 80013ca:	2201      	movs	r2, #1
 80013cc:	4619      	mov	r1, r3
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ff56 	bl	8001280 <w25qxx_transmit>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10b      	bne.n	80013f2 <w25qxx_get_status+0x40>
	 {
		 /*Receive status from chip*/
		 if(w25qxx_receive(w25qxx,&temp_buff,1) == W25QXX_DEV_OK )
 80013da:	f107 030e 	add.w	r3, r7, #14
 80013de:	2201      	movs	r2, #1
 80013e0:	4619      	mov	r1, r3
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff67 	bl	80012b6 <w25qxx_receive>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <w25qxx_get_status+0x40>
		 {
			 ret  =  temp_buff;
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	73fb      	strb	r3, [r7, #15]
		 }
	 }
	 /*Disable CS pin*/
	 w25qxx_cs_off();
 80013f2:	f7ff ff35 	bl	8001260 <w25qxx_cs_off>

	 return ret;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]

 }
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <w25qxx_wait_for_ready>:


 W25QXX_Status_t w25qxx_wait_for_ready(W25QXX_t *w25qxx, uint32_t timeout)
 {
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	 W25QXX_Status_t ret  =  W25QXX_DEV_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	75fb      	strb	r3, [r7, #23]

	 uint32_t prev_time =  get_tick();
 800140e:	f7ff fde9 	bl	8000fe4 <get_tick>
 8001412:	60f8      	str	r0, [r7, #12]
	 uint32_t curr_time  =  get_tick();
 8001414:	f7ff fde6 	bl	8000fe4 <get_tick>
 8001418:	6138      	str	r0, [r7, #16]

	 while((curr_time -  prev_time  <=  timeout) && (w25qxx_get_status(w25qxx) && 0x01  == 0x01))
 800141a:	e002      	b.n	8001422 <w25qxx_wait_for_ready+0x22>
	 {
		 curr_time  =  get_tick();
 800141c:	f7ff fde2 	bl	8000fe4 <get_tick>
 8001420:	6138      	str	r0, [r7, #16]
	 while((curr_time -  prev_time  <=  timeout) && (w25qxx_get_status(w25qxx) && 0x01  == 0x01))
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d305      	bcc.n	800143a <w25qxx_wait_for_ready+0x3a>
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffbf 	bl	80013b2 <w25qxx_get_status>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <w25qxx_wait_for_ready+0x1c>

	 }

	 if(curr_time -  prev_time  ==  timeout)
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d101      	bne.n	800144a <w25qxx_wait_for_ready+0x4a>
	 {
		 ret =  W25QXX_DEV_TIMEOUT;
 8001446:	2302      	movs	r3, #2
 8001448:	75fb      	strb	r3, [r7, #23]
	 }

	 return ret;
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 }
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <w25qxx_write>:

 W25QXX_Status_t w25qxx_write(W25QXX_t *w25qxx, uint32_t address, uint8_t *buf, uint32_t len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08c      	sub	sp, #48	; 0x30
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
#ifdef VERBOSE_DEBUG
	printf("DEBUG : Write()  - Address 0x%08lx Length 0x%04lx\n\r", address, len);
#endif
	 /*Determine first and last pages that will be written to*/
	  uint32_t first_page = address / w25qxx->w25qxx_pg_sz;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	fbb2 f3f3 	udiv	r3, r2, r3
 800146c:	623b      	str	r3, [r7, #32]
	  uint32_t last_page = (address + len - 1) / w25qxx->w25qxx_pg_sz;
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4413      	add	r3, r2
 8001474:	1e5a      	subs	r2, r3, #1
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	fbb2 f3f3 	udiv	r3, r2, r3
 800147e:	61fb      	str	r3, [r7, #28]
	  /*Print the number of pages that will be written to*/
    printf("DEBUG : Write() %lu Pages from %lu to %lu\n\r", 1 + last_page - first_page, first_page, last_page);
#endif

    /*Initialize buffer offset and start address*/
    uint32_t buffer_offset = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t start_address = address;
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28


    /*Loop through each page to be written to*/

    for(uint32_t page =  first_page; page <= last_page; ++page)
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
 800148c:	e054      	b.n	8001538 <w25qxx_write+0xe4>
    {

    	/*Calculate end address of the current page*/
        uint32_t end_address = page < last_page ? start_address + w25qxx->w25qxx_pg_sz : address + len;
 800148e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	429a      	cmp	r2, r3
 8001494:	d204      	bcs.n	80014a0 <w25qxx_write+0x4c>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	4413      	add	r3, r2
 800149e:	e002      	b.n	80014a6 <w25qxx_write+0x52>
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        uint32_t write_len = end_address - start_address;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	617b      	str	r3, [r7, #20]
        printf("DEBUG : Write()  Page %lu Start Address = 0x%08lx End Address = 0x%08lx buffer_offset = 0x%08lx len = %04lx\n\r",
                page, start_address, end_address, buffer_offset, write_len);
#endif

         /*Wait for the device to be ready*/
        if (w25qxx_wait_for_ready(w25qxx,MAX_DELAY) != W25QXX_DEV_OK) {
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f7ff ffa3 	bl	8001400 <w25qxx_wait_for_ready>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <w25qxx_write+0x70>

        	// Return error if device is not ready
            return W25QXX_DEV_ERR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e03e      	b.n	8001542 <w25qxx_write+0xee>
        }
        /*Enable writing to the device*/
        if(w25qxx_write_enable(w25qxx) == W25QXX_DEV_OK)
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f000 f840 	bl	800154a <w25qxx_write_enable>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d126      	bne.n	800151e <w25qxx_write+0xca>
        {
        	/*Prep the write command*/
        	uint8_t tx[4] =  { W25QXX_PAGE_PROGRAM,
 80014d0:	2302      	movs	r3, #2
 80014d2:	743b      	strb	r3, [r7, #16]
        					   (uint8_t)(start_address >>16),
 80014d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d6:	0c1b      	lsrs	r3, r3, #16
 80014d8:	b2db      	uxtb	r3, r3
        	uint8_t tx[4] =  { W25QXX_PAGE_PROGRAM,
 80014da:	747b      	strb	r3, [r7, #17]
							   (uint8_t)(start_address >>8),
 80014dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	b2db      	uxtb	r3, r3
        	uint8_t tx[4] =  { W25QXX_PAGE_PROGRAM,
 80014e2:	74bb      	strb	r3, [r7, #18]
							   (uint8_t)start_address
 80014e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e6:	b2db      	uxtb	r3, r3
        	uint8_t tx[4] =  { W25QXX_PAGE_PROGRAM,
 80014e8:	74fb      	strb	r3, [r7, #19]
        					 };

       	 /*Enable CS pin*/
       	 w25qxx_cs_on();
 80014ea:	f7ff fea9 	bl	8001240 <w25qxx_cs_on>

       	 /*Transmit adrress and write command*/
       	 if(w25qxx_transmit(w25qxx,tx,4) == W25QXX_DEV_OK )
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	2204      	movs	r2, #4
 80014f4:	4619      	mov	r1, r3
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff fec2 	bl	8001280 <w25qxx_transmit>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10b      	bne.n	800151a <w25qxx_write+0xc6>
       	 {
       		 /*Transmit data*/
       		 if(w25qxx_transmit(w25qxx,buf,write_len) != W25QXX_DEV_OK )
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f7ff feba 	bl	8001280 <w25qxx_transmit>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <w25qxx_write+0xc6>
       		 {

       	       	 /*Disable CS pin*/
       	       	 w25qxx_cs_off();
 8001512:	f7ff fea5 	bl	8001260 <w25qxx_cs_off>

       	       	 return W25QXX_DEV_ERR;
 8001516:	2301      	movs	r3, #1
 8001518:	e013      	b.n	8001542 <w25qxx_write+0xee>


       	 }

     	 /*Disable CS pin*/
          w25qxx_cs_off();
 800151a:	f7ff fea1 	bl	8001260 <w25qxx_cs_off>
        }

        start_address += w25qxx->w25qxx_pg_sz;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001524:	4413      	add	r3, r2
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
        buffer_offset += w25qxx->w25qxx_pg_sz;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800152e:	4413      	add	r3, r2
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
    for(uint32_t page =  first_page; page <= last_page; ++page)
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	3301      	adds	r3, #1
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
 8001538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	429a      	cmp	r2, r3
 800153e:	d9a6      	bls.n	800148e <w25qxx_write+0x3a>
    }


        return W25QXX_DEV_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3730      	adds	r7, #48	; 0x30
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <w25qxx_write_enable>:

 static W25QXX_Status_t w25qxx_write_enable(W25QXX_t *w25qxx)
 {
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	 W25QXX_Status_t ret =  W25QXX_DEV_ERR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
	 uint8_t temp_buff[1];

	 /*Enable CS pin*/
	 w25qxx_cs_on();
 8001556:	f7ff fe73 	bl	8001240 <w25qxx_cs_on>

	 temp_buff[0]  = W25QXX_WRITE_EN;
 800155a:	2306      	movs	r3, #6
 800155c:	733b      	strb	r3, [r7, #12]

	 if(w25qxx_transmit(w25qxx, temp_buff,1) ==  W25QXX_DEV_OK)
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2201      	movs	r2, #1
 8001564:	4619      	mov	r1, r3
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff fe8a 	bl	8001280 <w25qxx_transmit>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <w25qxx_write_enable+0x2c>
	 {
		 ret =  W25QXX_DEV_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
	 }

	 /*Disable CS pin*/
	 w25qxx_cs_off();
 8001576:	f7ff fe73 	bl	8001260 <w25qxx_cs_off>

	 return ret;
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 }
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <w25qxx_read>:

 W25QXX_Status_t w25qxx_read(W25QXX_t *w25qxx, uint32_t address, uint8_t *buf, uint32_t len)
 {
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	603b      	str	r3, [r7, #0]
    	uint8_t tx[4] =  { W25QXX_READ_DATA,
 8001592:	2303      	movs	r3, #3
 8001594:	753b      	strb	r3, [r7, #20]
     					   (uint8_t)(address >>16),
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	0c1b      	lsrs	r3, r3, #16
 800159a:	b2db      	uxtb	r3, r3
    	uint8_t tx[4] =  { W25QXX_READ_DATA,
 800159c:	757b      	strb	r3, [r7, #21]
							(uint8_t)(address >>8),
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	b2db      	uxtb	r3, r3
    	uint8_t tx[4] =  { W25QXX_READ_DATA,
 80015a4:	75bb      	strb	r3, [r7, #22]
							 (uint8_t)address
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	b2db      	uxtb	r3, r3
    	uint8_t tx[4] =  { W25QXX_READ_DATA,
 80015aa:	75fb      	strb	r3, [r7, #23]
     					 };

        /*Wait for the device to be ready*/
         if (w25qxx_wait_for_ready(w25qxx,MAX_DELAY) != W25QXX_DEV_OK) {
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f7ff ff25 	bl	8001400 <w25qxx_wait_for_ready>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <w25qxx_read+0x3c>

         	// Return error if device is not ready
             return W25QXX_DEV_ERR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e01a      	b.n	80015f6 <w25qxx_read+0x72>
         }


    	 /*Enable CS pin*/
    	 w25qxx_cs_on();
 80015c0:	f7ff fe3e 	bl	8001240 <w25qxx_cs_on>

       	 /*Transmit adrress and write command*/
       	 if(w25qxx_transmit(w25qxx,tx,4) == W25QXX_DEV_OK )
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2204      	movs	r2, #4
 80015ca:	4619      	mov	r1, r3
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f7ff fe57 	bl	8001280 <w25qxx_transmit>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10b      	bne.n	80015f0 <w25qxx_read+0x6c>
       	 {
       		 /*Receive data*/
       		 if(w25qxx_receive(w25qxx,buf,len) != W25QXX_DEV_OK )
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f7ff fe6a 	bl	80012b6 <w25qxx_receive>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <w25qxx_read+0x6c>
       		 {

       	       	 /*Disable CS pin*/
       	       	 w25qxx_cs_off();
 80015e8:	f7ff fe3a 	bl	8001260 <w25qxx_cs_off>

       	       	 return W25QXX_DEV_ERR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e002      	b.n	80015f6 <w25qxx_read+0x72>
       		 }
       	 }
	       	 /*Disable CS pin*/
   	       	 w25qxx_cs_off();
 80015f0:	f7ff fe36 	bl	8001260 <w25qxx_cs_off>

   	       	 return W25QXX_DEV_OK;
 80015f4:	2300      	movs	r3, #0
 }
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <w25qxx_get_mem_info>:
	 }

	 return ret;
 }
 void w25qxx_get_mem_info(W25QXX_t w25qxx)
 {
 8001600:	b084      	sub	sp, #16
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
 8001606:	f107 0c08 	add.w	ip, r7, #8
 800160a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		printf("TOTAL SIZE(in KB)  = 0x%04lx (%lu)\n\r", (w25qxx.w25qxx_blk_cnt * w25qxx.w25qxx_blk_sz)\
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	0a99      	lsrs	r1, r3, #10
									    / 1024, (w25qxx.w25qxx_blk_cnt * w25qxx.w25qxx_blk_sz) / 1024);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	fb02 f303 	mul.w	r3, r2, r3
		printf("TOTAL SIZE(in KB)  = 0x%04lx (%lu)\n\r", (w25qxx.w25qxx_blk_cnt * w25qxx.w25qxx_blk_sz)\
 8001620:	0a9b      	lsrs	r3, r3, #10
 8001622:	461a      	mov	r2, r3
 8001624:	4813      	ldr	r0, [pc, #76]	; (8001674 <w25qxx_get_mem_info+0x74>)
 8001626:	f000 f88d 	bl	8001744 <iprintf>

		printf("BLOCK SIZE         = 0x%04lx (%lu)\n\r", w25qxx.w25qxx_blk_sz, w25qxx.w25qxx_blk_sz);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4619      	mov	r1, r3
 8001630:	4811      	ldr	r0, [pc, #68]	; (8001678 <w25qxx_get_mem_info+0x78>)
 8001632:	f000 f887 	bl	8001744 <iprintf>
		printf("BLOCK COUNT        = 0x%04lx (%lu)\n\r", w25qxx.w25qxx_blk_cnt, w25qxx.w25qxx_blk_cnt);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4619      	mov	r1, r3
 800163c:	480f      	ldr	r0, [pc, #60]	; (800167c <w25qxx_get_mem_info+0x7c>)
 800163e:	f000 f881 	bl	8001744 <iprintf>
		printf("SECTOR SIZE        = 0x%04lx (%lu)\n\r", w25qxx.w25qxx_sect_sz, w25qxx.w25qxx_sect_sz);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	4619      	mov	r1, r3
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <w25qxx_get_mem_info+0x80>)
 800164a:	f000 f87b 	bl	8001744 <iprintf>
		printf("SECTORS PER BLOCK  = 0x%04lx (%lu)\n\r", w25qxx.w25qxx_sect_in_blk, w25qxx.w25qxx_sect_in_blk);
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4619      	mov	r1, r3
 8001654:	480b      	ldr	r0, [pc, #44]	; (8001684 <w25qxx_get_mem_info+0x84>)
 8001656:	f000 f875 	bl	8001744 <iprintf>
		printf("PAGE SIZE          = 0x%04lx (%lu)\n\r", w25qxx.w25qxx_pg_sz, w25qxx.w25qxx_pg_sz);
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	4619      	mov	r1, r3
 8001660:	4809      	ldr	r0, [pc, #36]	; (8001688 <w25qxx_get_mem_info+0x88>)
 8001662:	f000 f86f 	bl	8001744 <iprintf>
 }
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800166e:	b004      	add	sp, #16
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	080028cc 	.word	0x080028cc
 8001678:	080028f4 	.word	0x080028f4
 800167c:	0800291c 	.word	0x0800291c
 8001680:	08002944 	.word	0x08002944
 8001684:	0800296c 	.word	0x0800296c
 8001688:	08002994 	.word	0x08002994

0800168c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800168e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001690:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001696:	490d      	ldr	r1, [pc, #52]	; (80016cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <LoopForever+0xe>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016ac:	4c0a      	ldr	r4, [pc, #40]	; (80016d8 <LoopForever+0x16>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016ba:	f000 f817 	bl	80016ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016be:	f7fe fe09 	bl	80002d4 <main>

080016c2 <LoopForever>:

LoopForever:
    b LoopForever
 80016c2:	e7fe      	b.n	80016c2 <LoopForever>
  ldr   r0, =_estack
 80016c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80016d0:	08002a5c 	.word	0x08002a5c
  ldr r2, =_sbss
 80016d4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80016d8:	20000108 	.word	0x20000108

080016dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC_IRQHandler>
	...

080016e0 <__errno>:
 80016e0:	4b01      	ldr	r3, [pc, #4]	; (80016e8 <__errno+0x8>)
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000000 	.word	0x20000000

080016ec <__libc_init_array>:
 80016ec:	b570      	push	{r4, r5, r6, lr}
 80016ee:	4d0d      	ldr	r5, [pc, #52]	; (8001724 <__libc_init_array+0x38>)
 80016f0:	4c0d      	ldr	r4, [pc, #52]	; (8001728 <__libc_init_array+0x3c>)
 80016f2:	1b64      	subs	r4, r4, r5
 80016f4:	10a4      	asrs	r4, r4, #2
 80016f6:	2600      	movs	r6, #0
 80016f8:	42a6      	cmp	r6, r4
 80016fa:	d109      	bne.n	8001710 <__libc_init_array+0x24>
 80016fc:	4d0b      	ldr	r5, [pc, #44]	; (800172c <__libc_init_array+0x40>)
 80016fe:	4c0c      	ldr	r4, [pc, #48]	; (8001730 <__libc_init_array+0x44>)
 8001700:	f001 f84a 	bl	8002798 <_init>
 8001704:	1b64      	subs	r4, r4, r5
 8001706:	10a4      	asrs	r4, r4, #2
 8001708:	2600      	movs	r6, #0
 800170a:	42a6      	cmp	r6, r4
 800170c:	d105      	bne.n	800171a <__libc_init_array+0x2e>
 800170e:	bd70      	pop	{r4, r5, r6, pc}
 8001710:	f855 3b04 	ldr.w	r3, [r5], #4
 8001714:	4798      	blx	r3
 8001716:	3601      	adds	r6, #1
 8001718:	e7ee      	b.n	80016f8 <__libc_init_array+0xc>
 800171a:	f855 3b04 	ldr.w	r3, [r5], #4
 800171e:	4798      	blx	r3
 8001720:	3601      	adds	r6, #1
 8001722:	e7f2      	b.n	800170a <__libc_init_array+0x1e>
 8001724:	08002a54 	.word	0x08002a54
 8001728:	08002a54 	.word	0x08002a54
 800172c:	08002a54 	.word	0x08002a54
 8001730:	08002a58 	.word	0x08002a58

08001734 <memset>:
 8001734:	4402      	add	r2, r0
 8001736:	4603      	mov	r3, r0
 8001738:	4293      	cmp	r3, r2
 800173a:	d100      	bne.n	800173e <memset+0xa>
 800173c:	4770      	bx	lr
 800173e:	f803 1b01 	strb.w	r1, [r3], #1
 8001742:	e7f9      	b.n	8001738 <memset+0x4>

08001744 <iprintf>:
 8001744:	b40f      	push	{r0, r1, r2, r3}
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <iprintf+0x2c>)
 8001748:	b513      	push	{r0, r1, r4, lr}
 800174a:	681c      	ldr	r4, [r3, #0]
 800174c:	b124      	cbz	r4, 8001758 <iprintf+0x14>
 800174e:	69a3      	ldr	r3, [r4, #24]
 8001750:	b913      	cbnz	r3, 8001758 <iprintf+0x14>
 8001752:	4620      	mov	r0, r4
 8001754:	f000 fa74 	bl	8001c40 <__sinit>
 8001758:	ab05      	add	r3, sp, #20
 800175a:	9a04      	ldr	r2, [sp, #16]
 800175c:	68a1      	ldr	r1, [r4, #8]
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	4620      	mov	r0, r4
 8001762:	f000 fc45 	bl	8001ff0 <_vfiprintf_r>
 8001766:	b002      	add	sp, #8
 8001768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800176c:	b004      	add	sp, #16
 800176e:	4770      	bx	lr
 8001770:	20000000 	.word	0x20000000

08001774 <putchar>:
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <putchar+0x28>)
 8001776:	b513      	push	{r0, r1, r4, lr}
 8001778:	681c      	ldr	r4, [r3, #0]
 800177a:	4601      	mov	r1, r0
 800177c:	b134      	cbz	r4, 800178c <putchar+0x18>
 800177e:	69a3      	ldr	r3, [r4, #24]
 8001780:	b923      	cbnz	r3, 800178c <putchar+0x18>
 8001782:	9001      	str	r0, [sp, #4]
 8001784:	4620      	mov	r0, r4
 8001786:	f000 fa5b 	bl	8001c40 <__sinit>
 800178a:	9901      	ldr	r1, [sp, #4]
 800178c:	68a2      	ldr	r2, [r4, #8]
 800178e:	4620      	mov	r0, r4
 8001790:	b002      	add	sp, #8
 8001792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001796:	f000 beef 	b.w	8002578 <_putc_r>
 800179a:	bf00      	nop
 800179c:	20000000 	.word	0x20000000

080017a0 <_puts_r>:
 80017a0:	b570      	push	{r4, r5, r6, lr}
 80017a2:	460e      	mov	r6, r1
 80017a4:	4605      	mov	r5, r0
 80017a6:	b118      	cbz	r0, 80017b0 <_puts_r+0x10>
 80017a8:	6983      	ldr	r3, [r0, #24]
 80017aa:	b90b      	cbnz	r3, 80017b0 <_puts_r+0x10>
 80017ac:	f000 fa48 	bl	8001c40 <__sinit>
 80017b0:	69ab      	ldr	r3, [r5, #24]
 80017b2:	68ac      	ldr	r4, [r5, #8]
 80017b4:	b913      	cbnz	r3, 80017bc <_puts_r+0x1c>
 80017b6:	4628      	mov	r0, r5
 80017b8:	f000 fa42 	bl	8001c40 <__sinit>
 80017bc:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <_puts_r+0xd0>)
 80017be:	429c      	cmp	r4, r3
 80017c0:	d120      	bne.n	8001804 <_puts_r+0x64>
 80017c2:	686c      	ldr	r4, [r5, #4]
 80017c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017c6:	07db      	lsls	r3, r3, #31
 80017c8:	d405      	bmi.n	80017d6 <_puts_r+0x36>
 80017ca:	89a3      	ldrh	r3, [r4, #12]
 80017cc:	0598      	lsls	r0, r3, #22
 80017ce:	d402      	bmi.n	80017d6 <_puts_r+0x36>
 80017d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017d2:	f000 fad3 	bl	8001d7c <__retarget_lock_acquire_recursive>
 80017d6:	89a3      	ldrh	r3, [r4, #12]
 80017d8:	0719      	lsls	r1, r3, #28
 80017da:	d51d      	bpl.n	8001818 <_puts_r+0x78>
 80017dc:	6923      	ldr	r3, [r4, #16]
 80017de:	b1db      	cbz	r3, 8001818 <_puts_r+0x78>
 80017e0:	3e01      	subs	r6, #1
 80017e2:	68a3      	ldr	r3, [r4, #8]
 80017e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80017e8:	3b01      	subs	r3, #1
 80017ea:	60a3      	str	r3, [r4, #8]
 80017ec:	bb39      	cbnz	r1, 800183e <_puts_r+0x9e>
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	da38      	bge.n	8001864 <_puts_r+0xc4>
 80017f2:	4622      	mov	r2, r4
 80017f4:	210a      	movs	r1, #10
 80017f6:	4628      	mov	r0, r5
 80017f8:	f000 f848 	bl	800188c <__swbuf_r>
 80017fc:	3001      	adds	r0, #1
 80017fe:	d011      	beq.n	8001824 <_puts_r+0x84>
 8001800:	250a      	movs	r5, #10
 8001802:	e011      	b.n	8001828 <_puts_r+0x88>
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <_puts_r+0xd4>)
 8001806:	429c      	cmp	r4, r3
 8001808:	d101      	bne.n	800180e <_puts_r+0x6e>
 800180a:	68ac      	ldr	r4, [r5, #8]
 800180c:	e7da      	b.n	80017c4 <_puts_r+0x24>
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <_puts_r+0xd8>)
 8001810:	429c      	cmp	r4, r3
 8001812:	bf08      	it	eq
 8001814:	68ec      	ldreq	r4, [r5, #12]
 8001816:	e7d5      	b.n	80017c4 <_puts_r+0x24>
 8001818:	4621      	mov	r1, r4
 800181a:	4628      	mov	r0, r5
 800181c:	f000 f888 	bl	8001930 <__swsetup_r>
 8001820:	2800      	cmp	r0, #0
 8001822:	d0dd      	beq.n	80017e0 <_puts_r+0x40>
 8001824:	f04f 35ff 	mov.w	r5, #4294967295
 8001828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800182a:	07da      	lsls	r2, r3, #31
 800182c:	d405      	bmi.n	800183a <_puts_r+0x9a>
 800182e:	89a3      	ldrh	r3, [r4, #12]
 8001830:	059b      	lsls	r3, r3, #22
 8001832:	d402      	bmi.n	800183a <_puts_r+0x9a>
 8001834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001836:	f000 faa2 	bl	8001d7e <__retarget_lock_release_recursive>
 800183a:	4628      	mov	r0, r5
 800183c:	bd70      	pop	{r4, r5, r6, pc}
 800183e:	2b00      	cmp	r3, #0
 8001840:	da04      	bge.n	800184c <_puts_r+0xac>
 8001842:	69a2      	ldr	r2, [r4, #24]
 8001844:	429a      	cmp	r2, r3
 8001846:	dc06      	bgt.n	8001856 <_puts_r+0xb6>
 8001848:	290a      	cmp	r1, #10
 800184a:	d004      	beq.n	8001856 <_puts_r+0xb6>
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	6022      	str	r2, [r4, #0]
 8001852:	7019      	strb	r1, [r3, #0]
 8001854:	e7c5      	b.n	80017e2 <_puts_r+0x42>
 8001856:	4622      	mov	r2, r4
 8001858:	4628      	mov	r0, r5
 800185a:	f000 f817 	bl	800188c <__swbuf_r>
 800185e:	3001      	adds	r0, #1
 8001860:	d1bf      	bne.n	80017e2 <_puts_r+0x42>
 8001862:	e7df      	b.n	8001824 <_puts_r+0x84>
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	250a      	movs	r5, #10
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	6022      	str	r2, [r4, #0]
 800186c:	701d      	strb	r5, [r3, #0]
 800186e:	e7db      	b.n	8001828 <_puts_r+0x88>
 8001870:	080029e0 	.word	0x080029e0
 8001874:	08002a00 	.word	0x08002a00
 8001878:	080029c0 	.word	0x080029c0

0800187c <puts>:
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <puts+0xc>)
 800187e:	4601      	mov	r1, r0
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	f7ff bf8d 	b.w	80017a0 <_puts_r>
 8001886:	bf00      	nop
 8001888:	20000000 	.word	0x20000000

0800188c <__swbuf_r>:
 800188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188e:	460e      	mov	r6, r1
 8001890:	4614      	mov	r4, r2
 8001892:	4605      	mov	r5, r0
 8001894:	b118      	cbz	r0, 800189e <__swbuf_r+0x12>
 8001896:	6983      	ldr	r3, [r0, #24]
 8001898:	b90b      	cbnz	r3, 800189e <__swbuf_r+0x12>
 800189a:	f000 f9d1 	bl	8001c40 <__sinit>
 800189e:	4b21      	ldr	r3, [pc, #132]	; (8001924 <__swbuf_r+0x98>)
 80018a0:	429c      	cmp	r4, r3
 80018a2:	d12b      	bne.n	80018fc <__swbuf_r+0x70>
 80018a4:	686c      	ldr	r4, [r5, #4]
 80018a6:	69a3      	ldr	r3, [r4, #24]
 80018a8:	60a3      	str	r3, [r4, #8]
 80018aa:	89a3      	ldrh	r3, [r4, #12]
 80018ac:	071a      	lsls	r2, r3, #28
 80018ae:	d52f      	bpl.n	8001910 <__swbuf_r+0x84>
 80018b0:	6923      	ldr	r3, [r4, #16]
 80018b2:	b36b      	cbz	r3, 8001910 <__swbuf_r+0x84>
 80018b4:	6923      	ldr	r3, [r4, #16]
 80018b6:	6820      	ldr	r0, [r4, #0]
 80018b8:	1ac0      	subs	r0, r0, r3
 80018ba:	6963      	ldr	r3, [r4, #20]
 80018bc:	b2f6      	uxtb	r6, r6
 80018be:	4283      	cmp	r3, r0
 80018c0:	4637      	mov	r7, r6
 80018c2:	dc04      	bgt.n	80018ce <__swbuf_r+0x42>
 80018c4:	4621      	mov	r1, r4
 80018c6:	4628      	mov	r0, r5
 80018c8:	f000 f926 	bl	8001b18 <_fflush_r>
 80018cc:	bb30      	cbnz	r0, 800191c <__swbuf_r+0x90>
 80018ce:	68a3      	ldr	r3, [r4, #8]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	60a3      	str	r3, [r4, #8]
 80018d4:	6823      	ldr	r3, [r4, #0]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	6022      	str	r2, [r4, #0]
 80018da:	701e      	strb	r6, [r3, #0]
 80018dc:	6963      	ldr	r3, [r4, #20]
 80018de:	3001      	adds	r0, #1
 80018e0:	4283      	cmp	r3, r0
 80018e2:	d004      	beq.n	80018ee <__swbuf_r+0x62>
 80018e4:	89a3      	ldrh	r3, [r4, #12]
 80018e6:	07db      	lsls	r3, r3, #31
 80018e8:	d506      	bpl.n	80018f8 <__swbuf_r+0x6c>
 80018ea:	2e0a      	cmp	r6, #10
 80018ec:	d104      	bne.n	80018f8 <__swbuf_r+0x6c>
 80018ee:	4621      	mov	r1, r4
 80018f0:	4628      	mov	r0, r5
 80018f2:	f000 f911 	bl	8001b18 <_fflush_r>
 80018f6:	b988      	cbnz	r0, 800191c <__swbuf_r+0x90>
 80018f8:	4638      	mov	r0, r7
 80018fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <__swbuf_r+0x9c>)
 80018fe:	429c      	cmp	r4, r3
 8001900:	d101      	bne.n	8001906 <__swbuf_r+0x7a>
 8001902:	68ac      	ldr	r4, [r5, #8]
 8001904:	e7cf      	b.n	80018a6 <__swbuf_r+0x1a>
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <__swbuf_r+0xa0>)
 8001908:	429c      	cmp	r4, r3
 800190a:	bf08      	it	eq
 800190c:	68ec      	ldreq	r4, [r5, #12]
 800190e:	e7ca      	b.n	80018a6 <__swbuf_r+0x1a>
 8001910:	4621      	mov	r1, r4
 8001912:	4628      	mov	r0, r5
 8001914:	f000 f80c 	bl	8001930 <__swsetup_r>
 8001918:	2800      	cmp	r0, #0
 800191a:	d0cb      	beq.n	80018b4 <__swbuf_r+0x28>
 800191c:	f04f 37ff 	mov.w	r7, #4294967295
 8001920:	e7ea      	b.n	80018f8 <__swbuf_r+0x6c>
 8001922:	bf00      	nop
 8001924:	080029e0 	.word	0x080029e0
 8001928:	08002a00 	.word	0x08002a00
 800192c:	080029c0 	.word	0x080029c0

08001930 <__swsetup_r>:
 8001930:	4b32      	ldr	r3, [pc, #200]	; (80019fc <__swsetup_r+0xcc>)
 8001932:	b570      	push	{r4, r5, r6, lr}
 8001934:	681d      	ldr	r5, [r3, #0]
 8001936:	4606      	mov	r6, r0
 8001938:	460c      	mov	r4, r1
 800193a:	b125      	cbz	r5, 8001946 <__swsetup_r+0x16>
 800193c:	69ab      	ldr	r3, [r5, #24]
 800193e:	b913      	cbnz	r3, 8001946 <__swsetup_r+0x16>
 8001940:	4628      	mov	r0, r5
 8001942:	f000 f97d 	bl	8001c40 <__sinit>
 8001946:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <__swsetup_r+0xd0>)
 8001948:	429c      	cmp	r4, r3
 800194a:	d10f      	bne.n	800196c <__swsetup_r+0x3c>
 800194c:	686c      	ldr	r4, [r5, #4]
 800194e:	89a3      	ldrh	r3, [r4, #12]
 8001950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001954:	0719      	lsls	r1, r3, #28
 8001956:	d42c      	bmi.n	80019b2 <__swsetup_r+0x82>
 8001958:	06dd      	lsls	r5, r3, #27
 800195a:	d411      	bmi.n	8001980 <__swsetup_r+0x50>
 800195c:	2309      	movs	r3, #9
 800195e:	6033      	str	r3, [r6, #0]
 8001960:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001964:	81a3      	strh	r3, [r4, #12]
 8001966:	f04f 30ff 	mov.w	r0, #4294967295
 800196a:	e03e      	b.n	80019ea <__swsetup_r+0xba>
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <__swsetup_r+0xd4>)
 800196e:	429c      	cmp	r4, r3
 8001970:	d101      	bne.n	8001976 <__swsetup_r+0x46>
 8001972:	68ac      	ldr	r4, [r5, #8]
 8001974:	e7eb      	b.n	800194e <__swsetup_r+0x1e>
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <__swsetup_r+0xd8>)
 8001978:	429c      	cmp	r4, r3
 800197a:	bf08      	it	eq
 800197c:	68ec      	ldreq	r4, [r5, #12]
 800197e:	e7e6      	b.n	800194e <__swsetup_r+0x1e>
 8001980:	0758      	lsls	r0, r3, #29
 8001982:	d512      	bpl.n	80019aa <__swsetup_r+0x7a>
 8001984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001986:	b141      	cbz	r1, 800199a <__swsetup_r+0x6a>
 8001988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800198c:	4299      	cmp	r1, r3
 800198e:	d002      	beq.n	8001996 <__swsetup_r+0x66>
 8001990:	4630      	mov	r0, r6
 8001992:	f000 fa59 	bl	8001e48 <_free_r>
 8001996:	2300      	movs	r3, #0
 8001998:	6363      	str	r3, [r4, #52]	; 0x34
 800199a:	89a3      	ldrh	r3, [r4, #12]
 800199c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80019a0:	81a3      	strh	r3, [r4, #12]
 80019a2:	2300      	movs	r3, #0
 80019a4:	6063      	str	r3, [r4, #4]
 80019a6:	6923      	ldr	r3, [r4, #16]
 80019a8:	6023      	str	r3, [r4, #0]
 80019aa:	89a3      	ldrh	r3, [r4, #12]
 80019ac:	f043 0308 	orr.w	r3, r3, #8
 80019b0:	81a3      	strh	r3, [r4, #12]
 80019b2:	6923      	ldr	r3, [r4, #16]
 80019b4:	b94b      	cbnz	r3, 80019ca <__swsetup_r+0x9a>
 80019b6:	89a3      	ldrh	r3, [r4, #12]
 80019b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80019bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c0:	d003      	beq.n	80019ca <__swsetup_r+0x9a>
 80019c2:	4621      	mov	r1, r4
 80019c4:	4630      	mov	r0, r6
 80019c6:	f000 f9ff 	bl	8001dc8 <__smakebuf_r>
 80019ca:	89a0      	ldrh	r0, [r4, #12]
 80019cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80019d0:	f010 0301 	ands.w	r3, r0, #1
 80019d4:	d00a      	beq.n	80019ec <__swsetup_r+0xbc>
 80019d6:	2300      	movs	r3, #0
 80019d8:	60a3      	str	r3, [r4, #8]
 80019da:	6963      	ldr	r3, [r4, #20]
 80019dc:	425b      	negs	r3, r3
 80019de:	61a3      	str	r3, [r4, #24]
 80019e0:	6923      	ldr	r3, [r4, #16]
 80019e2:	b943      	cbnz	r3, 80019f6 <__swsetup_r+0xc6>
 80019e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80019e8:	d1ba      	bne.n	8001960 <__swsetup_r+0x30>
 80019ea:	bd70      	pop	{r4, r5, r6, pc}
 80019ec:	0781      	lsls	r1, r0, #30
 80019ee:	bf58      	it	pl
 80019f0:	6963      	ldrpl	r3, [r4, #20]
 80019f2:	60a3      	str	r3, [r4, #8]
 80019f4:	e7f4      	b.n	80019e0 <__swsetup_r+0xb0>
 80019f6:	2000      	movs	r0, #0
 80019f8:	e7f7      	b.n	80019ea <__swsetup_r+0xba>
 80019fa:	bf00      	nop
 80019fc:	20000000 	.word	0x20000000
 8001a00:	080029e0 	.word	0x080029e0
 8001a04:	08002a00 	.word	0x08002a00
 8001a08:	080029c0 	.word	0x080029c0

08001a0c <__sflush_r>:
 8001a0c:	898a      	ldrh	r2, [r1, #12]
 8001a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a12:	4605      	mov	r5, r0
 8001a14:	0710      	lsls	r0, r2, #28
 8001a16:	460c      	mov	r4, r1
 8001a18:	d458      	bmi.n	8001acc <__sflush_r+0xc0>
 8001a1a:	684b      	ldr	r3, [r1, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	dc05      	bgt.n	8001a2c <__sflush_r+0x20>
 8001a20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	dc02      	bgt.n	8001a2c <__sflush_r+0x20>
 8001a26:	2000      	movs	r0, #0
 8001a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a2e:	2e00      	cmp	r6, #0
 8001a30:	d0f9      	beq.n	8001a26 <__sflush_r+0x1a>
 8001a32:	2300      	movs	r3, #0
 8001a34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a38:	682f      	ldr	r7, [r5, #0]
 8001a3a:	602b      	str	r3, [r5, #0]
 8001a3c:	d032      	beq.n	8001aa4 <__sflush_r+0x98>
 8001a3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a40:	89a3      	ldrh	r3, [r4, #12]
 8001a42:	075a      	lsls	r2, r3, #29
 8001a44:	d505      	bpl.n	8001a52 <__sflush_r+0x46>
 8001a46:	6863      	ldr	r3, [r4, #4]
 8001a48:	1ac0      	subs	r0, r0, r3
 8001a4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a4c:	b10b      	cbz	r3, 8001a52 <__sflush_r+0x46>
 8001a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a50:	1ac0      	subs	r0, r0, r3
 8001a52:	2300      	movs	r3, #0
 8001a54:	4602      	mov	r2, r0
 8001a56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a58:	6a21      	ldr	r1, [r4, #32]
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	47b0      	blx	r6
 8001a5e:	1c43      	adds	r3, r0, #1
 8001a60:	89a3      	ldrh	r3, [r4, #12]
 8001a62:	d106      	bne.n	8001a72 <__sflush_r+0x66>
 8001a64:	6829      	ldr	r1, [r5, #0]
 8001a66:	291d      	cmp	r1, #29
 8001a68:	d82c      	bhi.n	8001ac4 <__sflush_r+0xb8>
 8001a6a:	4a2a      	ldr	r2, [pc, #168]	; (8001b14 <__sflush_r+0x108>)
 8001a6c:	40ca      	lsrs	r2, r1
 8001a6e:	07d6      	lsls	r6, r2, #31
 8001a70:	d528      	bpl.n	8001ac4 <__sflush_r+0xb8>
 8001a72:	2200      	movs	r2, #0
 8001a74:	6062      	str	r2, [r4, #4]
 8001a76:	04d9      	lsls	r1, r3, #19
 8001a78:	6922      	ldr	r2, [r4, #16]
 8001a7a:	6022      	str	r2, [r4, #0]
 8001a7c:	d504      	bpl.n	8001a88 <__sflush_r+0x7c>
 8001a7e:	1c42      	adds	r2, r0, #1
 8001a80:	d101      	bne.n	8001a86 <__sflush_r+0x7a>
 8001a82:	682b      	ldr	r3, [r5, #0]
 8001a84:	b903      	cbnz	r3, 8001a88 <__sflush_r+0x7c>
 8001a86:	6560      	str	r0, [r4, #84]	; 0x54
 8001a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a8a:	602f      	str	r7, [r5, #0]
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d0ca      	beq.n	8001a26 <__sflush_r+0x1a>
 8001a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a94:	4299      	cmp	r1, r3
 8001a96:	d002      	beq.n	8001a9e <__sflush_r+0x92>
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f000 f9d5 	bl	8001e48 <_free_r>
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8001aa2:	e7c1      	b.n	8001a28 <__sflush_r+0x1c>
 8001aa4:	6a21      	ldr	r1, [r4, #32]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	4628      	mov	r0, r5
 8001aaa:	47b0      	blx	r6
 8001aac:	1c41      	adds	r1, r0, #1
 8001aae:	d1c7      	bne.n	8001a40 <__sflush_r+0x34>
 8001ab0:	682b      	ldr	r3, [r5, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0c4      	beq.n	8001a40 <__sflush_r+0x34>
 8001ab6:	2b1d      	cmp	r3, #29
 8001ab8:	d001      	beq.n	8001abe <__sflush_r+0xb2>
 8001aba:	2b16      	cmp	r3, #22
 8001abc:	d101      	bne.n	8001ac2 <__sflush_r+0xb6>
 8001abe:	602f      	str	r7, [r5, #0]
 8001ac0:	e7b1      	b.n	8001a26 <__sflush_r+0x1a>
 8001ac2:	89a3      	ldrh	r3, [r4, #12]
 8001ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac8:	81a3      	strh	r3, [r4, #12]
 8001aca:	e7ad      	b.n	8001a28 <__sflush_r+0x1c>
 8001acc:	690f      	ldr	r7, [r1, #16]
 8001ace:	2f00      	cmp	r7, #0
 8001ad0:	d0a9      	beq.n	8001a26 <__sflush_r+0x1a>
 8001ad2:	0793      	lsls	r3, r2, #30
 8001ad4:	680e      	ldr	r6, [r1, #0]
 8001ad6:	bf08      	it	eq
 8001ad8:	694b      	ldreq	r3, [r1, #20]
 8001ada:	600f      	str	r7, [r1, #0]
 8001adc:	bf18      	it	ne
 8001ade:	2300      	movne	r3, #0
 8001ae0:	eba6 0807 	sub.w	r8, r6, r7
 8001ae4:	608b      	str	r3, [r1, #8]
 8001ae6:	f1b8 0f00 	cmp.w	r8, #0
 8001aea:	dd9c      	ble.n	8001a26 <__sflush_r+0x1a>
 8001aec:	6a21      	ldr	r1, [r4, #32]
 8001aee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001af0:	4643      	mov	r3, r8
 8001af2:	463a      	mov	r2, r7
 8001af4:	4628      	mov	r0, r5
 8001af6:	47b0      	blx	r6
 8001af8:	2800      	cmp	r0, #0
 8001afa:	dc06      	bgt.n	8001b0a <__sflush_r+0xfe>
 8001afc:	89a3      	ldrh	r3, [r4, #12]
 8001afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b02:	81a3      	strh	r3, [r4, #12]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	e78e      	b.n	8001a28 <__sflush_r+0x1c>
 8001b0a:	4407      	add	r7, r0
 8001b0c:	eba8 0800 	sub.w	r8, r8, r0
 8001b10:	e7e9      	b.n	8001ae6 <__sflush_r+0xda>
 8001b12:	bf00      	nop
 8001b14:	20400001 	.word	0x20400001

08001b18 <_fflush_r>:
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	690b      	ldr	r3, [r1, #16]
 8001b1c:	4605      	mov	r5, r0
 8001b1e:	460c      	mov	r4, r1
 8001b20:	b913      	cbnz	r3, 8001b28 <_fflush_r+0x10>
 8001b22:	2500      	movs	r5, #0
 8001b24:	4628      	mov	r0, r5
 8001b26:	bd38      	pop	{r3, r4, r5, pc}
 8001b28:	b118      	cbz	r0, 8001b32 <_fflush_r+0x1a>
 8001b2a:	6983      	ldr	r3, [r0, #24]
 8001b2c:	b90b      	cbnz	r3, 8001b32 <_fflush_r+0x1a>
 8001b2e:	f000 f887 	bl	8001c40 <__sinit>
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <_fflush_r+0x6c>)
 8001b34:	429c      	cmp	r4, r3
 8001b36:	d11b      	bne.n	8001b70 <_fflush_r+0x58>
 8001b38:	686c      	ldr	r4, [r5, #4]
 8001b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0ef      	beq.n	8001b22 <_fflush_r+0xa>
 8001b42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001b44:	07d0      	lsls	r0, r2, #31
 8001b46:	d404      	bmi.n	8001b52 <_fflush_r+0x3a>
 8001b48:	0599      	lsls	r1, r3, #22
 8001b4a:	d402      	bmi.n	8001b52 <_fflush_r+0x3a>
 8001b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b4e:	f000 f915 	bl	8001d7c <__retarget_lock_acquire_recursive>
 8001b52:	4628      	mov	r0, r5
 8001b54:	4621      	mov	r1, r4
 8001b56:	f7ff ff59 	bl	8001a0c <__sflush_r>
 8001b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b5c:	07da      	lsls	r2, r3, #31
 8001b5e:	4605      	mov	r5, r0
 8001b60:	d4e0      	bmi.n	8001b24 <_fflush_r+0xc>
 8001b62:	89a3      	ldrh	r3, [r4, #12]
 8001b64:	059b      	lsls	r3, r3, #22
 8001b66:	d4dd      	bmi.n	8001b24 <_fflush_r+0xc>
 8001b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b6a:	f000 f908 	bl	8001d7e <__retarget_lock_release_recursive>
 8001b6e:	e7d9      	b.n	8001b24 <_fflush_r+0xc>
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <_fflush_r+0x70>)
 8001b72:	429c      	cmp	r4, r3
 8001b74:	d101      	bne.n	8001b7a <_fflush_r+0x62>
 8001b76:	68ac      	ldr	r4, [r5, #8]
 8001b78:	e7df      	b.n	8001b3a <_fflush_r+0x22>
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <_fflush_r+0x74>)
 8001b7c:	429c      	cmp	r4, r3
 8001b7e:	bf08      	it	eq
 8001b80:	68ec      	ldreq	r4, [r5, #12]
 8001b82:	e7da      	b.n	8001b3a <_fflush_r+0x22>
 8001b84:	080029e0 	.word	0x080029e0
 8001b88:	08002a00 	.word	0x08002a00
 8001b8c:	080029c0 	.word	0x080029c0

08001b90 <std>:
 8001b90:	2300      	movs	r3, #0
 8001b92:	b510      	push	{r4, lr}
 8001b94:	4604      	mov	r4, r0
 8001b96:	e9c0 3300 	strd	r3, r3, [r0]
 8001b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b9e:	6083      	str	r3, [r0, #8]
 8001ba0:	8181      	strh	r1, [r0, #12]
 8001ba2:	6643      	str	r3, [r0, #100]	; 0x64
 8001ba4:	81c2      	strh	r2, [r0, #14]
 8001ba6:	6183      	str	r3, [r0, #24]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	2208      	movs	r2, #8
 8001bac:	305c      	adds	r0, #92	; 0x5c
 8001bae:	f7ff fdc1 	bl	8001734 <memset>
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <std+0x38>)
 8001bb4:	6263      	str	r3, [r4, #36]	; 0x24
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <std+0x3c>)
 8001bb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <std+0x40>)
 8001bbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <std+0x44>)
 8001bc0:	6224      	str	r4, [r4, #32]
 8001bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8001bc4:	bd10      	pop	{r4, pc}
 8001bc6:	bf00      	nop
 8001bc8:	08002629 	.word	0x08002629
 8001bcc:	0800264b 	.word	0x0800264b
 8001bd0:	08002683 	.word	0x08002683
 8001bd4:	080026a7 	.word	0x080026a7

08001bd8 <_cleanup_r>:
 8001bd8:	4901      	ldr	r1, [pc, #4]	; (8001be0 <_cleanup_r+0x8>)
 8001bda:	f000 b8af 	b.w	8001d3c <_fwalk_reent>
 8001bde:	bf00      	nop
 8001be0:	08001b19 	.word	0x08001b19

08001be4 <__sfmoreglue>:
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	1e4a      	subs	r2, r1, #1
 8001be8:	2568      	movs	r5, #104	; 0x68
 8001bea:	4355      	muls	r5, r2
 8001bec:	460e      	mov	r6, r1
 8001bee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001bf2:	f000 f979 	bl	8001ee8 <_malloc_r>
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	b140      	cbz	r0, 8001c0c <__sfmoreglue+0x28>
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	e9c0 1600 	strd	r1, r6, [r0]
 8001c00:	300c      	adds	r0, #12
 8001c02:	60a0      	str	r0, [r4, #8]
 8001c04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001c08:	f7ff fd94 	bl	8001734 <memset>
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	bd70      	pop	{r4, r5, r6, pc}

08001c10 <__sfp_lock_acquire>:
 8001c10:	4801      	ldr	r0, [pc, #4]	; (8001c18 <__sfp_lock_acquire+0x8>)
 8001c12:	f000 b8b3 	b.w	8001d7c <__retarget_lock_acquire_recursive>
 8001c16:	bf00      	nop
 8001c18:	20000100 	.word	0x20000100

08001c1c <__sfp_lock_release>:
 8001c1c:	4801      	ldr	r0, [pc, #4]	; (8001c24 <__sfp_lock_release+0x8>)
 8001c1e:	f000 b8ae 	b.w	8001d7e <__retarget_lock_release_recursive>
 8001c22:	bf00      	nop
 8001c24:	20000100 	.word	0x20000100

08001c28 <__sinit_lock_acquire>:
 8001c28:	4801      	ldr	r0, [pc, #4]	; (8001c30 <__sinit_lock_acquire+0x8>)
 8001c2a:	f000 b8a7 	b.w	8001d7c <__retarget_lock_acquire_recursive>
 8001c2e:	bf00      	nop
 8001c30:	200000fb 	.word	0x200000fb

08001c34 <__sinit_lock_release>:
 8001c34:	4801      	ldr	r0, [pc, #4]	; (8001c3c <__sinit_lock_release+0x8>)
 8001c36:	f000 b8a2 	b.w	8001d7e <__retarget_lock_release_recursive>
 8001c3a:	bf00      	nop
 8001c3c:	200000fb 	.word	0x200000fb

08001c40 <__sinit>:
 8001c40:	b510      	push	{r4, lr}
 8001c42:	4604      	mov	r4, r0
 8001c44:	f7ff fff0 	bl	8001c28 <__sinit_lock_acquire>
 8001c48:	69a3      	ldr	r3, [r4, #24]
 8001c4a:	b11b      	cbz	r3, 8001c54 <__sinit+0x14>
 8001c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c50:	f7ff bff0 	b.w	8001c34 <__sinit_lock_release>
 8001c54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001c58:	6523      	str	r3, [r4, #80]	; 0x50
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <__sinit+0x68>)
 8001c5c:	4a13      	ldr	r2, [pc, #76]	; (8001cac <__sinit+0x6c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c62:	42a3      	cmp	r3, r4
 8001c64:	bf04      	itt	eq
 8001c66:	2301      	moveq	r3, #1
 8001c68:	61a3      	streq	r3, [r4, #24]
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f000 f820 	bl	8001cb0 <__sfp>
 8001c70:	6060      	str	r0, [r4, #4]
 8001c72:	4620      	mov	r0, r4
 8001c74:	f000 f81c 	bl	8001cb0 <__sfp>
 8001c78:	60a0      	str	r0, [r4, #8]
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f000 f818 	bl	8001cb0 <__sfp>
 8001c80:	2200      	movs	r2, #0
 8001c82:	60e0      	str	r0, [r4, #12]
 8001c84:	2104      	movs	r1, #4
 8001c86:	6860      	ldr	r0, [r4, #4]
 8001c88:	f7ff ff82 	bl	8001b90 <std>
 8001c8c:	68a0      	ldr	r0, [r4, #8]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	2109      	movs	r1, #9
 8001c92:	f7ff ff7d 	bl	8001b90 <std>
 8001c96:	68e0      	ldr	r0, [r4, #12]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	2112      	movs	r1, #18
 8001c9c:	f7ff ff78 	bl	8001b90 <std>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61a3      	str	r3, [r4, #24]
 8001ca4:	e7d2      	b.n	8001c4c <__sinit+0xc>
 8001ca6:	bf00      	nop
 8001ca8:	080029bc 	.word	0x080029bc
 8001cac:	08001bd9 	.word	0x08001bd9

08001cb0 <__sfp>:
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	4607      	mov	r7, r0
 8001cb4:	f7ff ffac 	bl	8001c10 <__sfp_lock_acquire>
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <__sfp+0x84>)
 8001cba:	681e      	ldr	r6, [r3, #0]
 8001cbc:	69b3      	ldr	r3, [r6, #24]
 8001cbe:	b913      	cbnz	r3, 8001cc6 <__sfp+0x16>
 8001cc0:	4630      	mov	r0, r6
 8001cc2:	f7ff ffbd 	bl	8001c40 <__sinit>
 8001cc6:	3648      	adds	r6, #72	; 0x48
 8001cc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	d503      	bpl.n	8001cd8 <__sfp+0x28>
 8001cd0:	6833      	ldr	r3, [r6, #0]
 8001cd2:	b30b      	cbz	r3, 8001d18 <__sfp+0x68>
 8001cd4:	6836      	ldr	r6, [r6, #0]
 8001cd6:	e7f7      	b.n	8001cc8 <__sfp+0x18>
 8001cd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001cdc:	b9d5      	cbnz	r5, 8001d14 <__sfp+0x64>
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <__sfp+0x88>)
 8001ce0:	60e3      	str	r3, [r4, #12]
 8001ce2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001ce6:	6665      	str	r5, [r4, #100]	; 0x64
 8001ce8:	f000 f847 	bl	8001d7a <__retarget_lock_init_recursive>
 8001cec:	f7ff ff96 	bl	8001c1c <__sfp_lock_release>
 8001cf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001cf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001cf8:	6025      	str	r5, [r4, #0]
 8001cfa:	61a5      	str	r5, [r4, #24]
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	4629      	mov	r1, r5
 8001d00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d04:	f7ff fd16 	bl	8001734 <memset>
 8001d08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d10:	4620      	mov	r0, r4
 8001d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d14:	3468      	adds	r4, #104	; 0x68
 8001d16:	e7d9      	b.n	8001ccc <__sfp+0x1c>
 8001d18:	2104      	movs	r1, #4
 8001d1a:	4638      	mov	r0, r7
 8001d1c:	f7ff ff62 	bl	8001be4 <__sfmoreglue>
 8001d20:	4604      	mov	r4, r0
 8001d22:	6030      	str	r0, [r6, #0]
 8001d24:	2800      	cmp	r0, #0
 8001d26:	d1d5      	bne.n	8001cd4 <__sfp+0x24>
 8001d28:	f7ff ff78 	bl	8001c1c <__sfp_lock_release>
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	e7ee      	b.n	8001d10 <__sfp+0x60>
 8001d32:	bf00      	nop
 8001d34:	080029bc 	.word	0x080029bc
 8001d38:	ffff0001 	.word	0xffff0001

08001d3c <_fwalk_reent>:
 8001d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d40:	4606      	mov	r6, r0
 8001d42:	4688      	mov	r8, r1
 8001d44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d48:	2700      	movs	r7, #0
 8001d4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d4e:	f1b9 0901 	subs.w	r9, r9, #1
 8001d52:	d505      	bpl.n	8001d60 <_fwalk_reent+0x24>
 8001d54:	6824      	ldr	r4, [r4, #0]
 8001d56:	2c00      	cmp	r4, #0
 8001d58:	d1f7      	bne.n	8001d4a <_fwalk_reent+0xe>
 8001d5a:	4638      	mov	r0, r7
 8001d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d60:	89ab      	ldrh	r3, [r5, #12]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d907      	bls.n	8001d76 <_fwalk_reent+0x3a>
 8001d66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	d003      	beq.n	8001d76 <_fwalk_reent+0x3a>
 8001d6e:	4629      	mov	r1, r5
 8001d70:	4630      	mov	r0, r6
 8001d72:	47c0      	blx	r8
 8001d74:	4307      	orrs	r7, r0
 8001d76:	3568      	adds	r5, #104	; 0x68
 8001d78:	e7e9      	b.n	8001d4e <_fwalk_reent+0x12>

08001d7a <__retarget_lock_init_recursive>:
 8001d7a:	4770      	bx	lr

08001d7c <__retarget_lock_acquire_recursive>:
 8001d7c:	4770      	bx	lr

08001d7e <__retarget_lock_release_recursive>:
 8001d7e:	4770      	bx	lr

08001d80 <__swhatbuf_r>:
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	460e      	mov	r6, r1
 8001d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d88:	2900      	cmp	r1, #0
 8001d8a:	b096      	sub	sp, #88	; 0x58
 8001d8c:	4614      	mov	r4, r2
 8001d8e:	461d      	mov	r5, r3
 8001d90:	da07      	bge.n	8001da2 <__swhatbuf_r+0x22>
 8001d92:	2300      	movs	r3, #0
 8001d94:	602b      	str	r3, [r5, #0]
 8001d96:	89b3      	ldrh	r3, [r6, #12]
 8001d98:	061a      	lsls	r2, r3, #24
 8001d9a:	d410      	bmi.n	8001dbe <__swhatbuf_r+0x3e>
 8001d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da0:	e00e      	b.n	8001dc0 <__swhatbuf_r+0x40>
 8001da2:	466a      	mov	r2, sp
 8001da4:	f000 fca6 	bl	80026f4 <_fstat_r>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	dbf2      	blt.n	8001d92 <__swhatbuf_r+0x12>
 8001dac:	9a01      	ldr	r2, [sp, #4]
 8001dae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001db2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001db6:	425a      	negs	r2, r3
 8001db8:	415a      	adcs	r2, r3
 8001dba:	602a      	str	r2, [r5, #0]
 8001dbc:	e7ee      	b.n	8001d9c <__swhatbuf_r+0x1c>
 8001dbe:	2340      	movs	r3, #64	; 0x40
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	6023      	str	r3, [r4, #0]
 8001dc4:	b016      	add	sp, #88	; 0x58
 8001dc6:	bd70      	pop	{r4, r5, r6, pc}

08001dc8 <__smakebuf_r>:
 8001dc8:	898b      	ldrh	r3, [r1, #12]
 8001dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001dcc:	079d      	lsls	r5, r3, #30
 8001dce:	4606      	mov	r6, r0
 8001dd0:	460c      	mov	r4, r1
 8001dd2:	d507      	bpl.n	8001de4 <__smakebuf_r+0x1c>
 8001dd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001dd8:	6023      	str	r3, [r4, #0]
 8001dda:	6123      	str	r3, [r4, #16]
 8001ddc:	2301      	movs	r3, #1
 8001dde:	6163      	str	r3, [r4, #20]
 8001de0:	b002      	add	sp, #8
 8001de2:	bd70      	pop	{r4, r5, r6, pc}
 8001de4:	ab01      	add	r3, sp, #4
 8001de6:	466a      	mov	r2, sp
 8001de8:	f7ff ffca 	bl	8001d80 <__swhatbuf_r>
 8001dec:	9900      	ldr	r1, [sp, #0]
 8001dee:	4605      	mov	r5, r0
 8001df0:	4630      	mov	r0, r6
 8001df2:	f000 f879 	bl	8001ee8 <_malloc_r>
 8001df6:	b948      	cbnz	r0, 8001e0c <__smakebuf_r+0x44>
 8001df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dfc:	059a      	lsls	r2, r3, #22
 8001dfe:	d4ef      	bmi.n	8001de0 <__smakebuf_r+0x18>
 8001e00:	f023 0303 	bic.w	r3, r3, #3
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	81a3      	strh	r3, [r4, #12]
 8001e0a:	e7e3      	b.n	8001dd4 <__smakebuf_r+0xc>
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <__smakebuf_r+0x7c>)
 8001e0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e10:	89a3      	ldrh	r3, [r4, #12]
 8001e12:	6020      	str	r0, [r4, #0]
 8001e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e18:	81a3      	strh	r3, [r4, #12]
 8001e1a:	9b00      	ldr	r3, [sp, #0]
 8001e1c:	6163      	str	r3, [r4, #20]
 8001e1e:	9b01      	ldr	r3, [sp, #4]
 8001e20:	6120      	str	r0, [r4, #16]
 8001e22:	b15b      	cbz	r3, 8001e3c <__smakebuf_r+0x74>
 8001e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e28:	4630      	mov	r0, r6
 8001e2a:	f000 fc75 	bl	8002718 <_isatty_r>
 8001e2e:	b128      	cbz	r0, 8001e3c <__smakebuf_r+0x74>
 8001e30:	89a3      	ldrh	r3, [r4, #12]
 8001e32:	f023 0303 	bic.w	r3, r3, #3
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	81a3      	strh	r3, [r4, #12]
 8001e3c:	89a0      	ldrh	r0, [r4, #12]
 8001e3e:	4305      	orrs	r5, r0
 8001e40:	81a5      	strh	r5, [r4, #12]
 8001e42:	e7cd      	b.n	8001de0 <__smakebuf_r+0x18>
 8001e44:	08001bd9 	.word	0x08001bd9

08001e48 <_free_r>:
 8001e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e4a:	2900      	cmp	r1, #0
 8001e4c:	d048      	beq.n	8001ee0 <_free_r+0x98>
 8001e4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e52:	9001      	str	r0, [sp, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f1a1 0404 	sub.w	r4, r1, #4
 8001e5a:	bfb8      	it	lt
 8001e5c:	18e4      	addlt	r4, r4, r3
 8001e5e:	f000 fc7d 	bl	800275c <__malloc_lock>
 8001e62:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <_free_r+0x9c>)
 8001e64:	9801      	ldr	r0, [sp, #4]
 8001e66:	6813      	ldr	r3, [r2, #0]
 8001e68:	4615      	mov	r5, r2
 8001e6a:	b933      	cbnz	r3, 8001e7a <_free_r+0x32>
 8001e6c:	6063      	str	r3, [r4, #4]
 8001e6e:	6014      	str	r4, [r2, #0]
 8001e70:	b003      	add	sp, #12
 8001e72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001e76:	f000 bc77 	b.w	8002768 <__malloc_unlock>
 8001e7a:	42a3      	cmp	r3, r4
 8001e7c:	d90b      	bls.n	8001e96 <_free_r+0x4e>
 8001e7e:	6821      	ldr	r1, [r4, #0]
 8001e80:	1862      	adds	r2, r4, r1
 8001e82:	4293      	cmp	r3, r2
 8001e84:	bf04      	itt	eq
 8001e86:	681a      	ldreq	r2, [r3, #0]
 8001e88:	685b      	ldreq	r3, [r3, #4]
 8001e8a:	6063      	str	r3, [r4, #4]
 8001e8c:	bf04      	itt	eq
 8001e8e:	1852      	addeq	r2, r2, r1
 8001e90:	6022      	streq	r2, [r4, #0]
 8001e92:	602c      	str	r4, [r5, #0]
 8001e94:	e7ec      	b.n	8001e70 <_free_r+0x28>
 8001e96:	461a      	mov	r2, r3
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	b10b      	cbz	r3, 8001ea0 <_free_r+0x58>
 8001e9c:	42a3      	cmp	r3, r4
 8001e9e:	d9fa      	bls.n	8001e96 <_free_r+0x4e>
 8001ea0:	6811      	ldr	r1, [r2, #0]
 8001ea2:	1855      	adds	r5, r2, r1
 8001ea4:	42a5      	cmp	r5, r4
 8001ea6:	d10b      	bne.n	8001ec0 <_free_r+0x78>
 8001ea8:	6824      	ldr	r4, [r4, #0]
 8001eaa:	4421      	add	r1, r4
 8001eac:	1854      	adds	r4, r2, r1
 8001eae:	42a3      	cmp	r3, r4
 8001eb0:	6011      	str	r1, [r2, #0]
 8001eb2:	d1dd      	bne.n	8001e70 <_free_r+0x28>
 8001eb4:	681c      	ldr	r4, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	6053      	str	r3, [r2, #4]
 8001eba:	4421      	add	r1, r4
 8001ebc:	6011      	str	r1, [r2, #0]
 8001ebe:	e7d7      	b.n	8001e70 <_free_r+0x28>
 8001ec0:	d902      	bls.n	8001ec8 <_free_r+0x80>
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	6003      	str	r3, [r0, #0]
 8001ec6:	e7d3      	b.n	8001e70 <_free_r+0x28>
 8001ec8:	6825      	ldr	r5, [r4, #0]
 8001eca:	1961      	adds	r1, r4, r5
 8001ecc:	428b      	cmp	r3, r1
 8001ece:	bf04      	itt	eq
 8001ed0:	6819      	ldreq	r1, [r3, #0]
 8001ed2:	685b      	ldreq	r3, [r3, #4]
 8001ed4:	6063      	str	r3, [r4, #4]
 8001ed6:	bf04      	itt	eq
 8001ed8:	1949      	addeq	r1, r1, r5
 8001eda:	6021      	streq	r1, [r4, #0]
 8001edc:	6054      	str	r4, [r2, #4]
 8001ede:	e7c7      	b.n	8001e70 <_free_r+0x28>
 8001ee0:	b003      	add	sp, #12
 8001ee2:	bd30      	pop	{r4, r5, pc}
 8001ee4:	20000084 	.word	0x20000084

08001ee8 <_malloc_r>:
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	1ccd      	adds	r5, r1, #3
 8001eec:	f025 0503 	bic.w	r5, r5, #3
 8001ef0:	3508      	adds	r5, #8
 8001ef2:	2d0c      	cmp	r5, #12
 8001ef4:	bf38      	it	cc
 8001ef6:	250c      	movcc	r5, #12
 8001ef8:	2d00      	cmp	r5, #0
 8001efa:	4606      	mov	r6, r0
 8001efc:	db01      	blt.n	8001f02 <_malloc_r+0x1a>
 8001efe:	42a9      	cmp	r1, r5
 8001f00:	d903      	bls.n	8001f0a <_malloc_r+0x22>
 8001f02:	230c      	movs	r3, #12
 8001f04:	6033      	str	r3, [r6, #0]
 8001f06:	2000      	movs	r0, #0
 8001f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f0a:	f000 fc27 	bl	800275c <__malloc_lock>
 8001f0e:	4921      	ldr	r1, [pc, #132]	; (8001f94 <_malloc_r+0xac>)
 8001f10:	680a      	ldr	r2, [r1, #0]
 8001f12:	4614      	mov	r4, r2
 8001f14:	b99c      	cbnz	r4, 8001f3e <_malloc_r+0x56>
 8001f16:	4f20      	ldr	r7, [pc, #128]	; (8001f98 <_malloc_r+0xb0>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	b923      	cbnz	r3, 8001f26 <_malloc_r+0x3e>
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	4630      	mov	r0, r6
 8001f20:	f000 fb72 	bl	8002608 <_sbrk_r>
 8001f24:	6038      	str	r0, [r7, #0]
 8001f26:	4629      	mov	r1, r5
 8001f28:	4630      	mov	r0, r6
 8001f2a:	f000 fb6d 	bl	8002608 <_sbrk_r>
 8001f2e:	1c43      	adds	r3, r0, #1
 8001f30:	d123      	bne.n	8001f7a <_malloc_r+0x92>
 8001f32:	230c      	movs	r3, #12
 8001f34:	6033      	str	r3, [r6, #0]
 8001f36:	4630      	mov	r0, r6
 8001f38:	f000 fc16 	bl	8002768 <__malloc_unlock>
 8001f3c:	e7e3      	b.n	8001f06 <_malloc_r+0x1e>
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	1b5b      	subs	r3, r3, r5
 8001f42:	d417      	bmi.n	8001f74 <_malloc_r+0x8c>
 8001f44:	2b0b      	cmp	r3, #11
 8001f46:	d903      	bls.n	8001f50 <_malloc_r+0x68>
 8001f48:	6023      	str	r3, [r4, #0]
 8001f4a:	441c      	add	r4, r3
 8001f4c:	6025      	str	r5, [r4, #0]
 8001f4e:	e004      	b.n	8001f5a <_malloc_r+0x72>
 8001f50:	6863      	ldr	r3, [r4, #4]
 8001f52:	42a2      	cmp	r2, r4
 8001f54:	bf0c      	ite	eq
 8001f56:	600b      	streq	r3, [r1, #0]
 8001f58:	6053      	strne	r3, [r2, #4]
 8001f5a:	4630      	mov	r0, r6
 8001f5c:	f000 fc04 	bl	8002768 <__malloc_unlock>
 8001f60:	f104 000b 	add.w	r0, r4, #11
 8001f64:	1d23      	adds	r3, r4, #4
 8001f66:	f020 0007 	bic.w	r0, r0, #7
 8001f6a:	1ac2      	subs	r2, r0, r3
 8001f6c:	d0cc      	beq.n	8001f08 <_malloc_r+0x20>
 8001f6e:	1a1b      	subs	r3, r3, r0
 8001f70:	50a3      	str	r3, [r4, r2]
 8001f72:	e7c9      	b.n	8001f08 <_malloc_r+0x20>
 8001f74:	4622      	mov	r2, r4
 8001f76:	6864      	ldr	r4, [r4, #4]
 8001f78:	e7cc      	b.n	8001f14 <_malloc_r+0x2c>
 8001f7a:	1cc4      	adds	r4, r0, #3
 8001f7c:	f024 0403 	bic.w	r4, r4, #3
 8001f80:	42a0      	cmp	r0, r4
 8001f82:	d0e3      	beq.n	8001f4c <_malloc_r+0x64>
 8001f84:	1a21      	subs	r1, r4, r0
 8001f86:	4630      	mov	r0, r6
 8001f88:	f000 fb3e 	bl	8002608 <_sbrk_r>
 8001f8c:	3001      	adds	r0, #1
 8001f8e:	d1dd      	bne.n	8001f4c <_malloc_r+0x64>
 8001f90:	e7cf      	b.n	8001f32 <_malloc_r+0x4a>
 8001f92:	bf00      	nop
 8001f94:	20000084 	.word	0x20000084
 8001f98:	20000088 	.word	0x20000088

08001f9c <__sfputc_r>:
 8001f9c:	6893      	ldr	r3, [r2, #8]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	b410      	push	{r4}
 8001fa4:	6093      	str	r3, [r2, #8]
 8001fa6:	da08      	bge.n	8001fba <__sfputc_r+0x1e>
 8001fa8:	6994      	ldr	r4, [r2, #24]
 8001faa:	42a3      	cmp	r3, r4
 8001fac:	db01      	blt.n	8001fb2 <__sfputc_r+0x16>
 8001fae:	290a      	cmp	r1, #10
 8001fb0:	d103      	bne.n	8001fba <__sfputc_r+0x1e>
 8001fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fb6:	f7ff bc69 	b.w	800188c <__swbuf_r>
 8001fba:	6813      	ldr	r3, [r2, #0]
 8001fbc:	1c58      	adds	r0, r3, #1
 8001fbe:	6010      	str	r0, [r2, #0]
 8001fc0:	7019      	strb	r1, [r3, #0]
 8001fc2:	4608      	mov	r0, r1
 8001fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <__sfputs_r>:
 8001fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fcc:	4606      	mov	r6, r0
 8001fce:	460f      	mov	r7, r1
 8001fd0:	4614      	mov	r4, r2
 8001fd2:	18d5      	adds	r5, r2, r3
 8001fd4:	42ac      	cmp	r4, r5
 8001fd6:	d101      	bne.n	8001fdc <__sfputs_r+0x12>
 8001fd8:	2000      	movs	r0, #0
 8001fda:	e007      	b.n	8001fec <__sfputs_r+0x22>
 8001fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fe0:	463a      	mov	r2, r7
 8001fe2:	4630      	mov	r0, r6
 8001fe4:	f7ff ffda 	bl	8001f9c <__sfputc_r>
 8001fe8:	1c43      	adds	r3, r0, #1
 8001fea:	d1f3      	bne.n	8001fd4 <__sfputs_r+0xa>
 8001fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ff0 <_vfiprintf_r>:
 8001ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff4:	460d      	mov	r5, r1
 8001ff6:	b09d      	sub	sp, #116	; 0x74
 8001ff8:	4614      	mov	r4, r2
 8001ffa:	4698      	mov	r8, r3
 8001ffc:	4606      	mov	r6, r0
 8001ffe:	b118      	cbz	r0, 8002008 <_vfiprintf_r+0x18>
 8002000:	6983      	ldr	r3, [r0, #24]
 8002002:	b90b      	cbnz	r3, 8002008 <_vfiprintf_r+0x18>
 8002004:	f7ff fe1c 	bl	8001c40 <__sinit>
 8002008:	4b89      	ldr	r3, [pc, #548]	; (8002230 <_vfiprintf_r+0x240>)
 800200a:	429d      	cmp	r5, r3
 800200c:	d11b      	bne.n	8002046 <_vfiprintf_r+0x56>
 800200e:	6875      	ldr	r5, [r6, #4]
 8002010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002012:	07d9      	lsls	r1, r3, #31
 8002014:	d405      	bmi.n	8002022 <_vfiprintf_r+0x32>
 8002016:	89ab      	ldrh	r3, [r5, #12]
 8002018:	059a      	lsls	r2, r3, #22
 800201a:	d402      	bmi.n	8002022 <_vfiprintf_r+0x32>
 800201c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800201e:	f7ff fead 	bl	8001d7c <__retarget_lock_acquire_recursive>
 8002022:	89ab      	ldrh	r3, [r5, #12]
 8002024:	071b      	lsls	r3, r3, #28
 8002026:	d501      	bpl.n	800202c <_vfiprintf_r+0x3c>
 8002028:	692b      	ldr	r3, [r5, #16]
 800202a:	b9eb      	cbnz	r3, 8002068 <_vfiprintf_r+0x78>
 800202c:	4629      	mov	r1, r5
 800202e:	4630      	mov	r0, r6
 8002030:	f7ff fc7e 	bl	8001930 <__swsetup_r>
 8002034:	b1c0      	cbz	r0, 8002068 <_vfiprintf_r+0x78>
 8002036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002038:	07dc      	lsls	r4, r3, #31
 800203a:	d50e      	bpl.n	800205a <_vfiprintf_r+0x6a>
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	b01d      	add	sp, #116	; 0x74
 8002042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002046:	4b7b      	ldr	r3, [pc, #492]	; (8002234 <_vfiprintf_r+0x244>)
 8002048:	429d      	cmp	r5, r3
 800204a:	d101      	bne.n	8002050 <_vfiprintf_r+0x60>
 800204c:	68b5      	ldr	r5, [r6, #8]
 800204e:	e7df      	b.n	8002010 <_vfiprintf_r+0x20>
 8002050:	4b79      	ldr	r3, [pc, #484]	; (8002238 <_vfiprintf_r+0x248>)
 8002052:	429d      	cmp	r5, r3
 8002054:	bf08      	it	eq
 8002056:	68f5      	ldreq	r5, [r6, #12]
 8002058:	e7da      	b.n	8002010 <_vfiprintf_r+0x20>
 800205a:	89ab      	ldrh	r3, [r5, #12]
 800205c:	0598      	lsls	r0, r3, #22
 800205e:	d4ed      	bmi.n	800203c <_vfiprintf_r+0x4c>
 8002060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002062:	f7ff fe8c 	bl	8001d7e <__retarget_lock_release_recursive>
 8002066:	e7e9      	b.n	800203c <_vfiprintf_r+0x4c>
 8002068:	2300      	movs	r3, #0
 800206a:	9309      	str	r3, [sp, #36]	; 0x24
 800206c:	2320      	movs	r3, #32
 800206e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002072:	f8cd 800c 	str.w	r8, [sp, #12]
 8002076:	2330      	movs	r3, #48	; 0x30
 8002078:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800223c <_vfiprintf_r+0x24c>
 800207c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002080:	f04f 0901 	mov.w	r9, #1
 8002084:	4623      	mov	r3, r4
 8002086:	469a      	mov	sl, r3
 8002088:	f813 2b01 	ldrb.w	r2, [r3], #1
 800208c:	b10a      	cbz	r2, 8002092 <_vfiprintf_r+0xa2>
 800208e:	2a25      	cmp	r2, #37	; 0x25
 8002090:	d1f9      	bne.n	8002086 <_vfiprintf_r+0x96>
 8002092:	ebba 0b04 	subs.w	fp, sl, r4
 8002096:	d00b      	beq.n	80020b0 <_vfiprintf_r+0xc0>
 8002098:	465b      	mov	r3, fp
 800209a:	4622      	mov	r2, r4
 800209c:	4629      	mov	r1, r5
 800209e:	4630      	mov	r0, r6
 80020a0:	f7ff ff93 	bl	8001fca <__sfputs_r>
 80020a4:	3001      	adds	r0, #1
 80020a6:	f000 80aa 	beq.w	80021fe <_vfiprintf_r+0x20e>
 80020aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020ac:	445a      	add	r2, fp
 80020ae:	9209      	str	r2, [sp, #36]	; 0x24
 80020b0:	f89a 3000 	ldrb.w	r3, [sl]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80a2 	beq.w	80021fe <_vfiprintf_r+0x20e>
 80020ba:	2300      	movs	r3, #0
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020c4:	f10a 0a01 	add.w	sl, sl, #1
 80020c8:	9304      	str	r3, [sp, #16]
 80020ca:	9307      	str	r3, [sp, #28]
 80020cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020d0:	931a      	str	r3, [sp, #104]	; 0x68
 80020d2:	4654      	mov	r4, sl
 80020d4:	2205      	movs	r2, #5
 80020d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020da:	4858      	ldr	r0, [pc, #352]	; (800223c <_vfiprintf_r+0x24c>)
 80020dc:	f7fe f880 	bl	80001e0 <memchr>
 80020e0:	9a04      	ldr	r2, [sp, #16]
 80020e2:	b9d8      	cbnz	r0, 800211c <_vfiprintf_r+0x12c>
 80020e4:	06d1      	lsls	r1, r2, #27
 80020e6:	bf44      	itt	mi
 80020e8:	2320      	movmi	r3, #32
 80020ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020ee:	0713      	lsls	r3, r2, #28
 80020f0:	bf44      	itt	mi
 80020f2:	232b      	movmi	r3, #43	; 0x2b
 80020f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020f8:	f89a 3000 	ldrb.w	r3, [sl]
 80020fc:	2b2a      	cmp	r3, #42	; 0x2a
 80020fe:	d015      	beq.n	800212c <_vfiprintf_r+0x13c>
 8002100:	9a07      	ldr	r2, [sp, #28]
 8002102:	4654      	mov	r4, sl
 8002104:	2000      	movs	r0, #0
 8002106:	f04f 0c0a 	mov.w	ip, #10
 800210a:	4621      	mov	r1, r4
 800210c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002110:	3b30      	subs	r3, #48	; 0x30
 8002112:	2b09      	cmp	r3, #9
 8002114:	d94e      	bls.n	80021b4 <_vfiprintf_r+0x1c4>
 8002116:	b1b0      	cbz	r0, 8002146 <_vfiprintf_r+0x156>
 8002118:	9207      	str	r2, [sp, #28]
 800211a:	e014      	b.n	8002146 <_vfiprintf_r+0x156>
 800211c:	eba0 0308 	sub.w	r3, r0, r8
 8002120:	fa09 f303 	lsl.w	r3, r9, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	9304      	str	r3, [sp, #16]
 8002128:	46a2      	mov	sl, r4
 800212a:	e7d2      	b.n	80020d2 <_vfiprintf_r+0xe2>
 800212c:	9b03      	ldr	r3, [sp, #12]
 800212e:	1d19      	adds	r1, r3, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	9103      	str	r1, [sp, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	bfbb      	ittet	lt
 8002138:	425b      	neglt	r3, r3
 800213a:	f042 0202 	orrlt.w	r2, r2, #2
 800213e:	9307      	strge	r3, [sp, #28]
 8002140:	9307      	strlt	r3, [sp, #28]
 8002142:	bfb8      	it	lt
 8002144:	9204      	strlt	r2, [sp, #16]
 8002146:	7823      	ldrb	r3, [r4, #0]
 8002148:	2b2e      	cmp	r3, #46	; 0x2e
 800214a:	d10c      	bne.n	8002166 <_vfiprintf_r+0x176>
 800214c:	7863      	ldrb	r3, [r4, #1]
 800214e:	2b2a      	cmp	r3, #42	; 0x2a
 8002150:	d135      	bne.n	80021be <_vfiprintf_r+0x1ce>
 8002152:	9b03      	ldr	r3, [sp, #12]
 8002154:	1d1a      	adds	r2, r3, #4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	9203      	str	r2, [sp, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	bfb8      	it	lt
 800215e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002162:	3402      	adds	r4, #2
 8002164:	9305      	str	r3, [sp, #20]
 8002166:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800224c <_vfiprintf_r+0x25c>
 800216a:	7821      	ldrb	r1, [r4, #0]
 800216c:	2203      	movs	r2, #3
 800216e:	4650      	mov	r0, sl
 8002170:	f7fe f836 	bl	80001e0 <memchr>
 8002174:	b140      	cbz	r0, 8002188 <_vfiprintf_r+0x198>
 8002176:	2340      	movs	r3, #64	; 0x40
 8002178:	eba0 000a 	sub.w	r0, r0, sl
 800217c:	fa03 f000 	lsl.w	r0, r3, r0
 8002180:	9b04      	ldr	r3, [sp, #16]
 8002182:	4303      	orrs	r3, r0
 8002184:	3401      	adds	r4, #1
 8002186:	9304      	str	r3, [sp, #16]
 8002188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800218c:	482c      	ldr	r0, [pc, #176]	; (8002240 <_vfiprintf_r+0x250>)
 800218e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002192:	2206      	movs	r2, #6
 8002194:	f7fe f824 	bl	80001e0 <memchr>
 8002198:	2800      	cmp	r0, #0
 800219a:	d03f      	beq.n	800221c <_vfiprintf_r+0x22c>
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <_vfiprintf_r+0x254>)
 800219e:	bb1b      	cbnz	r3, 80021e8 <_vfiprintf_r+0x1f8>
 80021a0:	9b03      	ldr	r3, [sp, #12]
 80021a2:	3307      	adds	r3, #7
 80021a4:	f023 0307 	bic.w	r3, r3, #7
 80021a8:	3308      	adds	r3, #8
 80021aa:	9303      	str	r3, [sp, #12]
 80021ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021ae:	443b      	add	r3, r7
 80021b0:	9309      	str	r3, [sp, #36]	; 0x24
 80021b2:	e767      	b.n	8002084 <_vfiprintf_r+0x94>
 80021b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80021b8:	460c      	mov	r4, r1
 80021ba:	2001      	movs	r0, #1
 80021bc:	e7a5      	b.n	800210a <_vfiprintf_r+0x11a>
 80021be:	2300      	movs	r3, #0
 80021c0:	3401      	adds	r4, #1
 80021c2:	9305      	str	r3, [sp, #20]
 80021c4:	4619      	mov	r1, r3
 80021c6:	f04f 0c0a 	mov.w	ip, #10
 80021ca:	4620      	mov	r0, r4
 80021cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021d0:	3a30      	subs	r2, #48	; 0x30
 80021d2:	2a09      	cmp	r2, #9
 80021d4:	d903      	bls.n	80021de <_vfiprintf_r+0x1ee>
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0c5      	beq.n	8002166 <_vfiprintf_r+0x176>
 80021da:	9105      	str	r1, [sp, #20]
 80021dc:	e7c3      	b.n	8002166 <_vfiprintf_r+0x176>
 80021de:	fb0c 2101 	mla	r1, ip, r1, r2
 80021e2:	4604      	mov	r4, r0
 80021e4:	2301      	movs	r3, #1
 80021e6:	e7f0      	b.n	80021ca <_vfiprintf_r+0x1da>
 80021e8:	ab03      	add	r3, sp, #12
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	462a      	mov	r2, r5
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <_vfiprintf_r+0x258>)
 80021f0:	a904      	add	r1, sp, #16
 80021f2:	4630      	mov	r0, r6
 80021f4:	f3af 8000 	nop.w
 80021f8:	4607      	mov	r7, r0
 80021fa:	1c78      	adds	r0, r7, #1
 80021fc:	d1d6      	bne.n	80021ac <_vfiprintf_r+0x1bc>
 80021fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002200:	07d9      	lsls	r1, r3, #31
 8002202:	d405      	bmi.n	8002210 <_vfiprintf_r+0x220>
 8002204:	89ab      	ldrh	r3, [r5, #12]
 8002206:	059a      	lsls	r2, r3, #22
 8002208:	d402      	bmi.n	8002210 <_vfiprintf_r+0x220>
 800220a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800220c:	f7ff fdb7 	bl	8001d7e <__retarget_lock_release_recursive>
 8002210:	89ab      	ldrh	r3, [r5, #12]
 8002212:	065b      	lsls	r3, r3, #25
 8002214:	f53f af12 	bmi.w	800203c <_vfiprintf_r+0x4c>
 8002218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800221a:	e711      	b.n	8002040 <_vfiprintf_r+0x50>
 800221c:	ab03      	add	r3, sp, #12
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	462a      	mov	r2, r5
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <_vfiprintf_r+0x258>)
 8002224:	a904      	add	r1, sp, #16
 8002226:	4630      	mov	r0, r6
 8002228:	f000 f880 	bl	800232c <_printf_i>
 800222c:	e7e4      	b.n	80021f8 <_vfiprintf_r+0x208>
 800222e:	bf00      	nop
 8002230:	080029e0 	.word	0x080029e0
 8002234:	08002a00 	.word	0x08002a00
 8002238:	080029c0 	.word	0x080029c0
 800223c:	08002a20 	.word	0x08002a20
 8002240:	08002a2a 	.word	0x08002a2a
 8002244:	00000000 	.word	0x00000000
 8002248:	08001fcb 	.word	0x08001fcb
 800224c:	08002a26 	.word	0x08002a26

08002250 <_printf_common>:
 8002250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002254:	4616      	mov	r6, r2
 8002256:	4699      	mov	r9, r3
 8002258:	688a      	ldr	r2, [r1, #8]
 800225a:	690b      	ldr	r3, [r1, #16]
 800225c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002260:	4293      	cmp	r3, r2
 8002262:	bfb8      	it	lt
 8002264:	4613      	movlt	r3, r2
 8002266:	6033      	str	r3, [r6, #0]
 8002268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800226c:	4607      	mov	r7, r0
 800226e:	460c      	mov	r4, r1
 8002270:	b10a      	cbz	r2, 8002276 <_printf_common+0x26>
 8002272:	3301      	adds	r3, #1
 8002274:	6033      	str	r3, [r6, #0]
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	0699      	lsls	r1, r3, #26
 800227a:	bf42      	ittt	mi
 800227c:	6833      	ldrmi	r3, [r6, #0]
 800227e:	3302      	addmi	r3, #2
 8002280:	6033      	strmi	r3, [r6, #0]
 8002282:	6825      	ldr	r5, [r4, #0]
 8002284:	f015 0506 	ands.w	r5, r5, #6
 8002288:	d106      	bne.n	8002298 <_printf_common+0x48>
 800228a:	f104 0a19 	add.w	sl, r4, #25
 800228e:	68e3      	ldr	r3, [r4, #12]
 8002290:	6832      	ldr	r2, [r6, #0]
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	42ab      	cmp	r3, r5
 8002296:	dc26      	bgt.n	80022e6 <_printf_common+0x96>
 8002298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800229c:	1e13      	subs	r3, r2, #0
 800229e:	6822      	ldr	r2, [r4, #0]
 80022a0:	bf18      	it	ne
 80022a2:	2301      	movne	r3, #1
 80022a4:	0692      	lsls	r2, r2, #26
 80022a6:	d42b      	bmi.n	8002300 <_printf_common+0xb0>
 80022a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022ac:	4649      	mov	r1, r9
 80022ae:	4638      	mov	r0, r7
 80022b0:	47c0      	blx	r8
 80022b2:	3001      	adds	r0, #1
 80022b4:	d01e      	beq.n	80022f4 <_printf_common+0xa4>
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	68e5      	ldr	r5, [r4, #12]
 80022ba:	6832      	ldr	r2, [r6, #0]
 80022bc:	f003 0306 	and.w	r3, r3, #6
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	bf08      	it	eq
 80022c4:	1aad      	subeq	r5, r5, r2
 80022c6:	68a3      	ldr	r3, [r4, #8]
 80022c8:	6922      	ldr	r2, [r4, #16]
 80022ca:	bf0c      	ite	eq
 80022cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022d0:	2500      	movne	r5, #0
 80022d2:	4293      	cmp	r3, r2
 80022d4:	bfc4      	itt	gt
 80022d6:	1a9b      	subgt	r3, r3, r2
 80022d8:	18ed      	addgt	r5, r5, r3
 80022da:	2600      	movs	r6, #0
 80022dc:	341a      	adds	r4, #26
 80022de:	42b5      	cmp	r5, r6
 80022e0:	d11a      	bne.n	8002318 <_printf_common+0xc8>
 80022e2:	2000      	movs	r0, #0
 80022e4:	e008      	b.n	80022f8 <_printf_common+0xa8>
 80022e6:	2301      	movs	r3, #1
 80022e8:	4652      	mov	r2, sl
 80022ea:	4649      	mov	r1, r9
 80022ec:	4638      	mov	r0, r7
 80022ee:	47c0      	blx	r8
 80022f0:	3001      	adds	r0, #1
 80022f2:	d103      	bne.n	80022fc <_printf_common+0xac>
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022fc:	3501      	adds	r5, #1
 80022fe:	e7c6      	b.n	800228e <_printf_common+0x3e>
 8002300:	18e1      	adds	r1, r4, r3
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	2030      	movs	r0, #48	; 0x30
 8002306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800230a:	4422      	add	r2, r4
 800230c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002314:	3302      	adds	r3, #2
 8002316:	e7c7      	b.n	80022a8 <_printf_common+0x58>
 8002318:	2301      	movs	r3, #1
 800231a:	4622      	mov	r2, r4
 800231c:	4649      	mov	r1, r9
 800231e:	4638      	mov	r0, r7
 8002320:	47c0      	blx	r8
 8002322:	3001      	adds	r0, #1
 8002324:	d0e6      	beq.n	80022f4 <_printf_common+0xa4>
 8002326:	3601      	adds	r6, #1
 8002328:	e7d9      	b.n	80022de <_printf_common+0x8e>
	...

0800232c <_printf_i>:
 800232c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002330:	460c      	mov	r4, r1
 8002332:	4691      	mov	r9, r2
 8002334:	7e27      	ldrb	r7, [r4, #24]
 8002336:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002338:	2f78      	cmp	r7, #120	; 0x78
 800233a:	4680      	mov	r8, r0
 800233c:	469a      	mov	sl, r3
 800233e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002342:	d807      	bhi.n	8002354 <_printf_i+0x28>
 8002344:	2f62      	cmp	r7, #98	; 0x62
 8002346:	d80a      	bhi.n	800235e <_printf_i+0x32>
 8002348:	2f00      	cmp	r7, #0
 800234a:	f000 80d8 	beq.w	80024fe <_printf_i+0x1d2>
 800234e:	2f58      	cmp	r7, #88	; 0x58
 8002350:	f000 80a3 	beq.w	800249a <_printf_i+0x16e>
 8002354:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800235c:	e03a      	b.n	80023d4 <_printf_i+0xa8>
 800235e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002362:	2b15      	cmp	r3, #21
 8002364:	d8f6      	bhi.n	8002354 <_printf_i+0x28>
 8002366:	a001      	add	r0, pc, #4	; (adr r0, 800236c <_printf_i+0x40>)
 8002368:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800236c:	080023c5 	.word	0x080023c5
 8002370:	080023d9 	.word	0x080023d9
 8002374:	08002355 	.word	0x08002355
 8002378:	08002355 	.word	0x08002355
 800237c:	08002355 	.word	0x08002355
 8002380:	08002355 	.word	0x08002355
 8002384:	080023d9 	.word	0x080023d9
 8002388:	08002355 	.word	0x08002355
 800238c:	08002355 	.word	0x08002355
 8002390:	08002355 	.word	0x08002355
 8002394:	08002355 	.word	0x08002355
 8002398:	080024e5 	.word	0x080024e5
 800239c:	08002409 	.word	0x08002409
 80023a0:	080024c7 	.word	0x080024c7
 80023a4:	08002355 	.word	0x08002355
 80023a8:	08002355 	.word	0x08002355
 80023ac:	08002507 	.word	0x08002507
 80023b0:	08002355 	.word	0x08002355
 80023b4:	08002409 	.word	0x08002409
 80023b8:	08002355 	.word	0x08002355
 80023bc:	08002355 	.word	0x08002355
 80023c0:	080024cf 	.word	0x080024cf
 80023c4:	680b      	ldr	r3, [r1, #0]
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	600a      	str	r2, [r1, #0]
 80023cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80023d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0a3      	b.n	8002520 <_printf_i+0x1f4>
 80023d8:	6825      	ldr	r5, [r4, #0]
 80023da:	6808      	ldr	r0, [r1, #0]
 80023dc:	062e      	lsls	r6, r5, #24
 80023de:	f100 0304 	add.w	r3, r0, #4
 80023e2:	d50a      	bpl.n	80023fa <_printf_i+0xce>
 80023e4:	6805      	ldr	r5, [r0, #0]
 80023e6:	600b      	str	r3, [r1, #0]
 80023e8:	2d00      	cmp	r5, #0
 80023ea:	da03      	bge.n	80023f4 <_printf_i+0xc8>
 80023ec:	232d      	movs	r3, #45	; 0x2d
 80023ee:	426d      	negs	r5, r5
 80023f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023f4:	485e      	ldr	r0, [pc, #376]	; (8002570 <_printf_i+0x244>)
 80023f6:	230a      	movs	r3, #10
 80023f8:	e019      	b.n	800242e <_printf_i+0x102>
 80023fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80023fe:	6805      	ldr	r5, [r0, #0]
 8002400:	600b      	str	r3, [r1, #0]
 8002402:	bf18      	it	ne
 8002404:	b22d      	sxthne	r5, r5
 8002406:	e7ef      	b.n	80023e8 <_printf_i+0xbc>
 8002408:	680b      	ldr	r3, [r1, #0]
 800240a:	6825      	ldr	r5, [r4, #0]
 800240c:	1d18      	adds	r0, r3, #4
 800240e:	6008      	str	r0, [r1, #0]
 8002410:	0628      	lsls	r0, r5, #24
 8002412:	d501      	bpl.n	8002418 <_printf_i+0xec>
 8002414:	681d      	ldr	r5, [r3, #0]
 8002416:	e002      	b.n	800241e <_printf_i+0xf2>
 8002418:	0669      	lsls	r1, r5, #25
 800241a:	d5fb      	bpl.n	8002414 <_printf_i+0xe8>
 800241c:	881d      	ldrh	r5, [r3, #0]
 800241e:	4854      	ldr	r0, [pc, #336]	; (8002570 <_printf_i+0x244>)
 8002420:	2f6f      	cmp	r7, #111	; 0x6f
 8002422:	bf0c      	ite	eq
 8002424:	2308      	moveq	r3, #8
 8002426:	230a      	movne	r3, #10
 8002428:	2100      	movs	r1, #0
 800242a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800242e:	6866      	ldr	r6, [r4, #4]
 8002430:	60a6      	str	r6, [r4, #8]
 8002432:	2e00      	cmp	r6, #0
 8002434:	bfa2      	ittt	ge
 8002436:	6821      	ldrge	r1, [r4, #0]
 8002438:	f021 0104 	bicge.w	r1, r1, #4
 800243c:	6021      	strge	r1, [r4, #0]
 800243e:	b90d      	cbnz	r5, 8002444 <_printf_i+0x118>
 8002440:	2e00      	cmp	r6, #0
 8002442:	d04d      	beq.n	80024e0 <_printf_i+0x1b4>
 8002444:	4616      	mov	r6, r2
 8002446:	fbb5 f1f3 	udiv	r1, r5, r3
 800244a:	fb03 5711 	mls	r7, r3, r1, r5
 800244e:	5dc7      	ldrb	r7, [r0, r7]
 8002450:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002454:	462f      	mov	r7, r5
 8002456:	42bb      	cmp	r3, r7
 8002458:	460d      	mov	r5, r1
 800245a:	d9f4      	bls.n	8002446 <_printf_i+0x11a>
 800245c:	2b08      	cmp	r3, #8
 800245e:	d10b      	bne.n	8002478 <_printf_i+0x14c>
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	07df      	lsls	r7, r3, #31
 8002464:	d508      	bpl.n	8002478 <_printf_i+0x14c>
 8002466:	6923      	ldr	r3, [r4, #16]
 8002468:	6861      	ldr	r1, [r4, #4]
 800246a:	4299      	cmp	r1, r3
 800246c:	bfde      	ittt	le
 800246e:	2330      	movle	r3, #48	; 0x30
 8002470:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002474:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002478:	1b92      	subs	r2, r2, r6
 800247a:	6122      	str	r2, [r4, #16]
 800247c:	f8cd a000 	str.w	sl, [sp]
 8002480:	464b      	mov	r3, r9
 8002482:	aa03      	add	r2, sp, #12
 8002484:	4621      	mov	r1, r4
 8002486:	4640      	mov	r0, r8
 8002488:	f7ff fee2 	bl	8002250 <_printf_common>
 800248c:	3001      	adds	r0, #1
 800248e:	d14c      	bne.n	800252a <_printf_i+0x1fe>
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	b004      	add	sp, #16
 8002496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800249a:	4835      	ldr	r0, [pc, #212]	; (8002570 <_printf_i+0x244>)
 800249c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	680e      	ldr	r6, [r1, #0]
 80024a4:	061f      	lsls	r7, r3, #24
 80024a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80024aa:	600e      	str	r6, [r1, #0]
 80024ac:	d514      	bpl.n	80024d8 <_printf_i+0x1ac>
 80024ae:	07d9      	lsls	r1, r3, #31
 80024b0:	bf44      	itt	mi
 80024b2:	f043 0320 	orrmi.w	r3, r3, #32
 80024b6:	6023      	strmi	r3, [r4, #0]
 80024b8:	b91d      	cbnz	r5, 80024c2 <_printf_i+0x196>
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	f023 0320 	bic.w	r3, r3, #32
 80024c0:	6023      	str	r3, [r4, #0]
 80024c2:	2310      	movs	r3, #16
 80024c4:	e7b0      	b.n	8002428 <_printf_i+0xfc>
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	f043 0320 	orr.w	r3, r3, #32
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	2378      	movs	r3, #120	; 0x78
 80024d0:	4828      	ldr	r0, [pc, #160]	; (8002574 <_printf_i+0x248>)
 80024d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024d6:	e7e3      	b.n	80024a0 <_printf_i+0x174>
 80024d8:	065e      	lsls	r6, r3, #25
 80024da:	bf48      	it	mi
 80024dc:	b2ad      	uxthmi	r5, r5
 80024de:	e7e6      	b.n	80024ae <_printf_i+0x182>
 80024e0:	4616      	mov	r6, r2
 80024e2:	e7bb      	b.n	800245c <_printf_i+0x130>
 80024e4:	680b      	ldr	r3, [r1, #0]
 80024e6:	6826      	ldr	r6, [r4, #0]
 80024e8:	6960      	ldr	r0, [r4, #20]
 80024ea:	1d1d      	adds	r5, r3, #4
 80024ec:	600d      	str	r5, [r1, #0]
 80024ee:	0635      	lsls	r5, r6, #24
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	d501      	bpl.n	80024f8 <_printf_i+0x1cc>
 80024f4:	6018      	str	r0, [r3, #0]
 80024f6:	e002      	b.n	80024fe <_printf_i+0x1d2>
 80024f8:	0671      	lsls	r1, r6, #25
 80024fa:	d5fb      	bpl.n	80024f4 <_printf_i+0x1c8>
 80024fc:	8018      	strh	r0, [r3, #0]
 80024fe:	2300      	movs	r3, #0
 8002500:	6123      	str	r3, [r4, #16]
 8002502:	4616      	mov	r6, r2
 8002504:	e7ba      	b.n	800247c <_printf_i+0x150>
 8002506:	680b      	ldr	r3, [r1, #0]
 8002508:	1d1a      	adds	r2, r3, #4
 800250a:	600a      	str	r2, [r1, #0]
 800250c:	681e      	ldr	r6, [r3, #0]
 800250e:	6862      	ldr	r2, [r4, #4]
 8002510:	2100      	movs	r1, #0
 8002512:	4630      	mov	r0, r6
 8002514:	f7fd fe64 	bl	80001e0 <memchr>
 8002518:	b108      	cbz	r0, 800251e <_printf_i+0x1f2>
 800251a:	1b80      	subs	r0, r0, r6
 800251c:	6060      	str	r0, [r4, #4]
 800251e:	6863      	ldr	r3, [r4, #4]
 8002520:	6123      	str	r3, [r4, #16]
 8002522:	2300      	movs	r3, #0
 8002524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002528:	e7a8      	b.n	800247c <_printf_i+0x150>
 800252a:	6923      	ldr	r3, [r4, #16]
 800252c:	4632      	mov	r2, r6
 800252e:	4649      	mov	r1, r9
 8002530:	4640      	mov	r0, r8
 8002532:	47d0      	blx	sl
 8002534:	3001      	adds	r0, #1
 8002536:	d0ab      	beq.n	8002490 <_printf_i+0x164>
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	079b      	lsls	r3, r3, #30
 800253c:	d413      	bmi.n	8002566 <_printf_i+0x23a>
 800253e:	68e0      	ldr	r0, [r4, #12]
 8002540:	9b03      	ldr	r3, [sp, #12]
 8002542:	4298      	cmp	r0, r3
 8002544:	bfb8      	it	lt
 8002546:	4618      	movlt	r0, r3
 8002548:	e7a4      	b.n	8002494 <_printf_i+0x168>
 800254a:	2301      	movs	r3, #1
 800254c:	4632      	mov	r2, r6
 800254e:	4649      	mov	r1, r9
 8002550:	4640      	mov	r0, r8
 8002552:	47d0      	blx	sl
 8002554:	3001      	adds	r0, #1
 8002556:	d09b      	beq.n	8002490 <_printf_i+0x164>
 8002558:	3501      	adds	r5, #1
 800255a:	68e3      	ldr	r3, [r4, #12]
 800255c:	9903      	ldr	r1, [sp, #12]
 800255e:	1a5b      	subs	r3, r3, r1
 8002560:	42ab      	cmp	r3, r5
 8002562:	dcf2      	bgt.n	800254a <_printf_i+0x21e>
 8002564:	e7eb      	b.n	800253e <_printf_i+0x212>
 8002566:	2500      	movs	r5, #0
 8002568:	f104 0619 	add.w	r6, r4, #25
 800256c:	e7f5      	b.n	800255a <_printf_i+0x22e>
 800256e:	bf00      	nop
 8002570:	08002a31 	.word	0x08002a31
 8002574:	08002a42 	.word	0x08002a42

08002578 <_putc_r>:
 8002578:	b570      	push	{r4, r5, r6, lr}
 800257a:	460d      	mov	r5, r1
 800257c:	4614      	mov	r4, r2
 800257e:	4606      	mov	r6, r0
 8002580:	b118      	cbz	r0, 800258a <_putc_r+0x12>
 8002582:	6983      	ldr	r3, [r0, #24]
 8002584:	b90b      	cbnz	r3, 800258a <_putc_r+0x12>
 8002586:	f7ff fb5b 	bl	8001c40 <__sinit>
 800258a:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <_putc_r+0x84>)
 800258c:	429c      	cmp	r4, r3
 800258e:	d124      	bne.n	80025da <_putc_r+0x62>
 8002590:	6874      	ldr	r4, [r6, #4]
 8002592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002594:	07d8      	lsls	r0, r3, #31
 8002596:	d405      	bmi.n	80025a4 <_putc_r+0x2c>
 8002598:	89a3      	ldrh	r3, [r4, #12]
 800259a:	0599      	lsls	r1, r3, #22
 800259c:	d402      	bmi.n	80025a4 <_putc_r+0x2c>
 800259e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025a0:	f7ff fbec 	bl	8001d7c <__retarget_lock_acquire_recursive>
 80025a4:	68a3      	ldr	r3, [r4, #8]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	60a3      	str	r3, [r4, #8]
 80025ac:	da05      	bge.n	80025ba <_putc_r+0x42>
 80025ae:	69a2      	ldr	r2, [r4, #24]
 80025b0:	4293      	cmp	r3, r2
 80025b2:	db1c      	blt.n	80025ee <_putc_r+0x76>
 80025b4:	b2eb      	uxtb	r3, r5
 80025b6:	2b0a      	cmp	r3, #10
 80025b8:	d019      	beq.n	80025ee <_putc_r+0x76>
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	6022      	str	r2, [r4, #0]
 80025c0:	701d      	strb	r5, [r3, #0]
 80025c2:	b2ed      	uxtb	r5, r5
 80025c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025c6:	07da      	lsls	r2, r3, #31
 80025c8:	d405      	bmi.n	80025d6 <_putc_r+0x5e>
 80025ca:	89a3      	ldrh	r3, [r4, #12]
 80025cc:	059b      	lsls	r3, r3, #22
 80025ce:	d402      	bmi.n	80025d6 <_putc_r+0x5e>
 80025d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025d2:	f7ff fbd4 	bl	8001d7e <__retarget_lock_release_recursive>
 80025d6:	4628      	mov	r0, r5
 80025d8:	bd70      	pop	{r4, r5, r6, pc}
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <_putc_r+0x88>)
 80025dc:	429c      	cmp	r4, r3
 80025de:	d101      	bne.n	80025e4 <_putc_r+0x6c>
 80025e0:	68b4      	ldr	r4, [r6, #8]
 80025e2:	e7d6      	b.n	8002592 <_putc_r+0x1a>
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <_putc_r+0x8c>)
 80025e6:	429c      	cmp	r4, r3
 80025e8:	bf08      	it	eq
 80025ea:	68f4      	ldreq	r4, [r6, #12]
 80025ec:	e7d1      	b.n	8002592 <_putc_r+0x1a>
 80025ee:	4629      	mov	r1, r5
 80025f0:	4622      	mov	r2, r4
 80025f2:	4630      	mov	r0, r6
 80025f4:	f7ff f94a 	bl	800188c <__swbuf_r>
 80025f8:	4605      	mov	r5, r0
 80025fa:	e7e3      	b.n	80025c4 <_putc_r+0x4c>
 80025fc:	080029e0 	.word	0x080029e0
 8002600:	08002a00 	.word	0x08002a00
 8002604:	080029c0 	.word	0x080029c0

08002608 <_sbrk_r>:
 8002608:	b538      	push	{r3, r4, r5, lr}
 800260a:	4d06      	ldr	r5, [pc, #24]	; (8002624 <_sbrk_r+0x1c>)
 800260c:	2300      	movs	r3, #0
 800260e:	4604      	mov	r4, r0
 8002610:	4608      	mov	r0, r1
 8002612:	602b      	str	r3, [r5, #0]
 8002614:	f7fe fc92 	bl	8000f3c <_sbrk>
 8002618:	1c43      	adds	r3, r0, #1
 800261a:	d102      	bne.n	8002622 <_sbrk_r+0x1a>
 800261c:	682b      	ldr	r3, [r5, #0]
 800261e:	b103      	cbz	r3, 8002622 <_sbrk_r+0x1a>
 8002620:	6023      	str	r3, [r4, #0]
 8002622:	bd38      	pop	{r3, r4, r5, pc}
 8002624:	20000104 	.word	0x20000104

08002628 <__sread>:
 8002628:	b510      	push	{r4, lr}
 800262a:	460c      	mov	r4, r1
 800262c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002630:	f000 f8a0 	bl	8002774 <_read_r>
 8002634:	2800      	cmp	r0, #0
 8002636:	bfab      	itete	ge
 8002638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800263a:	89a3      	ldrhlt	r3, [r4, #12]
 800263c:	181b      	addge	r3, r3, r0
 800263e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002642:	bfac      	ite	ge
 8002644:	6563      	strge	r3, [r4, #84]	; 0x54
 8002646:	81a3      	strhlt	r3, [r4, #12]
 8002648:	bd10      	pop	{r4, pc}

0800264a <__swrite>:
 800264a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800264e:	461f      	mov	r7, r3
 8002650:	898b      	ldrh	r3, [r1, #12]
 8002652:	05db      	lsls	r3, r3, #23
 8002654:	4605      	mov	r5, r0
 8002656:	460c      	mov	r4, r1
 8002658:	4616      	mov	r6, r2
 800265a:	d505      	bpl.n	8002668 <__swrite+0x1e>
 800265c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002660:	2302      	movs	r3, #2
 8002662:	2200      	movs	r2, #0
 8002664:	f000 f868 	bl	8002738 <_lseek_r>
 8002668:	89a3      	ldrh	r3, [r4, #12]
 800266a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800266e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002672:	81a3      	strh	r3, [r4, #12]
 8002674:	4632      	mov	r2, r6
 8002676:	463b      	mov	r3, r7
 8002678:	4628      	mov	r0, r5
 800267a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800267e:	f000 b817 	b.w	80026b0 <_write_r>

08002682 <__sseek>:
 8002682:	b510      	push	{r4, lr}
 8002684:	460c      	mov	r4, r1
 8002686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800268a:	f000 f855 	bl	8002738 <_lseek_r>
 800268e:	1c43      	adds	r3, r0, #1
 8002690:	89a3      	ldrh	r3, [r4, #12]
 8002692:	bf15      	itete	ne
 8002694:	6560      	strne	r0, [r4, #84]	; 0x54
 8002696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800269a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800269e:	81a3      	strheq	r3, [r4, #12]
 80026a0:	bf18      	it	ne
 80026a2:	81a3      	strhne	r3, [r4, #12]
 80026a4:	bd10      	pop	{r4, pc}

080026a6 <__sclose>:
 80026a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026aa:	f000 b813 	b.w	80026d4 <_close_r>
	...

080026b0 <_write_r>:
 80026b0:	b538      	push	{r3, r4, r5, lr}
 80026b2:	4d07      	ldr	r5, [pc, #28]	; (80026d0 <_write_r+0x20>)
 80026b4:	4604      	mov	r4, r0
 80026b6:	4608      	mov	r0, r1
 80026b8:	4611      	mov	r1, r2
 80026ba:	2200      	movs	r2, #0
 80026bc:	602a      	str	r2, [r5, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	f7fe fbeb 	bl	8000e9a <_write>
 80026c4:	1c43      	adds	r3, r0, #1
 80026c6:	d102      	bne.n	80026ce <_write_r+0x1e>
 80026c8:	682b      	ldr	r3, [r5, #0]
 80026ca:	b103      	cbz	r3, 80026ce <_write_r+0x1e>
 80026cc:	6023      	str	r3, [r4, #0]
 80026ce:	bd38      	pop	{r3, r4, r5, pc}
 80026d0:	20000104 	.word	0x20000104

080026d4 <_close_r>:
 80026d4:	b538      	push	{r3, r4, r5, lr}
 80026d6:	4d06      	ldr	r5, [pc, #24]	; (80026f0 <_close_r+0x1c>)
 80026d8:	2300      	movs	r3, #0
 80026da:	4604      	mov	r4, r0
 80026dc:	4608      	mov	r0, r1
 80026de:	602b      	str	r3, [r5, #0]
 80026e0:	f7fe fbf7 	bl	8000ed2 <_close>
 80026e4:	1c43      	adds	r3, r0, #1
 80026e6:	d102      	bne.n	80026ee <_close_r+0x1a>
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	b103      	cbz	r3, 80026ee <_close_r+0x1a>
 80026ec:	6023      	str	r3, [r4, #0]
 80026ee:	bd38      	pop	{r3, r4, r5, pc}
 80026f0:	20000104 	.word	0x20000104

080026f4 <_fstat_r>:
 80026f4:	b538      	push	{r3, r4, r5, lr}
 80026f6:	4d07      	ldr	r5, [pc, #28]	; (8002714 <_fstat_r+0x20>)
 80026f8:	2300      	movs	r3, #0
 80026fa:	4604      	mov	r4, r0
 80026fc:	4608      	mov	r0, r1
 80026fe:	4611      	mov	r1, r2
 8002700:	602b      	str	r3, [r5, #0]
 8002702:	f7fe fbf2 	bl	8000eea <_fstat>
 8002706:	1c43      	adds	r3, r0, #1
 8002708:	d102      	bne.n	8002710 <_fstat_r+0x1c>
 800270a:	682b      	ldr	r3, [r5, #0]
 800270c:	b103      	cbz	r3, 8002710 <_fstat_r+0x1c>
 800270e:	6023      	str	r3, [r4, #0]
 8002710:	bd38      	pop	{r3, r4, r5, pc}
 8002712:	bf00      	nop
 8002714:	20000104 	.word	0x20000104

08002718 <_isatty_r>:
 8002718:	b538      	push	{r3, r4, r5, lr}
 800271a:	4d06      	ldr	r5, [pc, #24]	; (8002734 <_isatty_r+0x1c>)
 800271c:	2300      	movs	r3, #0
 800271e:	4604      	mov	r4, r0
 8002720:	4608      	mov	r0, r1
 8002722:	602b      	str	r3, [r5, #0]
 8002724:	f7fe fbf1 	bl	8000f0a <_isatty>
 8002728:	1c43      	adds	r3, r0, #1
 800272a:	d102      	bne.n	8002732 <_isatty_r+0x1a>
 800272c:	682b      	ldr	r3, [r5, #0]
 800272e:	b103      	cbz	r3, 8002732 <_isatty_r+0x1a>
 8002730:	6023      	str	r3, [r4, #0]
 8002732:	bd38      	pop	{r3, r4, r5, pc}
 8002734:	20000104 	.word	0x20000104

08002738 <_lseek_r>:
 8002738:	b538      	push	{r3, r4, r5, lr}
 800273a:	4d07      	ldr	r5, [pc, #28]	; (8002758 <_lseek_r+0x20>)
 800273c:	4604      	mov	r4, r0
 800273e:	4608      	mov	r0, r1
 8002740:	4611      	mov	r1, r2
 8002742:	2200      	movs	r2, #0
 8002744:	602a      	str	r2, [r5, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	f7fe fbea 	bl	8000f20 <_lseek>
 800274c:	1c43      	adds	r3, r0, #1
 800274e:	d102      	bne.n	8002756 <_lseek_r+0x1e>
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	b103      	cbz	r3, 8002756 <_lseek_r+0x1e>
 8002754:	6023      	str	r3, [r4, #0]
 8002756:	bd38      	pop	{r3, r4, r5, pc}
 8002758:	20000104 	.word	0x20000104

0800275c <__malloc_lock>:
 800275c:	4801      	ldr	r0, [pc, #4]	; (8002764 <__malloc_lock+0x8>)
 800275e:	f7ff bb0d 	b.w	8001d7c <__retarget_lock_acquire_recursive>
 8002762:	bf00      	nop
 8002764:	200000fc 	.word	0x200000fc

08002768 <__malloc_unlock>:
 8002768:	4801      	ldr	r0, [pc, #4]	; (8002770 <__malloc_unlock+0x8>)
 800276a:	f7ff bb08 	b.w	8001d7e <__retarget_lock_release_recursive>
 800276e:	bf00      	nop
 8002770:	200000fc 	.word	0x200000fc

08002774 <_read_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	4d07      	ldr	r5, [pc, #28]	; (8002794 <_read_r+0x20>)
 8002778:	4604      	mov	r4, r0
 800277a:	4608      	mov	r0, r1
 800277c:	4611      	mov	r1, r2
 800277e:	2200      	movs	r2, #0
 8002780:	602a      	str	r2, [r5, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	f7fe fb6c 	bl	8000e60 <_read>
 8002788:	1c43      	adds	r3, r0, #1
 800278a:	d102      	bne.n	8002792 <_read_r+0x1e>
 800278c:	682b      	ldr	r3, [r5, #0]
 800278e:	b103      	cbz	r3, 8002792 <_read_r+0x1e>
 8002790:	6023      	str	r3, [r4, #0]
 8002792:	bd38      	pop	{r3, r4, r5, pc}
 8002794:	20000104 	.word	0x20000104

08002798 <_init>:
 8002798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279a:	bf00      	nop
 800279c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279e:	bc08      	pop	{r3}
 80027a0:	469e      	mov	lr, r3
 80027a2:	4770      	bx	lr

080027a4 <_fini>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	bf00      	nop
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr
