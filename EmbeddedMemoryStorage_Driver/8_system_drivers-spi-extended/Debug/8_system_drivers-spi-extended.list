
8_system_drivers-spi-extended.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a34  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bcc  08000bcc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bcc  08000bcc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000bcc  08000bcc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bcc  08000bcc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bcc  08000bcc  00010bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bd0  08000bd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000004  08000bd8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000bd8  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028aa  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009bd  00000000  00000000  000228de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  000232a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000128  00000000  00000000  00023440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f371  00000000  00000000  00023568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002f89  00000000  00000000  000328d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000543a2  00000000  00000000  00035862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00089c04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000400  00000000  00000000  00089c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000bb4 	.word	0x08000bb4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000bb4 	.word	0x08000bb4

080001d8 <pa1_adc_init>:
#define CR2_CONT	 (1U<<1)
#define CR2_SWSTART	  (1U<<30)
#define SR_EOC		  (1U<<1)

void pa1_adc_init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	/****Configure the ADC GPIO Pin**/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b14      	ldr	r3, [pc, #80]	; (8000230 <pa1_adc_init+0x58>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a13      	ldr	r2, [pc, #76]	; (8000230 <pa1_adc_init+0x58>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA1 mode to analog mode*/
	GPIOA->MODER |=(1U<<2);
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <pa1_adc_init+0x5c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a11      	ldr	r2, [pc, #68]	; (8000234 <pa1_adc_init+0x5c>)
 80001ee:	f043 0304 	orr.w	r3, r3, #4
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 80001f4:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <pa1_adc_init+0x5c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a0e      	ldr	r2, [pc, #56]	; (8000234 <pa1_adc_init+0x5c>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6013      	str	r3, [r2, #0]

	/****Configure the ADC Module**/
	/*Enable clock access to the ADC module*/
	RCC->APB2ENR |=ADC1EN;
 8000200:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <pa1_adc_init+0x58>)
 8000202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000204:	4a0a      	ldr	r2, [pc, #40]	; (8000230 <pa1_adc_init+0x58>)
 8000206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800020a:	6453      	str	r3, [r2, #68]	; 0x44

	/*Set conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <pa1_adc_init+0x60>)
 800020e:	2201      	movs	r2, #1
 8000210:	635a      	str	r2, [r3, #52]	; 0x34

	/*Set conversion sequence length*/
	ADC1->SQR1 = AD_SEQ_LEN_1;
 8000212:	4b09      	ldr	r3, [pc, #36]	; (8000238 <pa1_adc_init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |=CR2_ADCON;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <pa1_adc_init+0x60>)
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	4a06      	ldr	r2, [pc, #24]	; (8000238 <pa1_adc_init+0x60>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6093      	str	r3, [r2, #8]

}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40023800 	.word	0x40023800
 8000234:	40020000 	.word	0x40020000
 8000238:	40012000 	.word	0x40012000

0800023c <start_conversion>:


void start_conversion(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |=CR2_CONT;
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <start_conversion+0x28>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <start_conversion+0x28>)
 8000246:	f043 0302 	orr.w	r3, r3, #2
 800024a:	6093      	str	r3, [r2, #8]

	/*Start ADC conversion*/
	ADC1->CR2 |=CR2_SWSTART;
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <start_conversion+0x28>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <start_conversion+0x28>)
 8000252:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000256:	6093      	str	r3, [r2, #8]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40012000 	.word	0x40012000

08000268 <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800026c:	4b0b      	ldr	r3, [pc, #44]	; (800029c <led_init+0x34>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000270:	4a0a      	ldr	r2, [pc, #40]	; (800029c <led_init+0x34>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 8000278:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <led_init+0x38>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a08      	ldr	r2, [pc, #32]	; (80002a0 <led_init+0x38>)
 800027e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000282:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <led_init+0x38>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <led_init+0x38>)
 800028a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020000 	.word	0x40020000

080002a4 <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <button_init+0x34>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <button_init+0x34>)
 80002ae:	f043 0304 	orr.w	r3, r3, #4
 80002b2:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <button_init+0x38>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a08      	ldr	r2, [pc, #32]	; (80002dc <button_init+0x38>)
 80002ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80002be:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <button_init+0x38>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a05      	ldr	r2, [pc, #20]	; (80002dc <button_init+0x38>)
 80002c6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002ca:	6013      	str	r3, [r2, #0]

}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020800 	.word	0x40020800

080002e0 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <fpu_enable+0x50>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a11      	ldr	r2, [pc, #68]	; (8000330 <fpu_enable+0x50>)
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<21);
 80002f4:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <fpu_enable+0x50>)
 80002f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002fa:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <fpu_enable+0x50>)
 80002fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<22);
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <fpu_enable+0x50>)
 8000306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800030a:	4a09      	ldr	r2, [pc, #36]	; (8000330 <fpu_enable+0x50>)
 800030c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<23);
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <fpu_enable+0x50>)
 8000316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800031a:	4a05      	ldr	r2, [pc, #20]	; (8000330 <fpu_enable+0x50>)
 800031c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <main>:

uint8_t tx_buffer[1] = {0xDE};
uint8_t rx_buffer[1];

int main()
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	fpu_enable();
 8000338:	f7ff ffd2 	bl	80002e0 <fpu_enable>

	/*Initialize timebase*/
	timebase_init();
 800033c:	f000 fb50 	bl	80009e0 <timebase_init>

	/*Initialize debug UART*/
	debug_uart_init();
 8000340:	f000 fb78 	bl	8000a34 <debug_uart_init>



	/*Initialize LED*/
	led_init();
 8000344:	f7ff ff90 	bl	8000268 <led_init>

	/*Initialize Push button*/
	button_init();
 8000348:	f7ff ffac 	bl	80002a4 <button_init>

	/*Initialize ADC*/
	pa1_adc_init();
 800034c:	f7ff ff44 	bl	80001d8 <pa1_adc_init>

	/*Start conversion*/
	start_conversion();
 8000350:	f7ff ff74 	bl	800023c <start_conversion>

	/*Initialize spi*/
	test_spi_init();
 8000354:	f000 f814 	bl	8000380 <test_spi_init>

	spi_transmit(&hspi1,tx_buffer,1,10);
 8000358:	230a      	movs	r3, #10
 800035a:	2201      	movs	r2, #1
 800035c:	4905      	ldr	r1, [pc, #20]	; (8000374 <main+0x40>)
 800035e:	4806      	ldr	r0, [pc, #24]	; (8000378 <main+0x44>)
 8000360:	f000 f926 	bl	80005b0 <spi_transmit>

	spi_receive(&hspi1,rx_buffer,1,1);
 8000364:	2301      	movs	r3, #1
 8000366:	2201      	movs	r2, #1
 8000368:	4904      	ldr	r1, [pc, #16]	; (800037c <main+0x48>)
 800036a:	4803      	ldr	r0, [pc, #12]	; (8000378 <main+0x44>)
 800036c:	f000 fa3e 	bl	80007ec <spi_receive>

	while(1)
 8000370:	e7fe      	b.n	8000370 <main+0x3c>
 8000372:	bf00      	nop
 8000374:	20000000 	.word	0x20000000
 8000378:	20000024 	.word	0x20000024
 800037c:	20000020 	.word	0x20000020

08000380 <test_spi_init>:

	}
}

static void test_spi_init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <test_spi_init+0x50>)
 8000386:	4a13      	ldr	r2, [pc, #76]	; (80003d4 <test_spi_init+0x54>)
 8000388:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <test_spi_init+0x50>)
 800038c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000390:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
 8000392:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <test_spi_init+0x50>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000398:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <test_spi_init+0x50>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <test_spi_init+0x50>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
 80003a4:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <test_spi_init+0x50>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS =  SPI_NSS_SOFT;
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <test_spi_init+0x50>)
 80003ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003b0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BuadRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003b2:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <test_spi_init+0x50>)
 80003b4:	2208      	movs	r2, #8
 80003b6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <test_spi_init+0x50>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003be:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <test_spi_init+0x50>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	629a      	str	r2, [r3, #40]	; 0x28


	/*Initialize spi*/
	spi_init(&hspi1);
 80003c4:	4802      	ldr	r0, [pc, #8]	; (80003d0 <test_spi_init+0x50>)
 80003c6:	f000 f88b 	bl	80004e0 <spi_init>


}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000024 	.word	0x20000024
 80003d4:	40013000 	.word	0x40013000

080003d8 <spi1_gpio_init>:
#include "stddef.h"

#define GPIOAEN		(1U<<0)
#define SPI1EN		(1U<<12)
void spi1_gpio_init(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 80003dc:	4b3e      	ldr	r3, [pc, #248]	; (80004d8 <spi1_gpio_init+0x100>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	4a3d      	ldr	r2, [pc, #244]	; (80004d8 <spi1_gpio_init+0x100>)
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5,PA6,PA7 mode to alternate function mode*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 80003e8:	4b3c      	ldr	r3, [pc, #240]	; (80004dc <spi1_gpio_init+0x104>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a3b      	ldr	r2, [pc, #236]	; (80004dc <spi1_gpio_init+0x104>)
 80003ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80003f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 80003f4:	4b39      	ldr	r3, [pc, #228]	; (80004dc <spi1_gpio_init+0x104>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a38      	ldr	r2, [pc, #224]	; (80004dc <spi1_gpio_init+0x104>)
 80003fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003fe:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 8000400:	4b36      	ldr	r3, [pc, #216]	; (80004dc <spi1_gpio_init+0x104>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a35      	ldr	r2, [pc, #212]	; (80004dc <spi1_gpio_init+0x104>)
 8000406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800040a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 800040c:	4b33      	ldr	r3, [pc, #204]	; (80004dc <spi1_gpio_init+0x104>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a32      	ldr	r2, [pc, #200]	; (80004dc <spi1_gpio_init+0x104>)
 8000412:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000416:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 8000418:	4b30      	ldr	r3, [pc, #192]	; (80004dc <spi1_gpio_init+0x104>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a2f      	ldr	r2, [pc, #188]	; (80004dc <spi1_gpio_init+0x104>)
 800041e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000422:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 8000424:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <spi1_gpio_init+0x104>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a2c      	ldr	r2, [pc, #176]	; (80004dc <spi1_gpio_init+0x104>)
 800042a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800042e:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/

	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 8000430:	4b2a      	ldr	r3, [pc, #168]	; (80004dc <spi1_gpio_init+0x104>)
 8000432:	6a1b      	ldr	r3, [r3, #32]
 8000434:	4a29      	ldr	r2, [pc, #164]	; (80004dc <spi1_gpio_init+0x104>)
 8000436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800043a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 800043c:	4b27      	ldr	r3, [pc, #156]	; (80004dc <spi1_gpio_init+0x104>)
 800043e:	6a1b      	ldr	r3, [r3, #32]
 8000440:	4a26      	ldr	r2, [pc, #152]	; (80004dc <spi1_gpio_init+0x104>)
 8000442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000446:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 8000448:	4b24      	ldr	r3, [pc, #144]	; (80004dc <spi1_gpio_init+0x104>)
 800044a:	6a1b      	ldr	r3, [r3, #32]
 800044c:	4a23      	ldr	r2, [pc, #140]	; (80004dc <spi1_gpio_init+0x104>)
 800044e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000452:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 8000454:	4b21      	ldr	r3, [pc, #132]	; (80004dc <spi1_gpio_init+0x104>)
 8000456:	6a1b      	ldr	r3, [r3, #32]
 8000458:	4a20      	ldr	r2, [pc, #128]	; (80004dc <spi1_gpio_init+0x104>)
 800045a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800045e:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 8000460:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <spi1_gpio_init+0x104>)
 8000462:	6a1b      	ldr	r3, [r3, #32]
 8000464:	4a1d      	ldr	r2, [pc, #116]	; (80004dc <spi1_gpio_init+0x104>)
 8000466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800046a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<25);
 800046c:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <spi1_gpio_init+0x104>)
 800046e:	6a1b      	ldr	r3, [r3, #32]
 8000470:	4a1a      	ldr	r2, [pc, #104]	; (80004dc <spi1_gpio_init+0x104>)
 8000472:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000476:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 8000478:	4b18      	ldr	r3, [pc, #96]	; (80004dc <spi1_gpio_init+0x104>)
 800047a:	6a1b      	ldr	r3, [r3, #32]
 800047c:	4a17      	ldr	r2, [pc, #92]	; (80004dc <spi1_gpio_init+0x104>)
 800047e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000482:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<27);
 8000484:	4b15      	ldr	r3, [pc, #84]	; (80004dc <spi1_gpio_init+0x104>)
 8000486:	6a1b      	ldr	r3, [r3, #32]
 8000488:	4a14      	ldr	r2, [pc, #80]	; (80004dc <spi1_gpio_init+0x104>)
 800048a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800048e:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <spi1_gpio_init+0x104>)
 8000492:	6a1b      	ldr	r3, [r3, #32]
 8000494:	4a11      	ldr	r2, [pc, #68]	; (80004dc <spi1_gpio_init+0x104>)
 8000496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<29);
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <spi1_gpio_init+0x104>)
 800049e:	6a1b      	ldr	r3, [r3, #32]
 80004a0:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <spi1_gpio_init+0x104>)
 80004a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80004a6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <spi1_gpio_init+0x104>)
 80004aa:	6a1b      	ldr	r3, [r3, #32]
 80004ac:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <spi1_gpio_init+0x104>)
 80004ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80004b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<31);
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <spi1_gpio_init+0x104>)
 80004b6:	6a1b      	ldr	r3, [r3, #32]
 80004b8:	4a08      	ldr	r2, [pc, #32]	; (80004dc <spi1_gpio_init+0x104>)
 80004ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80004be:	6213      	str	r3, [r2, #32]

	/*Enable clock access to SPI1*/
	RCC->APB2ENR |=SPI1EN;
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <spi1_gpio_init+0x100>)
 80004c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <spi1_gpio_init+0x100>)
 80004c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004ca:	6453      	str	r3, [r2, #68]	; 0x44

}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40023800 	.word	0x40023800
 80004dc:	40020000 	.word	0x40020000

080004e0 <spi_init>:

StatusTypeDef spi_init(SPI_HandleTypeDef *hspi)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	/*Check spi handle allocation*/
	if(hspi == NULL)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d101      	bne.n	80004f2 <spi_init+0x12>
	{
		return DEV_ERROR;
 80004ee:	2301      	movs	r3, #1
 80004f0:	e05a      	b.n	80005a8 <spi_init+0xc8>
	}

	/*Disable CRC calculation*/
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2200      	movs	r2, #0
 80004f6:	629a      	str	r2, [r3, #40]	; 0x28

	if(hspi->State == SPI_STATE_RESET)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d101      	bne.n	8000506 <spi_init+0x26>
	{
		spi1_gpio_init();
 8000502:	f7ff ff69 	bl	80003d8 <spi1_gpio_init>
	}

   hspi->State =  SPI_STATE_BUSY;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2202      	movs	r2, #2
 800050a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800051c:	601a      	str	r2, [r3, #0]

   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
   Communication speed, First bit and CRC calculation state */
   WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800052e:	431a      	orrs	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000538:	431a      	orrs	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	691b      	ldr	r3, [r3, #16]
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	431a      	orrs	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	431a      	orrs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000556:	431a      	orrs	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	69db      	ldr	r3, [r3, #28]
 800055c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000560:	431a      	orrs	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6a1b      	ldr	r3, [r3, #32]
 8000566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056a:	ea42 0103 	orr.w	r1, r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000572:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	430a      	orrs	r2, r1
 800057c:	601a      	str	r2, [r3, #0]
                                   (hspi->Init.BuadRatePrescaler & SPI_CR1_BR_Msk) |
                                   (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                   (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

   /* Configure : NSS management, TI Mode */
   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	0c1b      	lsrs	r3, r3, #16
 8000584:	f003 0104 	and.w	r1, r3, #4
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800058c:	f003 0210 	and.w	r2, r3, #16
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	430a      	orrs	r2, r1
 8000596:	605a      	str	r2, [r3, #4]

  hspi->ErrorCode =  SPI_ERROR_NONE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2200      	movs	r2, #0
 800059c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->State =  SPI_STATE_READY;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2201      	movs	r2, #1
 80005a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   return DEV_OK;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <spi_transmit>:



StatusTypeDef spi_transmit(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4613      	mov	r3, r2
 80005be:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 80005c0:	2300      	movs	r3, #0
 80005c2:	75fb      	strb	r3, [r7, #23]
	uint16_t tx_xfer_cnt;


	tx_xfer_cnt  = size;
 80005c4:	88fb      	ldrh	r3, [r7, #6]
 80005c6:	82bb      	strh	r3, [r7, #20]
	tickstart = get_tick();
 80005c8:	f000 f9e6 	bl	8000998 <get_tick>
 80005cc:	6138      	str	r0, [r7, #16]

	if(hspi->State != SPI_STATE_READY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d007      	beq.n	80005e8 <spi_transmit+0x38>
	{
		error_code = DEV_BUSY;
 80005d8:	2302      	movs	r3, #2
 80005da:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2201      	movs	r2, #1
 80005e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return error_code;
 80005e4:	7dfb      	ldrb	r3, [r7, #23]
 80005e6:	e0fd      	b.n	80007e4 <spi_transmit+0x234>
	}

	if((p_data == NULL) || (size  == 0))
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d002      	beq.n	80005f4 <spi_transmit+0x44>
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d107      	bne.n	8000604 <spi_transmit+0x54>
	{
		error_code =  DEV_ERROR;
 80005f4:	2301      	movs	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2201      	movs	r2, #1
 80005fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return error_code;
 8000600:	7dfb      	ldrb	r3, [r7, #23]
 8000602:	e0ef      	b.n	80007e4 <spi_transmit+0x234>
	}

	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_TX;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2203      	movs	r2, #3
 8000608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2200      	movs	r2, #0
 8000610:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->pTxBuffPtr = (uint8_t *)p_data;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi->TxXferSize =  size;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	88fa      	ldrh	r2, [r7, #6]
 800061c:	861a      	strh	r2, [r3, #48]	; 0x30
	hspi->TxXferCount=  size;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	88fa      	ldrh	r2, [r7, #6]
 8000622:	865a      	strh	r2, [r3, #50]	; 0x32


	hspi->pRxBuffPtr = (uint8_t *)NULL;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	2200      	movs	r2, #0
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
	hspi->RxXferSize =  0;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	2200      	movs	r2, #0
 800062e:	871a      	strh	r2, [r3, #56]	; 0x38
	hspi->RxXferCount=  0;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2200      	movs	r2, #0
 8000634:	875a      	strh	r2, [r3, #58]	; 0x3a

	/*Configure communication direction*/
	if(hspi->Init.Direction  ==  SPI_DIRECTION_1LINE)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800063e:	d10f      	bne.n	8000660 <spi_transmit+0xb0>
	{
		CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800064e:	601a      	str	r2, [r3, #0]

		/*Set 1 line TX*/
		SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIOE);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800065e:	601a      	str	r2, [r3, #0]

	}

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800066a:	2b40      	cmp	r3, #64	; 0x40
 800066c:	d007      	beq.n	800067e <spi_transmit+0xce>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800067c:	601a      	str	r2, [r3, #0]
	}

	/*Transmit data in 16 bit mode*/
	if(hspi->Init.DataSize ==  SPI_DATASIZE_16BIT)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000686:	d150      	bne.n	800072a <spi_transmit+0x17a>
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  1))
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <spi_transmit+0xe6>
 8000690:	8abb      	ldrh	r3, [r7, #20]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d143      	bne.n	800071e <spi_transmit+0x16e>
		{
			hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069a:	881a      	ldrh	r2, [r3, #0]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr +=sizeof(uint16_t);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a6:	1c9a      	adds	r2, r3, #2
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
			hspi->TxXferCount--;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	3b01      	subs	r3, #1
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	865a      	strh	r2, [r3, #50]	; 0x32
		}

		while(hspi->TxXferCount> 0)
 80006ba:	e030      	b.n	800071e <spi_transmit+0x16e>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d012      	beq.n	80006f0 <spi_transmit+0x140>
			{
				hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ce:	881a      	ldrh	r2, [r3, #0]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr +=sizeof(uint16_t);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006da:	1c9a      	adds	r2, r3, #2
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
				hspi->TxXferCount--;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	3b01      	subs	r3, #1
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	865a      	strh	r2, [r3, #50]	; 0x32
 80006ee:	e016      	b.n	800071e <spi_transmit+0x16e>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80006f0:	f000 f952 	bl	8000998 <get_tick>
 80006f4:	4602      	mov	r2, r0
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d803      	bhi.n	8000708 <spi_transmit+0x158>
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000706:	d102      	bne.n	800070e <spi_transmit+0x15e>
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d107      	bne.n	800071e <spi_transmit+0x16e>
		         {
					error_code = DEV_TIMEOUT;
 800070e:	2303      	movs	r3, #3
 8000710:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2201      	movs	r2, #1
 8000716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					return error_code;
 800071a:	7dfb      	ldrb	r3, [r7, #23]
 800071c:	e062      	b.n	80007e4 <spi_transmit+0x234>
		while(hspi->TxXferCount> 0)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000722:	b29b      	uxth	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1c9      	bne.n	80006bc <spi_transmit+0x10c>
 8000728:	e051      	b.n	80007ce <spi_transmit+0x21e>

	}
	/*Transmit data in 8 bit mode*/
	else
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  1))
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d002      	beq.n	8000738 <spi_transmit+0x188>
 8000732:	8abb      	ldrh	r3, [r7, #20]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d145      	bne.n	80007c4 <spi_transmit+0x214>
		{
			*((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	330c      	adds	r3, #12
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr +=sizeof(uint8_t);
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
			hspi->TxXferCount--;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000754:	b29b      	uxth	r3, r3
 8000756:	3b01      	subs	r3, #1
 8000758:	b29a      	uxth	r2, r3
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	865a      	strh	r2, [r3, #50]	; 0x32
		}
		while(hspi->TxXferCount> 0)
 800075e:	e031      	b.n	80007c4 <spi_transmit+0x214>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	2b00      	cmp	r3, #0
 800076c:	d013      	beq.n	8000796 <spi_transmit+0x1e6>
			{
				*((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	330c      	adds	r3, #12
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr +=sizeof(uint8_t);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	62da      	str	r2, [r3, #44]	; 0x2c
				hspi->TxXferCount--;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800078a:	b29b      	uxth	r3, r3
 800078c:	3b01      	subs	r3, #1
 800078e:	b29a      	uxth	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	865a      	strh	r2, [r3, #50]	; 0x32
 8000794:	e016      	b.n	80007c4 <spi_transmit+0x214>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000796:	f000 f8ff 	bl	8000998 <get_tick>
 800079a:	4602      	mov	r2, r0
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d803      	bhi.n	80007ae <spi_transmit+0x1fe>
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ac:	d102      	bne.n	80007b4 <spi_transmit+0x204>
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d107      	bne.n	80007c4 <spi_transmit+0x214>
		         {
					error_code = DEV_TIMEOUT;
 80007b4:	2303      	movs	r3, #3
 80007b6:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2201      	movs	r2, #1
 80007bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					return error_code;
 80007c0:	7dfb      	ldrb	r3, [r7, #23]
 80007c2:	e00f      	b.n	80007e4 <spi_transmit+0x234>
		while(hspi->TxXferCount> 0)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1c8      	bne.n	8000760 <spi_transmit+0x1b0>
		}

	}


	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <spi_transmit+0x22a>
	{
		error_code = DEV_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2201      	movs	r2, #1
 80007de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	return error_code;
 80007e2:	7dfb      	ldrb	r3, [r7, #23]

}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <spi_receive>:

StatusTypeDef spi_receive(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	4613      	mov	r3, r2
 80007fa:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 80007fc:	2300      	movs	r3, #0
 80007fe:	75fb      	strb	r3, [r7, #23]


	tickstart = get_tick();
 8000800:	f000 f8ca 	bl	8000998 <get_tick>
 8000804:	6138      	str	r0, [r7, #16]

	if(hspi->State != SPI_STATE_READY)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800080c:	2b01      	cmp	r3, #1
 800080e:	d007      	beq.n	8000820 <spi_receive+0x34>
	{
		error_code = DEV_BUSY;
 8000810:	2302      	movs	r3, #2
 8000812:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2201      	movs	r2, #1
 8000818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return error_code;
 800081c:	7dfb      	ldrb	r3, [r7, #23]
 800081e:	e0b6      	b.n	800098e <spi_receive+0x1a2>
	}

	if((p_data == NULL) || (size  == 0))
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <spi_receive+0x40>
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d107      	bne.n	800083c <spi_receive+0x50>
	{
		error_code =  DEV_ERROR;
 800082c:	2301      	movs	r3, #1
 800082e:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2201      	movs	r2, #1
 8000834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return error_code;
 8000838:	7dfb      	ldrb	r3, [r7, #23]
 800083a:	e0a8      	b.n	800098e <spi_receive+0x1a2>
	}

	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_RX;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2204      	movs	r2, #4
 8000840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2200      	movs	r2, #0
 8000848:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->pRxBuffPtr = (uint8_t *)p_data;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	635a      	str	r2, [r3, #52]	; 0x34
	hspi->RxXferSize =  size;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	88fa      	ldrh	r2, [r7, #6]
 8000854:	871a      	strh	r2, [r3, #56]	; 0x38
	hspi->RxXferCount=  size;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	88fa      	ldrh	r2, [r7, #6]
 800085a:	875a      	strh	r2, [r3, #58]	; 0x3a


	hspi->pTxBuffPtr = (uint8_t *)NULL;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2200      	movs	r2, #0
 8000860:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi->TxXferSize =  0;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	2200      	movs	r2, #0
 8000866:	861a      	strh	r2, [r3, #48]	; 0x30
	hspi->TxXferCount=  0;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2200      	movs	r2, #0
 800086c:	865a      	strh	r2, [r3, #50]	; 0x32

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000878:	2b40      	cmp	r3, #64	; 0x40
 800087a:	d007      	beq.n	800088c <spi_receive+0xa0>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800088a:	601a      	str	r2, [r3, #0]
	}

	/*Receive data in 8bit mode*/
	if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d16c      	bne.n	800096e <spi_receive+0x182>
	{
		while(hspi->RxXferCount > 0)
 8000894:	e033      	b.n	80008fe <spi_receive+0x112>
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d015      	beq.n	80008d0 <spi_receive+0xe4>
			{
				*((uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f103 020c 	add.w	r2, r3, #12
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b0:	7812      	ldrb	r2, [r2, #0]
 80008b2:	b2d2      	uxtb	r2, r2
 80008b4:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	635a      	str	r2, [r3, #52]	; 0x34
				hspi->RxXferCount--;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	3b01      	subs	r3, #1
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	875a      	strh	r2, [r3, #58]	; 0x3a
 80008ce:	e016      	b.n	80008fe <spi_receive+0x112>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80008d0:	f000 f862 	bl	8000998 <get_tick>
 80008d4:	4602      	mov	r2, r0
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d803      	bhi.n	80008e8 <spi_receive+0xfc>
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e6:	d102      	bne.n	80008ee <spi_receive+0x102>
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d107      	bne.n	80008fe <spi_receive+0x112>
		         {
					error_code = DEV_TIMEOUT;
 80008ee:	2303      	movs	r3, #3
 80008f0:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2201      	movs	r2, #1
 80008f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					return error_code;
 80008fa:	7dfb      	ldrb	r3, [r7, #23]
 80008fc:	e047      	b.n	800098e <spi_receive+0x1a2>
		while(hspi->RxXferCount > 0)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000902:	b29b      	uxth	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d1c6      	bne.n	8000896 <spi_receive+0xaa>
 8000908:	e036      	b.n	8000978 <spi_receive+0x18c>
	}
	else
	{
		while(hspi->RxXferCount > 0)
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d013      	beq.n	8000940 <spi_receive+0x154>
			{
				*((uint16_t *)hspi->pRxBuffPtr) = ( uint16_t)hspi->Instance->DR;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000922:	b292      	uxth	r2, r2
 8000924:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800092a:	1c9a      	adds	r2, r3, #2
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	635a      	str	r2, [r3, #52]	; 0x34
				hspi->RxXferCount--;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000934:	b29b      	uxth	r3, r3
 8000936:	3b01      	subs	r3, #1
 8000938:	b29a      	uxth	r2, r3
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	875a      	strh	r2, [r3, #58]	; 0x3a
 800093e:	e016      	b.n	800096e <spi_receive+0x182>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000940:	f000 f82a 	bl	8000998 <get_tick>
 8000944:	4602      	mov	r2, r0
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	429a      	cmp	r2, r3
 800094e:	d803      	bhi.n	8000958 <spi_receive+0x16c>
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000956:	d102      	bne.n	800095e <spi_receive+0x172>
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d107      	bne.n	800096e <spi_receive+0x182>
		         {
					error_code = DEV_TIMEOUT;
 800095e:	2303      	movs	r3, #3
 8000960:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2201      	movs	r2, #1
 8000966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					return error_code;
 800096a:	7dfb      	ldrb	r3, [r7, #23]
 800096c:	e00f      	b.n	800098e <spi_receive+0x1a2>
		while(hspi->RxXferCount > 0)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000972:	b29b      	uxth	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1c8      	bne.n	800090a <spi_receive+0x11e>
		           }
			}
		}
	}
	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <spi_receive+0x198>
	{
		error_code = DEV_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2201      	movs	r2, #1
 8000988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	return error_code;
 800098c:	7dfb      	ldrb	r3, [r7, #23]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <get_tick>:
    while((get_tick() - tickstart) < wait){}

}

uint32_t get_tick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <get_tick+0x24>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <get_tick+0x28>)
 80009a6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80009a8:	b662      	cpsie	i
}
 80009aa:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <get_tick+0x28>)
 80009ae:	681b      	ldr	r3, [r3, #0]

}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000070 	.word	0x20000070
 80009c0:	2000006c 	.word	0x2000006c

080009c4 <tick_increment>:
static void tick_increment(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <tick_increment+0x18>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	4a03      	ldr	r2, [pc, #12]	; (80009dc <tick_increment+0x18>)
 80009d0:	6013      	str	r3, [r2, #0]
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	20000070 	.word	0x20000070

080009e0 <timebase_init>:
void timebase_init(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per second*/
	SysTick->LOAD =  ONE_SEC_LOAD - 1;
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <timebase_init+0x40>)
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <timebase_init+0x44>)
 80009ec:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <timebase_init+0x40>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <timebase_init+0x40>)
 80009f6:	2204      	movs	r2, #4
 80009f8:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <timebase_init+0x40>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <timebase_init+0x40>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <timebase_init+0x40>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <timebase_init+0x40>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a12:	b662      	cpsie	i
}
 8000a14:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000e010 	.word	0xe000e010
 8000a24:	00f423ff 	.word	0x00f423ff

08000a28 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	tick_increment();
 8000a2c:	f7ff ffca 	bl	80009c4 <tick_increment>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <debug_uart_init>:
	uart_write(ch);
	return ch;
}

void debug_uart_init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <debug_uart_init+0x84>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <debug_uart_init+0x84>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <debug_uart_init+0x88>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <debug_uart_init+0x88>)
 8000a4a:	f023 0310 	bic.w	r3, r3, #16
 8000a4e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <debug_uart_init+0x88>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <debug_uart_init+0x88>)
 8000a56:	f043 0320 	orr.w	r3, r3, #32
 8000a5a:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <debug_uart_init+0x88>)
 8000a5e:	6a1b      	ldr	r3, [r3, #32]
 8000a60:	4a16      	ldr	r2, [pc, #88]	; (8000abc <debug_uart_init+0x88>)
 8000a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a66:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <debug_uart_init+0x88>)
 8000a6a:	6a1b      	ldr	r3, [r3, #32]
 8000a6c:	4a13      	ldr	r2, [pc, #76]	; (8000abc <debug_uart_init+0x88>)
 8000a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a72:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <debug_uart_init+0x88>)
 8000a76:	6a1b      	ldr	r3, [r3, #32]
 8000a78:	4a10      	ldr	r2, [pc, #64]	; (8000abc <debug_uart_init+0x88>)
 8000a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <debug_uart_init+0x88>)
 8000a82:	6a1b      	ldr	r3, [r3, #32]
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <debug_uart_init+0x88>)
 8000a86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a8a:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <debug_uart_init+0x84>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <debug_uart_init+0x84>)
 8000a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a96:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8000a98:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <debug_uart_init+0x8c>)
 8000a9e:	f000 f827 	bl	8000af0 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <debug_uart_init+0x90>)
 8000aa4:	2208      	movs	r2, #8
 8000aa6:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <debug_uart_init+0x90>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <debug_uart_init+0x90>)
 8000aae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	00f42400 	.word	0x00f42400
 8000ac4:	40004400 	.word	0x40004400

08000ac8 <compute_uart_bd>:

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
}
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	085a      	lsrs	r2, r3, #1
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	441a      	add	r2, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae0:	b29b      	uxth	r3, r3
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000afa:	6839      	ldr	r1, [r7, #0]
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ffe3 	bl	8000ac8 <compute_uart_bd>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <uart_set_baudrate+0x24>)
 8000b08:	609a      	str	r2, [r3, #8]
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40004400 	.word	0x40004400

08000b18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b1c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	; (8000b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <LoopForever+0xe>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	; (8000b64 <LoopForever+0x16>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b46:	f000 f811 	bl	8000b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4a:	f7ff fbf3 	bl	8000334 <main>

08000b4e <LoopForever>:

LoopForever:
    b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   r0, =_estack
 8000b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000b5c:	08000bd4 	.word	0x08000bd4
  ldr r2, =_sbss
 8000b60:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b64:	20000074 	.word	0x20000074

08000b68 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC_IRQHandler>
	...

08000b6c <__libc_init_array>:
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	4d0d      	ldr	r5, [pc, #52]	; (8000ba4 <__libc_init_array+0x38>)
 8000b70:	4c0d      	ldr	r4, [pc, #52]	; (8000ba8 <__libc_init_array+0x3c>)
 8000b72:	1b64      	subs	r4, r4, r5
 8000b74:	10a4      	asrs	r4, r4, #2
 8000b76:	2600      	movs	r6, #0
 8000b78:	42a6      	cmp	r6, r4
 8000b7a:	d109      	bne.n	8000b90 <__libc_init_array+0x24>
 8000b7c:	4d0b      	ldr	r5, [pc, #44]	; (8000bac <__libc_init_array+0x40>)
 8000b7e:	4c0c      	ldr	r4, [pc, #48]	; (8000bb0 <__libc_init_array+0x44>)
 8000b80:	f000 f818 	bl	8000bb4 <_init>
 8000b84:	1b64      	subs	r4, r4, r5
 8000b86:	10a4      	asrs	r4, r4, #2
 8000b88:	2600      	movs	r6, #0
 8000b8a:	42a6      	cmp	r6, r4
 8000b8c:	d105      	bne.n	8000b9a <__libc_init_array+0x2e>
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
 8000b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b94:	4798      	blx	r3
 8000b96:	3601      	adds	r6, #1
 8000b98:	e7ee      	b.n	8000b78 <__libc_init_array+0xc>
 8000b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b9e:	4798      	blx	r3
 8000ba0:	3601      	adds	r6, #1
 8000ba2:	e7f2      	b.n	8000b8a <__libc_init_array+0x1e>
 8000ba4:	08000bcc 	.word	0x08000bcc
 8000ba8:	08000bcc 	.word	0x08000bcc
 8000bac:	08000bcc 	.word	0x08000bcc
 8000bb0:	08000bd0 	.word	0x08000bd0

08000bb4 <_init>:
 8000bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb6:	bf00      	nop
 8000bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bba:	bc08      	pop	{r3}
 8000bbc:	469e      	mov	lr, r3
 8000bbe:	4770      	bx	lr

08000bc0 <_fini>:
 8000bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc2:	bf00      	nop
 8000bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bc6:	bc08      	pop	{r3}
 8000bc8:	469e      	mov	lr, r3
 8000bca:	4770      	bx	lr
